{"version":3,"file":"3D-kofInSSu.js","sources":["../../node_modules/ogl/src/math/functions/Vec3Func.js","../../node_modules/ogl/src/math/Vec3.js","../../node_modules/ogl/src/core/Geometry.js","../../node_modules/ogl/src/core/Program.js","../../node_modules/ogl/src/core/Renderer.js","../../node_modules/ogl/src/math/functions/Vec4Func.js","../../node_modules/ogl/src/math/functions/QuatFunc.js","../../node_modules/ogl/src/math/Quat.js","../../node_modules/ogl/src/math/functions/Mat4Func.js","../../node_modules/ogl/src/math/Mat4.js","../../node_modules/ogl/src/math/functions/EulerFunc.js","../../node_modules/ogl/src/math/Euler.js","../../node_modules/ogl/src/core/Transform.js","../../node_modules/ogl/src/core/Camera.js","../../node_modules/ogl/src/math/functions/Mat3Func.js","../../node_modules/ogl/src/math/Mat3.js","../../node_modules/ogl/src/core/Mesh.js","../../node_modules/ogl/src/core/Texture.js","../../node_modules/ogl/src/core/RenderTarget.js","../../node_modules/ogl/src/math/functions/Vec2Func.js","../../node_modules/ogl/src/math/Vec2.js","../../node_modules/ogl/src/math/Vec4.js","../../node_modules/ogl/src/extras/Triangle.js","../../node_modules/ogl/src/extras/Post.js","../../node_modules/ogl/src/extras/NormalProgram.js","../../node_modules/ogl/src/extras/GLTFAnimation.js","../../node_modules/ogl/src/extras/GLTFSkin.js","../../node_modules/ogl/src/extras/InstancedMesh.js","../../node_modules/ogl/src/extras/GLTFLoader.js","../../assets/js/frontpage/canvas.ts","../../assets/shaders/solid.frag","../../assets/shaders/vertex.glsl","../../assets/shaders/outline.frag","../../assets/shaders/outline.vert","../../assets/shaders/glitch.frag","../../assets/shaders/aberration.frag","../../assets/shaders/post.vert","../../assets/js/frontpage/mouse.ts","../../assets/js/frontpage/3d.ts"],"sourcesContent":["const EPSILON = 0.000001;\n\n/**\n * Calculates the length of a vec3\n *\n * @param {vec3} a vector to calculate length of\n * @returns {Number} length of a\n */\nexport function length(a) {\n    let x = a[0];\n    let y = a[1];\n    let z = a[2];\n    return Math.sqrt(x * x + y * y + z * z);\n}\n\n/**\n * Copy the values from one vec3 to another\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the source vector\n * @returns {vec3} out\n */\nexport function copy(out, a) {\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    return out;\n}\n\n/**\n * Set the components of a vec3 to the given values\n *\n * @param {vec3} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @returns {vec3} out\n */\nexport function set(out, x, y, z) {\n    out[0] = x;\n    out[1] = y;\n    out[2] = z;\n    return out;\n}\n\n/**\n * Adds two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nexport function add(out, a, b) {\n    out[0] = a[0] + b[0];\n    out[1] = a[1] + b[1];\n    out[2] = a[2] + b[2];\n    return out;\n}\n\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nexport function subtract(out, a, b) {\n    out[0] = a[0] - b[0];\n    out[1] = a[1] - b[1];\n    out[2] = a[2] - b[2];\n    return out;\n}\n\n/**\n * Multiplies two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nexport function multiply(out, a, b) {\n    out[0] = a[0] * b[0];\n    out[1] = a[1] * b[1];\n    out[2] = a[2] * b[2];\n    return out;\n}\n\n/**\n * Divides two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nexport function divide(out, a, b) {\n    out[0] = a[0] / b[0];\n    out[1] = a[1] / b[1];\n    out[2] = a[2] / b[2];\n    return out;\n}\n\n/**\n * Scales a vec3 by a scalar number\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec3} out\n */\nexport function scale(out, a, b) {\n    out[0] = a[0] * b;\n    out[1] = a[1] * b;\n    out[2] = a[2] * b;\n    return out;\n}\n\n/**\n * Calculates the euclidian distance between two vec3's\n *\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {Number} distance between a and b\n */\nexport function distance(a, b) {\n    let x = b[0] - a[0];\n    let y = b[1] - a[1];\n    let z = b[2] - a[2];\n    return Math.sqrt(x * x + y * y + z * z);\n}\n\n/**\n * Calculates the squared euclidian distance between two vec3's\n *\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {Number} squared distance between a and b\n */\nexport function squaredDistance(a, b) {\n    let x = b[0] - a[0];\n    let y = b[1] - a[1];\n    let z = b[2] - a[2];\n    return x * x + y * y + z * z;\n}\n\n/**\n * Calculates the squared length of a vec3\n *\n * @param {vec3} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\nexport function squaredLength(a) {\n    let x = a[0];\n    let y = a[1];\n    let z = a[2];\n    return x * x + y * y + z * z;\n}\n\n/**\n * Negates the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a vector to negate\n * @returns {vec3} out\n */\nexport function negate(out, a) {\n    out[0] = -a[0];\n    out[1] = -a[1];\n    out[2] = -a[2];\n    return out;\n}\n\n/**\n * Returns the inverse of the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a vector to invert\n * @returns {vec3} out\n */\nexport function inverse(out, a) {\n    out[0] = 1.0 / a[0];\n    out[1] = 1.0 / a[1];\n    out[2] = 1.0 / a[2];\n    return out;\n}\n\n/**\n * Normalize a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a vector to normalize\n * @returns {vec3} out\n */\nexport function normalize(out, a) {\n    let x = a[0];\n    let y = a[1];\n    let z = a[2];\n    let len = x * x + y * y + z * z;\n    if (len > 0) {\n        //TODO: evaluate use of glm_invsqrt here?\n        len = 1 / Math.sqrt(len);\n    }\n    out[0] = a[0] * len;\n    out[1] = a[1] * len;\n    out[2] = a[2] * len;\n    return out;\n}\n\n/**\n * Calculates the dot product of two vec3's\n *\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {Number} dot product of a and b\n */\nexport function dot(a, b) {\n    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n}\n\n/**\n * Computes the cross product of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nexport function cross(out, a, b) {\n    let ax = a[0],\n        ay = a[1],\n        az = a[2];\n    let bx = b[0],\n        by = b[1],\n        bz = b[2];\n\n    out[0] = ay * bz - az * by;\n    out[1] = az * bx - ax * bz;\n    out[2] = ax * by - ay * bx;\n    return out;\n}\n\n/**\n * Performs a linear interpolation between two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @param {Number} t interpolation amount between the two inputs\n * @returns {vec3} out\n */\nexport function lerp(out, a, b, t) {\n    let ax = a[0];\n    let ay = a[1];\n    let az = a[2];\n    out[0] = ax + t * (b[0] - ax);\n    out[1] = ay + t * (b[1] - ay);\n    out[2] = az + t * (b[2] - az);\n    return out;\n}\n\n/**\n * Transforms the vec3 with a mat4.\n * 4th vector component is implicitly '1'\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the vector to transform\n * @param {mat4} m matrix to transform with\n * @returns {vec3} out\n */\nexport function transformMat4(out, a, m) {\n    let x = a[0],\n        y = a[1],\n        z = a[2];\n    let w = m[3] * x + m[7] * y + m[11] * z + m[15];\n    w = w || 1.0;\n    out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;\n    out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;\n    out[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;\n    return out;\n}\n\n/**\n * Same as above but doesn't apply translation.\n * Useful for rays.\n */\nexport function scaleRotateMat4(out, a, m) {\n    let x = a[0],\n        y = a[1],\n        z = a[2];\n    let w = m[3] * x + m[7] * y + m[11] * z + m[15];\n    w = w || 1.0;\n    out[0] = (m[0] * x + m[4] * y + m[8] * z) / w;\n    out[1] = (m[1] * x + m[5] * y + m[9] * z) / w;\n    out[2] = (m[2] * x + m[6] * y + m[10] * z) / w;\n    return out;\n}\n\n/**\n * Transforms the vec3 with a mat3.\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the vector to transform\n * @param {mat3} m the 3x3 matrix to transform with\n * @returns {vec3} out\n */\nexport function transformMat3(out, a, m) {\n    let x = a[0],\n        y = a[1],\n        z = a[2];\n    out[0] = x * m[0] + y * m[3] + z * m[6];\n    out[1] = x * m[1] + y * m[4] + z * m[7];\n    out[2] = x * m[2] + y * m[5] + z * m[8];\n    return out;\n}\n\n/**\n * Transforms the vec3 with a quat\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the vector to transform\n * @param {quat} q quaternion to transform with\n * @returns {vec3} out\n */\nexport function transformQuat(out, a, q) {\n    // benchmarks: https://jsperf.com/quaternion-transform-vec3-implementations-fixed\n\n    let x = a[0],\n        y = a[1],\n        z = a[2];\n    let qx = q[0],\n        qy = q[1],\n        qz = q[2],\n        qw = q[3];\n\n    let uvx = qy * z - qz * y;\n    let uvy = qz * x - qx * z;\n    let uvz = qx * y - qy * x;\n\n    let uuvx = qy * uvz - qz * uvy;\n    let uuvy = qz * uvx - qx * uvz;\n    let uuvz = qx * uvy - qy * uvx;\n\n    let w2 = qw * 2;\n    uvx *= w2;\n    uvy *= w2;\n    uvz *= w2;\n\n    uuvx *= 2;\n    uuvy *= 2;\n    uuvz *= 2;\n\n    out[0] = x + uvx + uuvx;\n    out[1] = y + uvy + uuvy;\n    out[2] = z + uvz + uuvz;\n    return out;\n}\n\n/**\n * Get the angle between two 3D vectors\n * @param {vec3} a The first operand\n * @param {vec3} b The second operand\n * @returns {Number} The angle in radians\n */\nexport const angle = (function () {\n    const tempA = [0, 0, 0];\n    const tempB = [0, 0, 0];\n\n    return function (a, b) {\n        copy(tempA, a);\n        copy(tempB, b);\n\n        normalize(tempA, tempA);\n        normalize(tempB, tempB);\n\n        let cosine = dot(tempA, tempB);\n\n        if (cosine > 1.0) {\n            return 0;\n        } else if (cosine < -1.0) {\n            return Math.PI;\n        } else {\n            return Math.acos(cosine);\n        }\n    };\n})();\n\n/**\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\n *\n * @param {vec3} a The first vector.\n * @param {vec3} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nexport function exactEquals(a, b) {\n    return a[0] === b[0] && a[1] === b[1] && a[2] === b[2];\n}\n","import * as Vec3Func from './functions/Vec3Func.js';\n\nexport class Vec3 extends Array {\n    constructor(x = 0, y = x, z = x) {\n        super(x, y, z);\n        return this;\n    }\n\n    get x() {\n        return this[0];\n    }\n\n    get y() {\n        return this[1];\n    }\n\n    get z() {\n        return this[2];\n    }\n\n    set x(v) {\n        this[0] = v;\n    }\n\n    set y(v) {\n        this[1] = v;\n    }\n\n    set z(v) {\n        this[2] = v;\n    }\n\n    set(x, y = x, z = x) {\n        if (x.length) return this.copy(x);\n        Vec3Func.set(this, x, y, z);\n        return this;\n    }\n\n    copy(v) {\n        Vec3Func.copy(this, v);\n        return this;\n    }\n\n    add(va, vb) {\n        if (vb) Vec3Func.add(this, va, vb);\n        else Vec3Func.add(this, this, va);\n        return this;\n    }\n\n    sub(va, vb) {\n        if (vb) Vec3Func.subtract(this, va, vb);\n        else Vec3Func.subtract(this, this, va);\n        return this;\n    }\n\n    multiply(v) {\n        if (v.length) Vec3Func.multiply(this, this, v);\n        else Vec3Func.scale(this, this, v);\n        return this;\n    }\n\n    divide(v) {\n        if (v.length) Vec3Func.divide(this, this, v);\n        else Vec3Func.scale(this, this, 1 / v);\n        return this;\n    }\n\n    inverse(v = this) {\n        Vec3Func.inverse(this, v);\n        return this;\n    }\n\n    // Can't use 'length' as Array.prototype uses it\n    len() {\n        return Vec3Func.length(this);\n    }\n\n    distance(v) {\n        if (v) return Vec3Func.distance(this, v);\n        else return Vec3Func.length(this);\n    }\n\n    squaredLen() {\n        return Vec3Func.squaredLength(this);\n    }\n\n    squaredDistance(v) {\n        if (v) return Vec3Func.squaredDistance(this, v);\n        else return Vec3Func.squaredLength(this);\n    }\n\n    negate(v = this) {\n        Vec3Func.negate(this, v);\n        return this;\n    }\n\n    cross(va, vb) {\n        if (vb) Vec3Func.cross(this, va, vb);\n        else Vec3Func.cross(this, this, va);\n        return this;\n    }\n\n    scale(v) {\n        Vec3Func.scale(this, this, v);\n        return this;\n    }\n\n    normalize() {\n        Vec3Func.normalize(this, this);\n        return this;\n    }\n\n    dot(v) {\n        return Vec3Func.dot(this, v);\n    }\n\n    equals(v) {\n        return Vec3Func.exactEquals(this, v);\n    }\n\n    applyMatrix3(mat3) {\n        Vec3Func.transformMat3(this, this, mat3);\n        return this;\n    }\n\n    applyMatrix4(mat4) {\n        Vec3Func.transformMat4(this, this, mat4);\n        return this;\n    }\n\n    scaleRotateMatrix4(mat4) {\n        Vec3Func.scaleRotateMat4(this, this, mat4);\n        return this;\n    }\n\n    applyQuaternion(q) {\n        Vec3Func.transformQuat(this, this, q);\n        return this;\n    }\n\n    angle(v) {\n        return Vec3Func.angle(this, v);\n    }\n\n    lerp(v, t) {\n        Vec3Func.lerp(this, this, v, t);\n        return this;\n    }\n\n    clone() {\n        return new Vec3(this[0], this[1], this[2]);\n    }\n\n    fromArray(a, o = 0) {\n        this[0] = a[o];\n        this[1] = a[o + 1];\n        this[2] = a[o + 2];\n        return this;\n    }\n\n    toArray(a = [], o = 0) {\n        a[o] = this[0];\n        a[o + 1] = this[1];\n        a[o + 2] = this[2];\n        return a;\n    }\n\n    transformDirection(mat4) {\n        const x = this[0];\n        const y = this[1];\n        const z = this[2];\n\n        this[0] = mat4[0] * x + mat4[4] * y + mat4[8] * z;\n        this[1] = mat4[1] * x + mat4[5] * y + mat4[9] * z;\n        this[2] = mat4[2] * x + mat4[6] * y + mat4[10] * z;\n\n        return this.normalize();\n    }\n}\n","// attribute params\n// {\n//     data - typed array eg UInt16Array for indices, Float32Array\n//     size - int default 1\n//     instanced - default null. Pass divisor amount\n//     type - gl enum default gl.UNSIGNED_SHORT for 'index', gl.FLOAT for others\n//     normalized - boolean default false\n\n//     buffer - gl buffer, if buffer exists, don't need to provide data - although needs position data for bounds calculation\n//     stride - default 0 - for when passing in buffer\n//     offset - default 0 - for when passing in buffer\n//     count - default null - for when passing in buffer\n//     min - array - for when passing in buffer\n//     max - array - for when passing in buffer\n// }\n\n// TODO: fit in transform feedback\n\nimport { Vec3 } from '../math/Vec3.js';\n\nconst tempVec3 = /* @__PURE__ */ new Vec3();\n\nlet ID = 1;\nlet ATTR_ID = 1;\n\n// To stop inifinite warnings\nlet isBoundsWarned = false;\n\nexport class Geometry {\n    constructor(gl, attributes = {}) {\n        if (!gl.canvas) console.error('gl not passed as first argument to Geometry');\n        this.gl = gl;\n        this.attributes = attributes;\n        this.id = ID++;\n\n        // Store one VAO per program attribute locations order\n        this.VAOs = {};\n\n        this.drawRange = { start: 0, count: 0 };\n        this.instancedCount = 0;\n\n        // Unbind current VAO so that new buffers don't get added to active mesh\n        this.gl.renderer.bindVertexArray(null);\n        this.gl.renderer.currentGeometry = null;\n\n        // Alias for state store to avoid redundant calls for global state\n        this.glState = this.gl.renderer.state;\n\n        // create the buffers\n        for (let key in attributes) {\n            this.addAttribute(key, attributes[key]);\n        }\n    }\n\n    addAttribute(key, attr) {\n        this.attributes[key] = attr;\n\n        // Set options\n        attr.id = ATTR_ID++; // TODO: currently unused, remove?\n        attr.size = attr.size || 1;\n        attr.type =\n            attr.type ||\n            (attr.data.constructor === Float32Array\n                ? this.gl.FLOAT\n                : attr.data.constructor === Uint16Array\n                ? this.gl.UNSIGNED_SHORT\n                : this.gl.UNSIGNED_INT); // Uint32Array\n        attr.target = key === 'index' ? this.gl.ELEMENT_ARRAY_BUFFER : this.gl.ARRAY_BUFFER;\n        attr.normalized = attr.normalized || false;\n        attr.stride = attr.stride || 0;\n        attr.offset = attr.offset || 0;\n        attr.count = attr.count || (attr.stride ? attr.data.byteLength / attr.stride : attr.data.length / attr.size);\n        attr.divisor = attr.instanced || 0;\n        attr.needsUpdate = false;\n        attr.usage = attr.usage || this.gl.STATIC_DRAW;\n\n        if (!attr.buffer) {\n            // Push data to buffer\n            this.updateAttribute(attr);\n        }\n\n        // Update geometry counts. If indexed, ignore regular attributes\n        if (attr.divisor) {\n            this.isInstanced = true;\n            if (this.instancedCount && this.instancedCount !== attr.count * attr.divisor) {\n                console.warn('geometry has multiple instanced buffers of different length');\n                return (this.instancedCount = Math.min(this.instancedCount, attr.count * attr.divisor));\n            }\n            this.instancedCount = attr.count * attr.divisor;\n        } else if (key === 'index') {\n            this.drawRange.count = attr.count;\n        } else if (!this.attributes.index) {\n            this.drawRange.count = Math.max(this.drawRange.count, attr.count);\n        }\n    }\n\n    updateAttribute(attr) {\n        const isNewBuffer = !attr.buffer;\n        if (isNewBuffer) attr.buffer = this.gl.createBuffer();\n        if (this.glState.boundBuffer !== attr.buffer) {\n            this.gl.bindBuffer(attr.target, attr.buffer);\n            this.glState.boundBuffer = attr.buffer;\n        }\n        if (isNewBuffer) {\n            this.gl.bufferData(attr.target, attr.data, attr.usage);\n        } else {\n            this.gl.bufferSubData(attr.target, 0, attr.data);\n        }\n        attr.needsUpdate = false;\n    }\n\n    setIndex(value) {\n        this.addAttribute('index', value);\n    }\n\n    setDrawRange(start, count) {\n        this.drawRange.start = start;\n        this.drawRange.count = count;\n    }\n\n    setInstancedCount(value) {\n        this.instancedCount = value;\n    }\n\n    createVAO(program) {\n        this.VAOs[program.attributeOrder] = this.gl.renderer.createVertexArray();\n        this.gl.renderer.bindVertexArray(this.VAOs[program.attributeOrder]);\n        this.bindAttributes(program);\n    }\n\n    bindAttributes(program) {\n        // Link all attributes to program using gl.vertexAttribPointer\n        program.attributeLocations.forEach((location, { name, type }) => {\n            // If geometry missing a required shader attribute\n            if (!this.attributes[name]) {\n                console.warn(`active attribute ${name} not being supplied`);\n                return;\n            }\n\n            const attr = this.attributes[name];\n\n            this.gl.bindBuffer(attr.target, attr.buffer);\n            this.glState.boundBuffer = attr.buffer;\n\n            // For matrix attributes, buffer needs to be defined per column\n            let numLoc = 1;\n            if (type === 35674) numLoc = 2; // mat2\n            if (type === 35675) numLoc = 3; // mat3\n            if (type === 35676) numLoc = 4; // mat4\n\n            const size = attr.size / numLoc;\n            const stride = numLoc === 1 ? 0 : numLoc * numLoc * 4;\n            const offset = numLoc === 1 ? 0 : numLoc * 4;\n\n            for (let i = 0; i < numLoc; i++) {\n                this.gl.vertexAttribPointer(location + i, size, attr.type, attr.normalized, attr.stride + stride, attr.offset + i * offset);\n                this.gl.enableVertexAttribArray(location + i);\n\n                // For instanced attributes, divisor needs to be set.\n                // For firefox, need to set back to 0 if non-instanced drawn after instanced. Else won't render\n                this.gl.renderer.vertexAttribDivisor(location + i, attr.divisor);\n            }\n        });\n\n        // Bind indices if geometry indexed\n        if (this.attributes.index) this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER, this.attributes.index.buffer);\n    }\n\n    draw({ program, mode = this.gl.TRIANGLES }) {\n        if (this.gl.renderer.currentGeometry !== `${this.id}_${program.attributeOrder}`) {\n            if (!this.VAOs[program.attributeOrder]) this.createVAO(program);\n            this.gl.renderer.bindVertexArray(this.VAOs[program.attributeOrder]);\n            this.gl.renderer.currentGeometry = `${this.id}_${program.attributeOrder}`;\n        }\n\n        // Check if any attributes need updating\n        program.attributeLocations.forEach((location, { name }) => {\n            const attr = this.attributes[name];\n            if (attr.needsUpdate) this.updateAttribute(attr);\n        });\n\n        // For drawElements, offset needs to be multiple of type size\n        let indexBytesPerElement = 2;\n        if (this.attributes.index?.type === this.gl.UNSIGNED_INT) indexBytesPerElement = 4;\n\n        if (this.isInstanced) {\n            if (this.attributes.index) {\n                this.gl.renderer.drawElementsInstanced(\n                    mode,\n                    this.drawRange.count,\n                    this.attributes.index.type,\n                    this.attributes.index.offset + this.drawRange.start * indexBytesPerElement,\n                    this.instancedCount\n                );\n            } else {\n                this.gl.renderer.drawArraysInstanced(mode, this.drawRange.start, this.drawRange.count, this.instancedCount);\n            }\n        } else {\n            if (this.attributes.index) {\n                this.gl.drawElements(\n                    mode,\n                    this.drawRange.count,\n                    this.attributes.index.type,\n                    this.attributes.index.offset + this.drawRange.start * indexBytesPerElement\n                );\n            } else {\n                this.gl.drawArrays(mode, this.drawRange.start, this.drawRange.count);\n            }\n        }\n    }\n\n    getPosition() {\n        // Use position buffer, or min/max if available\n        const attr = this.attributes.position;\n        // if (attr.min) return [...attr.min, ...attr.max];\n        if (attr.data) return attr;\n        if (isBoundsWarned) return;\n        console.warn('No position buffer data found to compute bounds');\n        return (isBoundsWarned = true);\n    }\n\n    computeBoundingBox(attr) {\n        if (!attr) attr = this.getPosition();\n        const array = attr.data;\n        // Data loaded shouldn't haave stride, only buffers\n        // const stride = attr.stride ? attr.stride / array.BYTES_PER_ELEMENT : attr.size;\n        const stride = attr.size;\n\n        if (!this.bounds) {\n            this.bounds = {\n                min: new Vec3(),\n                max: new Vec3(),\n                center: new Vec3(),\n                scale: new Vec3(),\n                radius: Infinity,\n            };\n        }\n\n        const min = this.bounds.min;\n        const max = this.bounds.max;\n        const center = this.bounds.center;\n        const scale = this.bounds.scale;\n\n        min.set(+Infinity);\n        max.set(-Infinity);\n\n        // TODO: check size of position (eg triangle with Vec2)\n        for (let i = 0, l = array.length; i < l; i += stride) {\n            const x = array[i];\n            const y = array[i + 1];\n            const z = array[i + 2];\n\n            min.x = Math.min(x, min.x);\n            min.y = Math.min(y, min.y);\n            min.z = Math.min(z, min.z);\n\n            max.x = Math.max(x, max.x);\n            max.y = Math.max(y, max.y);\n            max.z = Math.max(z, max.z);\n        }\n\n        scale.sub(max, min);\n        center.add(min, max).divide(2);\n    }\n\n    computeBoundingSphere(attr) {\n        if (!attr) attr = this.getPosition();\n        const array = attr.data;\n        // Data loaded shouldn't haave stride, only buffers\n        // const stride = attr.stride ? attr.stride / array.BYTES_PER_ELEMENT : attr.size;\n        const stride = attr.size;\n\n        if (!this.bounds) this.computeBoundingBox(attr);\n\n        let maxRadiusSq = 0;\n        for (let i = 0, l = array.length; i < l; i += stride) {\n            tempVec3.fromArray(array, i);\n            maxRadiusSq = Math.max(maxRadiusSq, this.bounds.center.squaredDistance(tempVec3));\n        }\n\n        this.bounds.radius = Math.sqrt(maxRadiusSq);\n    }\n\n    remove() {\n        for (let key in this.VAOs) {\n            this.gl.renderer.deleteVertexArray(this.VAOs[key]);\n            delete this.VAOs[key];\n        }\n        for (let key in this.attributes) {\n            this.gl.deleteBuffer(this.attributes[key].buffer);\n            delete this.attributes[key];\n        }\n    }\n}\n","// TODO: upload empty texture if null ? maybe not\n// TODO: upload identity matrix if null ?\n// TODO: sampler Cube\n\nlet ID = 1;\n\n// cache of typed arrays used to flatten uniform arrays\nconst arrayCacheF32 = {};\n\nexport class Program {\n    constructor(\n        gl,\n        {\n            vertex,\n            fragment,\n            uniforms = {},\n\n            transparent = false,\n            cullFace = gl.BACK,\n            frontFace = gl.CCW,\n            depthTest = true,\n            depthWrite = true,\n            depthFunc = gl.LEQUAL,\n        } = {}\n    ) {\n        if (!gl.canvas) console.error('gl not passed as first argument to Program');\n        this.gl = gl;\n        this.uniforms = uniforms;\n        this.id = ID++;\n\n        if (!vertex) console.warn('vertex shader not supplied');\n        if (!fragment) console.warn('fragment shader not supplied');\n\n        // Store program state\n        this.transparent = transparent;\n        this.cullFace = cullFace;\n        this.frontFace = frontFace;\n        this.depthTest = depthTest;\n        this.depthWrite = depthWrite;\n        this.depthFunc = depthFunc;\n        this.blendFunc = {};\n        this.blendEquation = {};\n\n        // set default blendFunc if transparent flagged\n        if (this.transparent && !this.blendFunc.src) {\n            if (this.gl.renderer.premultipliedAlpha) this.setBlendFunc(this.gl.ONE, this.gl.ONE_MINUS_SRC_ALPHA);\n            else this.setBlendFunc(this.gl.SRC_ALPHA, this.gl.ONE_MINUS_SRC_ALPHA);\n        }\n\n        // Create empty shaders and attach to program\n        this.vertexShader = gl.createShader(gl.VERTEX_SHADER);\n        this.fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);\n        this.program = gl.createProgram();\n        gl.attachShader(this.program, this.vertexShader);\n        gl.attachShader(this.program, this.fragmentShader);\n\n        // Compile shaders with source\n        this.setShaders({ vertex, fragment });\n    }\n\n    setShaders({ vertex, fragment }) {\n        if (vertex) {\n            // compile vertex shader and log errors\n            this.gl.shaderSource(this.vertexShader, vertex);\n            this.gl.compileShader(this.vertexShader);\n            if (this.gl.getShaderInfoLog(this.vertexShader) !== '') {\n                console.warn(`${this.gl.getShaderInfoLog(this.vertexShader)}\\nVertex Shader\\n${addLineNumbers(vertex)}`);\n            }\n        }\n\n        if (fragment) {\n            // compile fragment shader and log errors\n            this.gl.shaderSource(this.fragmentShader, fragment);\n            this.gl.compileShader(this.fragmentShader);\n            if (this.gl.getShaderInfoLog(this.fragmentShader) !== '') {\n                console.warn(`${this.gl.getShaderInfoLog(this.fragmentShader)}\\nFragment Shader\\n${addLineNumbers(fragment)}`);\n            }\n        }\n\n        // compile program and log errors\n        this.gl.linkProgram(this.program);\n        if (!this.gl.getProgramParameter(this.program, this.gl.LINK_STATUS)) {\n            return console.warn(this.gl.getProgramInfoLog(this.program));\n        }\n\n        // Get active uniform locations\n        this.uniformLocations = new Map();\n        let numUniforms = this.gl.getProgramParameter(this.program, this.gl.ACTIVE_UNIFORMS);\n        for (let uIndex = 0; uIndex < numUniforms; uIndex++) {\n            let uniform = this.gl.getActiveUniform(this.program, uIndex);\n            this.uniformLocations.set(uniform, this.gl.getUniformLocation(this.program, uniform.name));\n\n            // split uniforms' names to separate array and struct declarations\n            const split = uniform.name.match(/(\\w+)/g);\n\n            uniform.uniformName = split[0];\n            uniform.nameComponents = split.slice(1);\n        }\n\n        // Get active attribute locations\n        this.attributeLocations = new Map();\n        const locations = [];\n        const numAttribs = this.gl.getProgramParameter(this.program, this.gl.ACTIVE_ATTRIBUTES);\n        for (let aIndex = 0; aIndex < numAttribs; aIndex++) {\n            const attribute = this.gl.getActiveAttrib(this.program, aIndex);\n            const location = this.gl.getAttribLocation(this.program, attribute.name);\n            // Ignore special built-in inputs. eg gl_VertexID, gl_InstanceID\n            if (location === -1) continue;\n            locations[location] = attribute.name;\n            this.attributeLocations.set(attribute, location);\n        }\n        this.attributeOrder = locations.join('');\n    }\n\n    setBlendFunc(src, dst, srcAlpha, dstAlpha) {\n        this.blendFunc.src = src;\n        this.blendFunc.dst = dst;\n        this.blendFunc.srcAlpha = srcAlpha;\n        this.blendFunc.dstAlpha = dstAlpha;\n        if (src) this.transparent = true;\n    }\n\n    setBlendEquation(modeRGB, modeAlpha) {\n        this.blendEquation.modeRGB = modeRGB;\n        this.blendEquation.modeAlpha = modeAlpha;\n    }\n\n    applyState() {\n        if (this.depthTest) this.gl.renderer.enable(this.gl.DEPTH_TEST);\n        else this.gl.renderer.disable(this.gl.DEPTH_TEST);\n\n        if (this.cullFace) this.gl.renderer.enable(this.gl.CULL_FACE);\n        else this.gl.renderer.disable(this.gl.CULL_FACE);\n\n        if (this.blendFunc.src) this.gl.renderer.enable(this.gl.BLEND);\n        else this.gl.renderer.disable(this.gl.BLEND);\n\n        if (this.cullFace) this.gl.renderer.setCullFace(this.cullFace);\n        this.gl.renderer.setFrontFace(this.frontFace);\n        this.gl.renderer.setDepthMask(this.depthWrite);\n        this.gl.renderer.setDepthFunc(this.depthFunc);\n        if (this.blendFunc.src)\n            this.gl.renderer.setBlendFunc(this.blendFunc.src, this.blendFunc.dst, this.blendFunc.srcAlpha, this.blendFunc.dstAlpha);\n        this.gl.renderer.setBlendEquation(this.blendEquation.modeRGB, this.blendEquation.modeAlpha);\n    }\n\n    use({ flipFaces = false } = {}) {\n        let textureUnit = -1;\n        const programActive = this.gl.renderer.state.currentProgram === this.id;\n\n        // Avoid gl call if program already in use\n        if (!programActive) {\n            this.gl.useProgram(this.program);\n            this.gl.renderer.state.currentProgram = this.id;\n        }\n\n        // Set only the active uniforms found in the shader\n        this.uniformLocations.forEach((location, activeUniform) => {\n            let uniform = this.uniforms[activeUniform.uniformName];\n\n            for (const component of activeUniform.nameComponents) {\n                if (!uniform) break;\n\n                if (component in uniform) {\n                    uniform = uniform[component];\n                } else if (Array.isArray(uniform.value)) {\n                    break;\n                } else {\n                    uniform = undefined;\n                    break;\n                }\n            }\n\n            if (!uniform) {\n                return warn(`Active uniform ${activeUniform.name} has not been supplied`);\n            }\n\n            if (uniform && uniform.value === undefined) {\n                return warn(`${activeUniform.name} uniform is missing a value parameter`);\n            }\n\n            if (uniform.value.texture) {\n                textureUnit = textureUnit + 1;\n\n                // Check if texture needs to be updated\n                uniform.value.update(textureUnit);\n                return setUniform(this.gl, activeUniform.type, location, textureUnit);\n            }\n\n            // For texture arrays, set uniform as an array of texture units instead of just one\n            if (uniform.value.length && uniform.value[0].texture) {\n                const textureUnits = [];\n                uniform.value.forEach((value) => {\n                    textureUnit = textureUnit + 1;\n                    value.update(textureUnit);\n                    textureUnits.push(textureUnit);\n                });\n\n                return setUniform(this.gl, activeUniform.type, location, textureUnits);\n            }\n\n            setUniform(this.gl, activeUniform.type, location, uniform.value);\n        });\n\n        this.applyState();\n        if (flipFaces) this.gl.renderer.setFrontFace(this.frontFace === this.gl.CCW ? this.gl.CW : this.gl.CCW);\n    }\n\n    remove() {\n        this.gl.deleteProgram(this.program);\n    }\n}\n\nfunction setUniform(gl, type, location, value) {\n    value = value.length ? flatten(value) : value;\n    const setValue = gl.renderer.state.uniformLocations.get(location);\n\n    // Avoid redundant uniform commands\n    if (value.length) {\n        if (setValue === undefined || setValue.length !== value.length) {\n            // clone array to store as cache\n            gl.renderer.state.uniformLocations.set(location, value.slice(0));\n        } else {\n            if (arraysEqual(setValue, value)) return;\n\n            // Update cached array values\n            setValue.set ? setValue.set(value) : setArray(setValue, value);\n            gl.renderer.state.uniformLocations.set(location, setValue);\n        }\n    } else {\n        if (setValue === value) return;\n        gl.renderer.state.uniformLocations.set(location, value);\n    }\n\n    switch (type) {\n        case 5126:\n            return value.length ? gl.uniform1fv(location, value) : gl.uniform1f(location, value); // FLOAT\n        case 35664:\n            return gl.uniform2fv(location, value); // FLOAT_VEC2\n        case 35665:\n            return gl.uniform3fv(location, value); // FLOAT_VEC3\n        case 35666:\n            return gl.uniform4fv(location, value); // FLOAT_VEC4\n        case 35670: // BOOL\n        case 5124: // INT\n        case 35678: // SAMPLER_2D\n        case 36306: // U_SAMPLER_2D\n        case 35680: // SAMPLER_CUBE\n        case 36289: // SAMPLER_2D_ARRAY\n            return value.length ? gl.uniform1iv(location, value) : gl.uniform1i(location, value); // SAMPLER_CUBE\n        case 35671: // BOOL_VEC2\n        case 35667:\n            return gl.uniform2iv(location, value); // INT_VEC2\n        case 35672: // BOOL_VEC3\n        case 35668:\n            return gl.uniform3iv(location, value); // INT_VEC3\n        case 35673: // BOOL_VEC4\n        case 35669:\n            return gl.uniform4iv(location, value); // INT_VEC4\n        case 35674:\n            return gl.uniformMatrix2fv(location, false, value); // FLOAT_MAT2\n        case 35675:\n            return gl.uniformMatrix3fv(location, false, value); // FLOAT_MAT3\n        case 35676:\n            return gl.uniformMatrix4fv(location, false, value); // FLOAT_MAT4\n    }\n}\n\nfunction addLineNumbers(string) {\n    let lines = string.split('\\n');\n    for (let i = 0; i < lines.length; i++) {\n        lines[i] = i + 1 + ': ' + lines[i];\n    }\n    return lines.join('\\n');\n}\n\nfunction flatten(a) {\n    const arrayLen = a.length;\n    const valueLen = a[0].length;\n    if (valueLen === undefined) return a;\n    const length = arrayLen * valueLen;\n    let value = arrayCacheF32[length];\n    if (!value) arrayCacheF32[length] = value = new Float32Array(length);\n    for (let i = 0; i < arrayLen; i++) value.set(a[i], i * valueLen);\n    return value;\n}\n\nfunction arraysEqual(a, b) {\n    if (a.length !== b.length) return false;\n    for (let i = 0, l = a.length; i < l; i++) {\n        if (a[i] !== b[i]) return false;\n    }\n    return true;\n}\n\nfunction setArray(a, b) {\n    for (let i = 0, l = a.length; i < l; i++) {\n        a[i] = b[i];\n    }\n}\n\nlet warnCount = 0;\nfunction warn(message) {\n    if (warnCount > 100) return;\n    console.warn(message);\n    warnCount++;\n    if (warnCount > 100) console.warn('More than 100 program warnings - stopping logs.');\n}\n","import { Vec3 } from '../math/Vec3.js';\n\n// TODO: Handle context loss https://www.khronos.org/webgl/wiki/HandlingContextLost\n\n// Not automatic - devs to use these methods manually\n// gl.colorMask( colorMask, colorMask, colorMask, colorMask );\n// gl.clearColor( r, g, b, a );\n// gl.stencilMask( stencilMask );\n// gl.stencilFunc( stencilFunc, stencilRef, stencilMask );\n// gl.stencilOp( stencilFail, stencilZFail, stencilZPass );\n// gl.clearStencil( stencil );\n\nconst tempVec3 = /* @__PURE__ */ new Vec3();\nlet ID = 1;\n\nexport class Renderer {\n    constructor({\n        canvas = document.createElement('canvas'),\n        width = 300,\n        height = 150,\n        dpr = 1,\n        alpha = false,\n        depth = true,\n        stencil = false,\n        antialias = false,\n        premultipliedAlpha = false,\n        preserveDrawingBuffer = false,\n        powerPreference = 'default',\n        autoClear = true,\n        webgl = 2,\n    } = {}) {\n        const attributes = { alpha, depth, stencil, antialias, premultipliedAlpha, preserveDrawingBuffer, powerPreference };\n        this.dpr = dpr;\n        this.alpha = alpha;\n        this.color = true;\n        this.depth = depth;\n        this.stencil = stencil;\n        this.premultipliedAlpha = premultipliedAlpha;\n        this.autoClear = autoClear;\n        this.id = ID++;\n\n        // Attempt WebGL2 unless forced to 1, if not supported fallback to WebGL1\n        if (webgl === 2) this.gl = canvas.getContext('webgl2', attributes);\n        this.isWebgl2 = !!this.gl;\n        if (!this.gl) this.gl = canvas.getContext('webgl', attributes);\n        if (!this.gl) console.error('unable to create webgl context');\n\n        // Attach renderer to gl so that all classes have access to internal state functions\n        this.gl.renderer = this;\n\n        // initialise size values\n        this.setSize(width, height);\n\n        // gl state stores to avoid redundant calls on methods used internally\n        this.state = {};\n        this.state.blendFunc = { src: this.gl.ONE, dst: this.gl.ZERO };\n        this.state.blendEquation = { modeRGB: this.gl.FUNC_ADD };\n        this.state.cullFace = false;\n        this.state.frontFace = this.gl.CCW;\n        this.state.depthMask = true;\n        this.state.depthFunc = this.gl.LEQUAL;\n        this.state.premultiplyAlpha = false;\n        this.state.flipY = false;\n        this.state.unpackAlignment = 4;\n        this.state.framebuffer = null;\n        this.state.viewport = { x: 0, y: 0, width: null, height: null };\n        this.state.textureUnits = [];\n        this.state.activeTextureUnit = 0;\n        this.state.boundBuffer = null;\n        this.state.uniformLocations = new Map();\n        this.state.currentProgram = null;\n\n        // store requested extensions\n        this.extensions = {};\n\n        // Initialise extra format types\n        if (this.isWebgl2) {\n            this.getExtension('EXT_color_buffer_float');\n            this.getExtension('OES_texture_float_linear');\n        } else {\n            this.getExtension('OES_texture_float');\n            this.getExtension('OES_texture_float_linear');\n            this.getExtension('OES_texture_half_float');\n            this.getExtension('OES_texture_half_float_linear');\n            this.getExtension('OES_element_index_uint');\n            this.getExtension('OES_standard_derivatives');\n            this.getExtension('EXT_sRGB');\n            this.getExtension('WEBGL_depth_texture');\n            this.getExtension('WEBGL_draw_buffers');\n        }\n        this.getExtension('WEBGL_compressed_texture_astc');\n        this.getExtension('EXT_texture_compression_bptc');\n        this.getExtension('WEBGL_compressed_texture_s3tc');\n        this.getExtension('WEBGL_compressed_texture_etc1');\n        this.getExtension('WEBGL_compressed_texture_pvrtc');\n        this.getExtension('WEBKIT_WEBGL_compressed_texture_pvrtc');\n\n        // Create method aliases using extension (WebGL1) or native if available (WebGL2)\n        this.vertexAttribDivisor = this.getExtension('ANGLE_instanced_arrays', 'vertexAttribDivisor', 'vertexAttribDivisorANGLE');\n        this.drawArraysInstanced = this.getExtension('ANGLE_instanced_arrays', 'drawArraysInstanced', 'drawArraysInstancedANGLE');\n        this.drawElementsInstanced = this.getExtension('ANGLE_instanced_arrays', 'drawElementsInstanced', 'drawElementsInstancedANGLE');\n        this.createVertexArray = this.getExtension('OES_vertex_array_object', 'createVertexArray', 'createVertexArrayOES');\n        this.bindVertexArray = this.getExtension('OES_vertex_array_object', 'bindVertexArray', 'bindVertexArrayOES');\n        this.deleteVertexArray = this.getExtension('OES_vertex_array_object', 'deleteVertexArray', 'deleteVertexArrayOES');\n        this.drawBuffers = this.getExtension('WEBGL_draw_buffers', 'drawBuffers', 'drawBuffersWEBGL');\n\n        // Store device parameters\n        this.parameters = {};\n        this.parameters.maxTextureUnits = this.gl.getParameter(this.gl.MAX_COMBINED_TEXTURE_IMAGE_UNITS);\n        this.parameters.maxAnisotropy = this.getExtension('EXT_texture_filter_anisotropic')\n            ? this.gl.getParameter(this.getExtension('EXT_texture_filter_anisotropic').MAX_TEXTURE_MAX_ANISOTROPY_EXT)\n            : 0;\n    }\n\n    setSize(width, height) {\n        this.width = width;\n        this.height = height;\n\n        this.gl.canvas.width = width * this.dpr;\n        this.gl.canvas.height = height * this.dpr;\n\n        if (!this.gl.canvas.style) return;\n        Object.assign(this.gl.canvas.style, {\n            width: width + 'px',\n            height: height + 'px',\n        });\n    }\n\n    setViewport(width, height, x = 0, y = 0) {\n        if (this.state.viewport.width === width && this.state.viewport.height === height) return;\n        this.state.viewport.width = width;\n        this.state.viewport.height = height;\n        this.state.viewport.x = x;\n        this.state.viewport.y = y;\n        this.gl.viewport(x, y, width, height);\n    }\n\n    setScissor(width, height, x = 0, y = 0) {\n        this.gl.scissor(x, y, width, height);\n    }\n\n    enable(id) {\n        if (this.state[id] === true) return;\n        this.gl.enable(id);\n        this.state[id] = true;\n    }\n\n    disable(id) {\n        if (this.state[id] === false) return;\n        this.gl.disable(id);\n        this.state[id] = false;\n    }\n\n    setBlendFunc(src, dst, srcAlpha, dstAlpha) {\n        if (\n            this.state.blendFunc.src === src &&\n            this.state.blendFunc.dst === dst &&\n            this.state.blendFunc.srcAlpha === srcAlpha &&\n            this.state.blendFunc.dstAlpha === dstAlpha\n        )\n            return;\n        this.state.blendFunc.src = src;\n        this.state.blendFunc.dst = dst;\n        this.state.blendFunc.srcAlpha = srcAlpha;\n        this.state.blendFunc.dstAlpha = dstAlpha;\n        if (srcAlpha !== undefined) this.gl.blendFuncSeparate(src, dst, srcAlpha, dstAlpha);\n        else this.gl.blendFunc(src, dst);\n    }\n\n    setBlendEquation(modeRGB, modeAlpha) {\n        modeRGB = modeRGB || this.gl.FUNC_ADD;\n        if (this.state.blendEquation.modeRGB === modeRGB && this.state.blendEquation.modeAlpha === modeAlpha) return;\n        this.state.blendEquation.modeRGB = modeRGB;\n        this.state.blendEquation.modeAlpha = modeAlpha;\n        if (modeAlpha !== undefined) this.gl.blendEquationSeparate(modeRGB, modeAlpha);\n        else this.gl.blendEquation(modeRGB);\n    }\n\n    setCullFace(value) {\n        if (this.state.cullFace === value) return;\n        this.state.cullFace = value;\n        this.gl.cullFace(value);\n    }\n\n    setFrontFace(value) {\n        if (this.state.frontFace === value) return;\n        this.state.frontFace = value;\n        this.gl.frontFace(value);\n    }\n\n    setDepthMask(value) {\n        if (this.state.depthMask === value) return;\n        this.state.depthMask = value;\n        this.gl.depthMask(value);\n    }\n\n    setDepthFunc(value) {\n        if (this.state.depthFunc === value) return;\n        this.state.depthFunc = value;\n        this.gl.depthFunc(value);\n    }\n\n    activeTexture(value) {\n        if (this.state.activeTextureUnit === value) return;\n        this.state.activeTextureUnit = value;\n        this.gl.activeTexture(this.gl.TEXTURE0 + value);\n    }\n\n    bindFramebuffer({ target = this.gl.FRAMEBUFFER, buffer = null } = {}) {\n        if (this.state.framebuffer === buffer) return;\n        this.state.framebuffer = buffer;\n        this.gl.bindFramebuffer(target, buffer);\n    }\n\n    getExtension(extension, webgl2Func, extFunc) {\n        // if webgl2 function supported, return func bound to gl context\n        if (webgl2Func && this.gl[webgl2Func]) return this.gl[webgl2Func].bind(this.gl);\n\n        // fetch extension once only\n        if (!this.extensions[extension]) {\n            this.extensions[extension] = this.gl.getExtension(extension);\n        }\n\n        // return extension if no function requested\n        if (!webgl2Func) return this.extensions[extension];\n\n        // Return null if extension not supported\n        if (!this.extensions[extension]) return null;\n\n        // return extension function, bound to extension\n        return this.extensions[extension][extFunc].bind(this.extensions[extension]);\n    }\n\n    sortOpaque(a, b) {\n        if (a.renderOrder !== b.renderOrder) {\n            return a.renderOrder - b.renderOrder;\n        } else if (a.program.id !== b.program.id) {\n            return a.program.id - b.program.id;\n        } else if (a.zDepth !== b.zDepth) {\n            return a.zDepth - b.zDepth;\n        } else {\n            return b.id - a.id;\n        }\n    }\n\n    sortTransparent(a, b) {\n        if (a.renderOrder !== b.renderOrder) {\n            return a.renderOrder - b.renderOrder;\n        }\n        if (a.zDepth !== b.zDepth) {\n            return b.zDepth - a.zDepth;\n        } else {\n            return b.id - a.id;\n        }\n    }\n\n    sortUI(a, b) {\n        if (a.renderOrder !== b.renderOrder) {\n            return a.renderOrder - b.renderOrder;\n        } else if (a.program.id !== b.program.id) {\n            return a.program.id - b.program.id;\n        } else {\n            return b.id - a.id;\n        }\n    }\n\n    getRenderList({ scene, camera, frustumCull, sort }) {\n        let renderList = [];\n\n        if (camera && frustumCull) camera.updateFrustum();\n\n        // Get visible\n        scene.traverse((node) => {\n            if (!node.visible) return true;\n            if (!node.draw) return;\n\n            if (frustumCull && node.frustumCulled && camera) {\n                if (!camera.frustumIntersectsMesh(node)) return;\n            }\n\n            renderList.push(node);\n        });\n\n        if (sort) {\n            const opaque = [];\n            const transparent = []; // depthTest true\n            const ui = []; // depthTest false\n\n            renderList.forEach((node) => {\n                // Split into the 3 render groups\n                if (!node.program.transparent) {\n                    opaque.push(node);\n                } else if (node.program.depthTest) {\n                    transparent.push(node);\n                } else {\n                    ui.push(node);\n                }\n\n                node.zDepth = 0;\n\n                // Only calculate z-depth if renderOrder unset and depthTest is true\n                if (node.renderOrder !== 0 || !node.program.depthTest || !camera) return;\n\n                // update z-depth\n                node.worldMatrix.getTranslation(tempVec3);\n                tempVec3.applyMatrix4(camera.projectionViewMatrix);\n                node.zDepth = tempVec3.z;\n            });\n\n            opaque.sort(this.sortOpaque);\n            transparent.sort(this.sortTransparent);\n            ui.sort(this.sortUI);\n\n            renderList = opaque.concat(transparent, ui);\n        }\n\n        return renderList;\n    }\n\n    render({ scene, camera, target = null, update = true, sort = true, frustumCull = true, clear }) {\n        if (target === null) {\n            // make sure no render target bound so draws to canvas\n            this.bindFramebuffer();\n            this.setViewport(this.width * this.dpr, this.height * this.dpr);\n        } else {\n            // bind supplied render target and update viewport\n            this.bindFramebuffer(target);\n            this.setViewport(target.width, target.height);\n        }\n\n        if (clear || (this.autoClear && clear !== false)) {\n            // Ensure depth buffer writing is enabled so it can be cleared\n            if (this.depth && (!target || target.depth)) {\n                this.enable(this.gl.DEPTH_TEST);\n                this.setDepthMask(true);\n            }\n            this.gl.clear(\n                (this.color ? this.gl.COLOR_BUFFER_BIT : 0) |\n                    (this.depth ? this.gl.DEPTH_BUFFER_BIT : 0) |\n                    (this.stencil ? this.gl.STENCIL_BUFFER_BIT : 0)\n            );\n        }\n\n        // updates all scene graph matrices\n        if (update) scene.updateMatrixWorld();\n\n        // Update camera separately, in case not in scene graph\n        if (camera) camera.updateMatrixWorld();\n\n        // Get render list - entails culling and sorting\n        const renderList = this.getRenderList({ scene, camera, frustumCull, sort });\n\n        renderList.forEach((node) => {\n            node.draw({ camera });\n        });\n    }\n}\n","const EPSILON = 0.000001;\n\n/**\n * Copy the values from one vec4 to another\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the source vector\n * @returns {vec4} out\n */\nexport function copy(out, a) {\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    return out;\n}\n\n/**\n * Set the components of a vec4 to the given values\n *\n * @param {vec4} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {vec4} out\n */\nexport function set(out, x, y, z, w) {\n    out[0] = x;\n    out[1] = y;\n    out[2] = z;\n    out[3] = w;\n    return out;\n}\n\n/**\n * Adds two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {vec4} out\n */\nexport function add(out, a, b) {\n    out[0] = a[0] + b[0];\n    out[1] = a[1] + b[1];\n    out[2] = a[2] + b[2];\n    out[3] = a[3] + b[3];\n    return out;\n}\n\n/**\n * Scales a vec4 by a scalar number\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec4} out\n */\nexport function scale(out, a, b) {\n    out[0] = a[0] * b;\n    out[1] = a[1] * b;\n    out[2] = a[2] * b;\n    out[3] = a[3] * b;\n    return out;\n}\n\n/**\n * Calculates the length of a vec4\n *\n * @param {vec4} a vector to calculate length of\n * @returns {Number} length of a\n */\nexport function length(a) {\n    let x = a[0];\n    let y = a[1];\n    let z = a[2];\n    let w = a[3];\n    return Math.sqrt(x * x + y * y + z * z + w * w);\n}\n\n/**\n * Normalize a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a vector to normalize\n * @returns {vec4} out\n */\nexport function normalize(out, a) {\n    let x = a[0];\n    let y = a[1];\n    let z = a[2];\n    let w = a[3];\n    let len = x * x + y * y + z * z + w * w;\n    if (len > 0) {\n        len = 1 / Math.sqrt(len);\n    }\n    out[0] = x * len;\n    out[1] = y * len;\n    out[2] = z * len;\n    out[3] = w * len;\n    return out;\n}\n\n/**\n * Calculates the dot product of two vec4's\n *\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {Number} dot product of a and b\n */\nexport function dot(a, b) {\n    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];\n}\n\n/**\n * Performs a linear interpolation between two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @param {Number} t interpolation amount between the two inputs\n * @returns {vec4} out\n */\nexport function lerp(out, a, b, t) {\n    let ax = a[0];\n    let ay = a[1];\n    let az = a[2];\n    let aw = a[3];\n    out[0] = ax + t * (b[0] - ax);\n    out[1] = ay + t * (b[1] - ay);\n    out[2] = az + t * (b[2] - az);\n    out[3] = aw + t * (b[3] - aw);\n    return out;\n}\n","import * as vec4 from './Vec4Func.js';\n\n/**\n * Set a quat to the identity quaternion\n *\n * @param {quat} out the receiving quaternion\n * @returns {quat} out\n */\nexport function identity(out) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 1;\n    return out;\n}\n\n/**\n * Sets a quat from the given angle and rotation axis,\n * then returns it.\n *\n * @param {quat} out the receiving quaternion\n * @param {vec3} axis the axis around which to rotate\n * @param {Number} rad the angle in radians\n * @returns {quat} out\n **/\nexport function setAxisAngle(out, axis, rad) {\n    rad = rad * 0.5;\n    let s = Math.sin(rad);\n    out[0] = s * axis[0];\n    out[1] = s * axis[1];\n    out[2] = s * axis[2];\n    out[3] = Math.cos(rad);\n    return out;\n}\n\n/**\n * Multiplies two quats\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @returns {quat} out\n */\nexport function multiply(out, a, b) {\n    let ax = a[0],\n        ay = a[1],\n        az = a[2],\n        aw = a[3];\n    let bx = b[0],\n        by = b[1],\n        bz = b[2],\n        bw = b[3];\n\n    out[0] = ax * bw + aw * bx + ay * bz - az * by;\n    out[1] = ay * bw + aw * by + az * bx - ax * bz;\n    out[2] = az * bw + aw * bz + ax * by - ay * bx;\n    out[3] = aw * bw - ax * bx - ay * by - az * bz;\n    return out;\n}\n\n/**\n * Rotates a quaternion by the given angle about the X axis\n *\n * @param {quat} out quat receiving operation result\n * @param {quat} a quat to rotate\n * @param {number} rad angle (in radians) to rotate\n * @returns {quat} out\n */\nexport function rotateX(out, a, rad) {\n    rad *= 0.5;\n\n    let ax = a[0],\n        ay = a[1],\n        az = a[2],\n        aw = a[3];\n    let bx = Math.sin(rad),\n        bw = Math.cos(rad);\n\n    out[0] = ax * bw + aw * bx;\n    out[1] = ay * bw + az * bx;\n    out[2] = az * bw - ay * bx;\n    out[3] = aw * bw - ax * bx;\n    return out;\n}\n\n/**\n * Rotates a quaternion by the given angle about the Y axis\n *\n * @param {quat} out quat receiving operation result\n * @param {quat} a quat to rotate\n * @param {number} rad angle (in radians) to rotate\n * @returns {quat} out\n */\nexport function rotateY(out, a, rad) {\n    rad *= 0.5;\n\n    let ax = a[0],\n        ay = a[1],\n        az = a[2],\n        aw = a[3];\n    let by = Math.sin(rad),\n        bw = Math.cos(rad);\n\n    out[0] = ax * bw - az * by;\n    out[1] = ay * bw + aw * by;\n    out[2] = az * bw + ax * by;\n    out[3] = aw * bw - ay * by;\n    return out;\n}\n\n/**\n * Rotates a quaternion by the given angle about the Z axis\n *\n * @param {quat} out quat receiving operation result\n * @param {quat} a quat to rotate\n * @param {number} rad angle (in radians) to rotate\n * @returns {quat} out\n */\nexport function rotateZ(out, a, rad) {\n    rad *= 0.5;\n\n    let ax = a[0],\n        ay = a[1],\n        az = a[2],\n        aw = a[3];\n    let bz = Math.sin(rad),\n        bw = Math.cos(rad);\n\n    out[0] = ax * bw + ay * bz;\n    out[1] = ay * bw - ax * bz;\n    out[2] = az * bw + aw * bz;\n    out[3] = aw * bw - az * bz;\n    return out;\n}\n\n/**\n * Performs a spherical linear interpolation between two quat\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @param {Number} t interpolation amount between the two inputs\n * @returns {quat} out\n */\nexport function slerp(out, a, b, t) {\n    // benchmarks:\n    //    http://jsperf.com/quaternion-slerp-implementations\n    let ax = a[0],\n        ay = a[1],\n        az = a[2],\n        aw = a[3];\n    let bx = b[0],\n        by = b[1],\n        bz = b[2],\n        bw = b[3];\n\n    let omega, cosom, sinom, scale0, scale1;\n\n    // calc cosine\n    cosom = ax * bx + ay * by + az * bz + aw * bw;\n    // adjust signs (if necessary)\n    if (cosom < 0.0) {\n        cosom = -cosom;\n        bx = -bx;\n        by = -by;\n        bz = -bz;\n        bw = -bw;\n    }\n    // calculate coefficients\n    if (1.0 - cosom > 0.000001) {\n        // standard case (slerp)\n        omega = Math.acos(cosom);\n        sinom = Math.sin(omega);\n        scale0 = Math.sin((1.0 - t) * omega) / sinom;\n        scale1 = Math.sin(t * omega) / sinom;\n    } else {\n        // \"from\" and \"to\" quaternions are very close\n        //  ... so we can do a linear interpolation\n        scale0 = 1.0 - t;\n        scale1 = t;\n    }\n    // calculate final values\n    out[0] = scale0 * ax + scale1 * bx;\n    out[1] = scale0 * ay + scale1 * by;\n    out[2] = scale0 * az + scale1 * bz;\n    out[3] = scale0 * aw + scale1 * bw;\n\n    return out;\n}\n\n/**\n * Calculates the inverse of a quat\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a quat to calculate inverse of\n * @returns {quat} out\n */\nexport function invert(out, a) {\n    let a0 = a[0],\n        a1 = a[1],\n        a2 = a[2],\n        a3 = a[3];\n    let dot = a0 * a0 + a1 * a1 + a2 * a2 + a3 * a3;\n    let invDot = dot ? 1.0 / dot : 0;\n\n    // TODO: Would be faster to return [0,0,0,0] immediately if dot == 0\n\n    out[0] = -a0 * invDot;\n    out[1] = -a1 * invDot;\n    out[2] = -a2 * invDot;\n    out[3] = a3 * invDot;\n    return out;\n}\n\n/**\n * Calculates the conjugate of a quat\n * If the quaternion is normalized, this function is faster than quat.inverse and produces the same result.\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a quat to calculate conjugate of\n * @returns {quat} out\n */\nexport function conjugate(out, a) {\n    out[0] = -a[0];\n    out[1] = -a[1];\n    out[2] = -a[2];\n    out[3] = a[3];\n    return out;\n}\n\n/**\n * Creates a quaternion from the given 3x3 rotation matrix.\n *\n * NOTE: The resultant quaternion is not normalized, so you should be sure\n * to renormalize the quaternion yourself where necessary.\n *\n * @param {quat} out the receiving quaternion\n * @param {mat3} m rotation matrix\n * @returns {quat} out\n * @function\n */\nexport function fromMat3(out, m) {\n    // Algorithm in Ken Shoemake's article in 1987 SIGGRAPH course notes\n    // article \"Quaternion Calculus and Fast Animation\".\n    let fTrace = m[0] + m[4] + m[8];\n    let fRoot;\n\n    if (fTrace > 0.0) {\n        // |w| > 1/2, may as well choose w > 1/2\n        fRoot = Math.sqrt(fTrace + 1.0); // 2w\n        out[3] = 0.5 * fRoot;\n        fRoot = 0.5 / fRoot; // 1/(4w)\n        out[0] = (m[5] - m[7]) * fRoot;\n        out[1] = (m[6] - m[2]) * fRoot;\n        out[2] = (m[1] - m[3]) * fRoot;\n    } else {\n        // |w| <= 1/2\n        let i = 0;\n        if (m[4] > m[0]) i = 1;\n        if (m[8] > m[i * 3 + i]) i = 2;\n        let j = (i + 1) % 3;\n        let k = (i + 2) % 3;\n\n        fRoot = Math.sqrt(m[i * 3 + i] - m[j * 3 + j] - m[k * 3 + k] + 1.0);\n        out[i] = 0.5 * fRoot;\n        fRoot = 0.5 / fRoot;\n        out[3] = (m[j * 3 + k] - m[k * 3 + j]) * fRoot;\n        out[j] = (m[j * 3 + i] + m[i * 3 + j]) * fRoot;\n        out[k] = (m[k * 3 + i] + m[i * 3 + k]) * fRoot;\n    }\n\n    return out;\n}\n\n/**\n * Creates a quaternion from the given euler angle x, y, z.\n *\n * @param {quat} out the receiving quaternion\n * @param {vec3} euler Angles to rotate around each axis in degrees.\n * @param {String} order detailing order of operations. Default 'XYZ'.\n * @returns {quat} out\n * @function\n */\nexport function fromEuler(out, euler, order = 'YXZ') {\n    let sx = Math.sin(euler[0] * 0.5);\n    let cx = Math.cos(euler[0] * 0.5);\n    let sy = Math.sin(euler[1] * 0.5);\n    let cy = Math.cos(euler[1] * 0.5);\n    let sz = Math.sin(euler[2] * 0.5);\n    let cz = Math.cos(euler[2] * 0.5);\n\n    if (order === 'XYZ') {\n        out[0] = sx * cy * cz + cx * sy * sz;\n        out[1] = cx * sy * cz - sx * cy * sz;\n        out[2] = cx * cy * sz + sx * sy * cz;\n        out[3] = cx * cy * cz - sx * sy * sz;\n    } else if (order === 'YXZ') {\n        out[0] = sx * cy * cz + cx * sy * sz;\n        out[1] = cx * sy * cz - sx * cy * sz;\n        out[2] = cx * cy * sz - sx * sy * cz;\n        out[3] = cx * cy * cz + sx * sy * sz;\n    } else if (order === 'ZXY') {\n        out[0] = sx * cy * cz - cx * sy * sz;\n        out[1] = cx * sy * cz + sx * cy * sz;\n        out[2] = cx * cy * sz + sx * sy * cz;\n        out[3] = cx * cy * cz - sx * sy * sz;\n    } else if (order === 'ZYX') {\n        out[0] = sx * cy * cz - cx * sy * sz;\n        out[1] = cx * sy * cz + sx * cy * sz;\n        out[2] = cx * cy * sz - sx * sy * cz;\n        out[3] = cx * cy * cz + sx * sy * sz;\n    } else if (order === 'YZX') {\n        out[0] = sx * cy * cz + cx * sy * sz;\n        out[1] = cx * sy * cz + sx * cy * sz;\n        out[2] = cx * cy * sz - sx * sy * cz;\n        out[3] = cx * cy * cz - sx * sy * sz;\n    } else if (order === 'XZY') {\n        out[0] = sx * cy * cz - cx * sy * sz;\n        out[1] = cx * sy * cz - sx * cy * sz;\n        out[2] = cx * cy * sz + sx * sy * cz;\n        out[3] = cx * cy * cz + sx * sy * sz;\n    }\n\n    return out;\n}\n\n/**\n * Copy the values from one quat to another\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the source quaternion\n * @returns {quat} out\n * @function\n */\nexport const copy = vec4.copy;\n\n/**\n * Set the components of a quat to the given values\n *\n * @param {quat} out the receiving quaternion\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {quat} out\n * @function\n */\nexport const set = vec4.set;\n\n/**\n * Adds two quat's\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @returns {quat} out\n * @function\n */\nexport const add = vec4.add;\n\n/**\n * Scales a quat by a scalar number\n *\n * @param {quat} out the receiving vector\n * @param {quat} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {quat} out\n * @function\n */\nexport const scale = vec4.scale;\n\n/**\n * Calculates the dot product of two quat's\n *\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @returns {Number} dot product of a and b\n * @function\n */\nexport const dot = vec4.dot;\n\n/**\n * Performs a linear interpolation between two quat's\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @param {Number} t interpolation amount between the two inputs\n * @returns {quat} out\n * @function\n */\nexport const lerp = vec4.lerp;\n\n/**\n * Calculates the length of a quat\n *\n * @param {quat} a vector to calculate length of\n * @returns {Number} length of a\n */\nexport const length = vec4.length;\n\n/**\n * Normalize a quat\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a quaternion to normalize\n * @returns {quat} out\n * @function\n */\nexport const normalize = vec4.normalize;\n","import * as QuatFunc from './functions/QuatFunc.js';\n\nexport class Quat extends Array {\n    constructor(x = 0, y = 0, z = 0, w = 1) {\n        super(x, y, z, w);\n        this.onChange = () => {};\n\n        // Keep reference to proxy target to avoid triggering onChange internally\n        this._target = this;\n\n        // Return a proxy to trigger onChange when array elements are edited directly\n        const triggerProps = ['0', '1', '2', '3'];\n        return new Proxy(this, {\n            set(target, property) {\n                const success = Reflect.set(...arguments);\n                if (success && triggerProps.includes(property)) target.onChange();\n                return success;\n            },\n        });\n    }\n\n    get x() {\n        return this[0];\n    }\n\n    get y() {\n        return this[1];\n    }\n\n    get z() {\n        return this[2];\n    }\n\n    get w() {\n        return this[3];\n    }\n\n    set x(v) {\n        this._target[0] = v;\n        this.onChange();\n    }\n\n    set y(v) {\n        this._target[1] = v;\n        this.onChange();\n    }\n\n    set z(v) {\n        this._target[2] = v;\n        this.onChange();\n    }\n\n    set w(v) {\n        this._target[3] = v;\n        this.onChange();\n    }\n\n    identity() {\n        QuatFunc.identity(this._target);\n        this.onChange();\n        return this;\n    }\n\n    set(x, y, z, w) {\n        if (x.length) return this.copy(x);\n        QuatFunc.set(this._target, x, y, z, w);\n        this.onChange();\n        return this;\n    }\n\n    rotateX(a) {\n        QuatFunc.rotateX(this._target, this._target, a);\n        this.onChange();\n        return this;\n    }\n\n    rotateY(a) {\n        QuatFunc.rotateY(this._target, this._target, a);\n        this.onChange();\n        return this;\n    }\n\n    rotateZ(a) {\n        QuatFunc.rotateZ(this._target, this._target, a);\n        this.onChange();\n        return this;\n    }\n\n    inverse(q = this._target) {\n        QuatFunc.invert(this._target, q);\n        this.onChange();\n        return this;\n    }\n\n    conjugate(q = this._target) {\n        QuatFunc.conjugate(this._target, q);\n        this.onChange();\n        return this;\n    }\n\n    copy(q) {\n        QuatFunc.copy(this._target, q);\n        this.onChange();\n        return this;\n    }\n\n    normalize(q = this._target) {\n        QuatFunc.normalize(this._target, q);\n        this.onChange();\n        return this;\n    }\n\n    multiply(qA, qB) {\n        if (qB) {\n            QuatFunc.multiply(this._target, qA, qB);\n        } else {\n            QuatFunc.multiply(this._target, this._target, qA);\n        }\n        this.onChange();\n        return this;\n    }\n\n    dot(v) {\n        return QuatFunc.dot(this._target, v);\n    }\n\n    fromMatrix3(matrix3) {\n        QuatFunc.fromMat3(this._target, matrix3);\n        this.onChange();\n        return this;\n    }\n\n    fromEuler(euler, isInternal) {\n        QuatFunc.fromEuler(this._target, euler, euler.order);\n        // Avoid infinite recursion\n        if (!isInternal) this.onChange();\n        return this;\n    }\n\n    fromAxisAngle(axis, a) {\n        QuatFunc.setAxisAngle(this._target, axis, a);\n        this.onChange();\n        return this;\n    }\n\n    slerp(q, t) {\n        QuatFunc.slerp(this._target, this._target, q, t);\n        this.onChange();\n        return this;\n    }\n\n    fromArray(a, o = 0) {\n        this._target[0] = a[o];\n        this._target[1] = a[o + 1];\n        this._target[2] = a[o + 2];\n        this._target[3] = a[o + 3];\n        this.onChange();\n        return this;\n    }\n\n    toArray(a = [], o = 0) {\n        a[o] = this[0];\n        a[o + 1] = this[1];\n        a[o + 2] = this[2];\n        a[o + 3] = this[3];\n        return a;\n    }\n}\n","import * as vec3 from './Vec3Func.js';\n\nconst EPSILON = 0.000001;\n\n/**\n * Copy the values from one mat4 to another\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the source matrix\n * @returns {mat4} out\n */\nexport function copy(out, a) {\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    out[4] = a[4];\n    out[5] = a[5];\n    out[6] = a[6];\n    out[7] = a[7];\n    out[8] = a[8];\n    out[9] = a[9];\n    out[10] = a[10];\n    out[11] = a[11];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n    return out;\n}\n\n/**\n * Set the components of a mat4 to the given values\n *\n * @param {mat4} out the receiving matrix\n * @returns {mat4} out\n */\nexport function set(out, m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n    out[0] = m00;\n    out[1] = m01;\n    out[2] = m02;\n    out[3] = m03;\n    out[4] = m10;\n    out[5] = m11;\n    out[6] = m12;\n    out[7] = m13;\n    out[8] = m20;\n    out[9] = m21;\n    out[10] = m22;\n    out[11] = m23;\n    out[12] = m30;\n    out[13] = m31;\n    out[14] = m32;\n    out[15] = m33;\n    return out;\n}\n\n/**\n * Set a mat4 to the identity matrix\n *\n * @param {mat4} out the receiving matrix\n * @returns {mat4} out\n */\nexport function identity(out) {\n    out[0] = 1;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[5] = 1;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[10] = 1;\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n    out[15] = 1;\n    return out;\n}\n\n/**\n * Transpose the values of a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the source matrix\n * @returns {mat4} out\n */\nexport function transpose(out, a) {\n    // If we are transposing ourselves we can skip a few steps but have to cache some values\n    if (out === a) {\n        let a01 = a[1],\n            a02 = a[2],\n            a03 = a[3];\n        let a12 = a[6],\n            a13 = a[7];\n        let a23 = a[11];\n\n        out[1] = a[4];\n        out[2] = a[8];\n        out[3] = a[12];\n        out[4] = a01;\n        out[6] = a[9];\n        out[7] = a[13];\n        out[8] = a02;\n        out[9] = a12;\n        out[11] = a[14];\n        out[12] = a03;\n        out[13] = a13;\n        out[14] = a23;\n    } else {\n        out[0] = a[0];\n        out[1] = a[4];\n        out[2] = a[8];\n        out[3] = a[12];\n        out[4] = a[1];\n        out[5] = a[5];\n        out[6] = a[9];\n        out[7] = a[13];\n        out[8] = a[2];\n        out[9] = a[6];\n        out[10] = a[10];\n        out[11] = a[14];\n        out[12] = a[3];\n        out[13] = a[7];\n        out[14] = a[11];\n        out[15] = a[15];\n    }\n\n    return out;\n}\n\n/**\n * Inverts a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the source matrix\n * @returns {mat4} out\n */\nexport function invert(out, a) {\n    let a00 = a[0],\n        a01 = a[1],\n        a02 = a[2],\n        a03 = a[3];\n    let a10 = a[4],\n        a11 = a[5],\n        a12 = a[6],\n        a13 = a[7];\n    let a20 = a[8],\n        a21 = a[9],\n        a22 = a[10],\n        a23 = a[11];\n    let a30 = a[12],\n        a31 = a[13],\n        a32 = a[14],\n        a33 = a[15];\n\n    let b00 = a00 * a11 - a01 * a10;\n    let b01 = a00 * a12 - a02 * a10;\n    let b02 = a00 * a13 - a03 * a10;\n    let b03 = a01 * a12 - a02 * a11;\n    let b04 = a01 * a13 - a03 * a11;\n    let b05 = a02 * a13 - a03 * a12;\n    let b06 = a20 * a31 - a21 * a30;\n    let b07 = a20 * a32 - a22 * a30;\n    let b08 = a20 * a33 - a23 * a30;\n    let b09 = a21 * a32 - a22 * a31;\n    let b10 = a21 * a33 - a23 * a31;\n    let b11 = a22 * a33 - a23 * a32;\n\n    // Calculate the determinant\n    let det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n    if (!det) {\n        return null;\n    }\n    det = 1.0 / det;\n\n    out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n    out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n    out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n    out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;\n    out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n    out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n    out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n    out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;\n    out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n    out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n    out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n    out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;\n    out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;\n    out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;\n    out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;\n    out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;\n\n    return out;\n}\n\n/**\n * Calculates the determinant of a mat4\n *\n * @param {mat4} a the source matrix\n * @returns {Number} determinant of a\n */\nexport function determinant(a) {\n    let a00 = a[0],\n        a01 = a[1],\n        a02 = a[2],\n        a03 = a[3];\n    let a10 = a[4],\n        a11 = a[5],\n        a12 = a[6],\n        a13 = a[7];\n    let a20 = a[8],\n        a21 = a[9],\n        a22 = a[10],\n        a23 = a[11];\n    let a30 = a[12],\n        a31 = a[13],\n        a32 = a[14],\n        a33 = a[15];\n\n    let b00 = a00 * a11 - a01 * a10;\n    let b01 = a00 * a12 - a02 * a10;\n    let b02 = a00 * a13 - a03 * a10;\n    let b03 = a01 * a12 - a02 * a11;\n    let b04 = a01 * a13 - a03 * a11;\n    let b05 = a02 * a13 - a03 * a12;\n    let b06 = a20 * a31 - a21 * a30;\n    let b07 = a20 * a32 - a22 * a30;\n    let b08 = a20 * a33 - a23 * a30;\n    let b09 = a21 * a32 - a22 * a31;\n    let b10 = a21 * a33 - a23 * a31;\n    let b11 = a22 * a33 - a23 * a32;\n\n    // Calculate the determinant\n    return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n}\n\n/**\n * Multiplies two mat4s\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the first operand\n * @param {mat4} b the second operand\n * @returns {mat4} out\n */\nexport function multiply(out, a, b) {\n    let a00 = a[0],\n        a01 = a[1],\n        a02 = a[2],\n        a03 = a[3];\n    let a10 = a[4],\n        a11 = a[5],\n        a12 = a[6],\n        a13 = a[7];\n    let a20 = a[8],\n        a21 = a[9],\n        a22 = a[10],\n        a23 = a[11];\n    let a30 = a[12],\n        a31 = a[13],\n        a32 = a[14],\n        a33 = a[15];\n\n    // Cache only the current line of the second matrix\n    let b0 = b[0],\n        b1 = b[1],\n        b2 = b[2],\n        b3 = b[3];\n    out[0] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n    out[1] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n    out[2] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n    out[3] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n\n    b0 = b[4];\n    b1 = b[5];\n    b2 = b[6];\n    b3 = b[7];\n    out[4] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n    out[5] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n    out[6] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n    out[7] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n\n    b0 = b[8];\n    b1 = b[9];\n    b2 = b[10];\n    b3 = b[11];\n    out[8] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n    out[9] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n    out[10] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n    out[11] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n\n    b0 = b[12];\n    b1 = b[13];\n    b2 = b[14];\n    b3 = b[15];\n    out[12] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n    out[13] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n    out[14] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n    out[15] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n    return out;\n}\n\n/**\n * Translate a mat4 by the given vector\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to translate\n * @param {vec3} v vector to translate by\n * @returns {mat4} out\n */\nexport function translate(out, a, v) {\n    let x = v[0],\n        y = v[1],\n        z = v[2];\n    let a00, a01, a02, a03;\n    let a10, a11, a12, a13;\n    let a20, a21, a22, a23;\n\n    if (a === out) {\n        out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];\n        out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];\n        out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];\n        out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];\n    } else {\n        a00 = a[0];\n        a01 = a[1];\n        a02 = a[2];\n        a03 = a[3];\n        a10 = a[4];\n        a11 = a[5];\n        a12 = a[6];\n        a13 = a[7];\n        a20 = a[8];\n        a21 = a[9];\n        a22 = a[10];\n        a23 = a[11];\n\n        out[0] = a00;\n        out[1] = a01;\n        out[2] = a02;\n        out[3] = a03;\n        out[4] = a10;\n        out[5] = a11;\n        out[6] = a12;\n        out[7] = a13;\n        out[8] = a20;\n        out[9] = a21;\n        out[10] = a22;\n        out[11] = a23;\n\n        out[12] = a00 * x + a10 * y + a20 * z + a[12];\n        out[13] = a01 * x + a11 * y + a21 * z + a[13];\n        out[14] = a02 * x + a12 * y + a22 * z + a[14];\n        out[15] = a03 * x + a13 * y + a23 * z + a[15];\n    }\n\n    return out;\n}\n\n/**\n * Scales the mat4 by the dimensions in the given vec3 not using vectorization\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to scale\n * @param {vec3} v the vec3 to scale the matrix by\n * @returns {mat4} out\n **/\nexport function scale(out, a, v) {\n    let x = v[0],\n        y = v[1],\n        z = v[2];\n\n    out[0] = a[0] * x;\n    out[1] = a[1] * x;\n    out[2] = a[2] * x;\n    out[3] = a[3] * x;\n    out[4] = a[4] * y;\n    out[5] = a[5] * y;\n    out[6] = a[6] * y;\n    out[7] = a[7] * y;\n    out[8] = a[8] * z;\n    out[9] = a[9] * z;\n    out[10] = a[10] * z;\n    out[11] = a[11] * z;\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n    return out;\n}\n\n/**\n * Rotates a mat4 by the given angle around the given axis\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @param {vec3} axis the axis to rotate around\n * @returns {mat4} out\n */\nexport function rotate(out, a, rad, axis) {\n    let x = axis[0],\n        y = axis[1],\n        z = axis[2];\n    let len = Math.hypot(x, y, z);\n    let s, c, t;\n    let a00, a01, a02, a03;\n    let a10, a11, a12, a13;\n    let a20, a21, a22, a23;\n    let b00, b01, b02;\n    let b10, b11, b12;\n    let b20, b21, b22;\n\n    if (Math.abs(len) < EPSILON) {\n        return null;\n    }\n\n    len = 1 / len;\n    x *= len;\n    y *= len;\n    z *= len;\n\n    s = Math.sin(rad);\n    c = Math.cos(rad);\n    t = 1 - c;\n\n    a00 = a[0];\n    a01 = a[1];\n    a02 = a[2];\n    a03 = a[3];\n    a10 = a[4];\n    a11 = a[5];\n    a12 = a[6];\n    a13 = a[7];\n    a20 = a[8];\n    a21 = a[9];\n    a22 = a[10];\n    a23 = a[11];\n\n    // Construct the elements of the rotation matrix\n    b00 = x * x * t + c;\n    b01 = y * x * t + z * s;\n    b02 = z * x * t - y * s;\n    b10 = x * y * t - z * s;\n    b11 = y * y * t + c;\n    b12 = z * y * t + x * s;\n    b20 = x * z * t + y * s;\n    b21 = y * z * t - x * s;\n    b22 = z * z * t + c;\n\n    // Perform rotation-specific matrix multiplication\n    out[0] = a00 * b00 + a10 * b01 + a20 * b02;\n    out[1] = a01 * b00 + a11 * b01 + a21 * b02;\n    out[2] = a02 * b00 + a12 * b01 + a22 * b02;\n    out[3] = a03 * b00 + a13 * b01 + a23 * b02;\n    out[4] = a00 * b10 + a10 * b11 + a20 * b12;\n    out[5] = a01 * b10 + a11 * b11 + a21 * b12;\n    out[6] = a02 * b10 + a12 * b11 + a22 * b12;\n    out[7] = a03 * b10 + a13 * b11 + a23 * b12;\n    out[8] = a00 * b20 + a10 * b21 + a20 * b22;\n    out[9] = a01 * b20 + a11 * b21 + a21 * b22;\n    out[10] = a02 * b20 + a12 * b21 + a22 * b22;\n    out[11] = a03 * b20 + a13 * b21 + a23 * b22;\n\n    if (a !== out) {\n        // If the source and destination differ, copy the unchanged last row\n        out[12] = a[12];\n        out[13] = a[13];\n        out[14] = a[14];\n        out[15] = a[15];\n    }\n    return out;\n}\n\n/**\n * Returns the translation vector component of a transformation\n *  matrix. If a matrix is built with fromRotationTranslation,\n *  the returned vector will be the same as the translation vector\n *  originally supplied.\n * @param  {vec3} out Vector to receive translation component\n * @param  {mat4} mat Matrix to be decomposed (input)\n * @return {vec3} out\n */\nexport function getTranslation(out, mat) {\n    out[0] = mat[12];\n    out[1] = mat[13];\n    out[2] = mat[14];\n\n    return out;\n}\n\n/**\n * Returns the scaling factor component of a transformation\n *  matrix. If a matrix is built with fromRotationTranslationScale\n *  with a normalized Quaternion paramter, the returned vector will be\n *  the same as the scaling vector\n *  originally supplied.\n * @param  {vec3} out Vector to receive scaling factor component\n * @param  {mat4} mat Matrix to be decomposed (input)\n * @return {vec3} out\n */\nexport function getScaling(out, mat) {\n    let m11 = mat[0];\n    let m12 = mat[1];\n    let m13 = mat[2];\n    let m21 = mat[4];\n    let m22 = mat[5];\n    let m23 = mat[6];\n    let m31 = mat[8];\n    let m32 = mat[9];\n    let m33 = mat[10];\n\n    out[0] = Math.hypot(m11, m12, m13);\n    out[1] = Math.hypot(m21, m22, m23);\n    out[2] = Math.hypot(m31, m32, m33);\n\n    return out;\n}\n\nexport function getMaxScaleOnAxis(mat) {\n    let m11 = mat[0];\n    let m12 = mat[1];\n    let m13 = mat[2];\n    let m21 = mat[4];\n    let m22 = mat[5];\n    let m23 = mat[6];\n    let m31 = mat[8];\n    let m32 = mat[9];\n    let m33 = mat[10];\n\n    const x = m11 * m11 + m12 * m12 + m13 * m13;\n    const y = m21 * m21 + m22 * m22 + m23 * m23;\n    const z = m31 * m31 + m32 * m32 + m33 * m33;\n\n    return Math.sqrt(Math.max(x, y, z));\n}\n\n/**\n * Returns a quaternion representing the rotational component\n *  of a transformation matrix. If a matrix is built with\n *  fromRotationTranslation, the returned quaternion will be the\n *  same as the quaternion originally supplied.\n * @param {quat} out Quaternion to receive the rotation component\n * @param {mat4} mat Matrix to be decomposed (input)\n * @return {quat} out\n */\nexport const getRotation = (function () {\n    const temp = [1, 1, 1];\n\n    return function (out, mat) {\n        let scaling = temp;\n        getScaling(scaling, mat);\n\n        let is1 = 1 / scaling[0];\n        let is2 = 1 / scaling[1];\n        let is3 = 1 / scaling[2];\n\n        let sm11 = mat[0] * is1;\n        let sm12 = mat[1] * is2;\n        let sm13 = mat[2] * is3;\n        let sm21 = mat[4] * is1;\n        let sm22 = mat[5] * is2;\n        let sm23 = mat[6] * is3;\n        let sm31 = mat[8] * is1;\n        let sm32 = mat[9] * is2;\n        let sm33 = mat[10] * is3;\n\n        let trace = sm11 + sm22 + sm33;\n        let S = 0;\n\n        if (trace > 0) {\n            S = Math.sqrt(trace + 1.0) * 2;\n            out[3] = 0.25 * S;\n            out[0] = (sm23 - sm32) / S;\n            out[1] = (sm31 - sm13) / S;\n            out[2] = (sm12 - sm21) / S;\n        } else if (sm11 > sm22 && sm11 > sm33) {\n            S = Math.sqrt(1.0 + sm11 - sm22 - sm33) * 2;\n            out[3] = (sm23 - sm32) / S;\n            out[0] = 0.25 * S;\n            out[1] = (sm12 + sm21) / S;\n            out[2] = (sm31 + sm13) / S;\n        } else if (sm22 > sm33) {\n            S = Math.sqrt(1.0 + sm22 - sm11 - sm33) * 2;\n            out[3] = (sm31 - sm13) / S;\n            out[0] = (sm12 + sm21) / S;\n            out[1] = 0.25 * S;\n            out[2] = (sm23 + sm32) / S;\n        } else {\n            S = Math.sqrt(1.0 + sm33 - sm11 - sm22) * 2;\n            out[3] = (sm12 - sm21) / S;\n            out[0] = (sm31 + sm13) / S;\n            out[1] = (sm23 + sm32) / S;\n            out[2] = 0.25 * S;\n        }\n\n        return out;\n    };\n})();\n\n/**\n * From glTF-Transform\n * https://github.com/donmccurdy/glTF-Transform/blob/main/packages/core/src/utils/math-utils.ts\n *\n * Decompose a mat4 to TRS properties.\n *\n * Equivalent to the Matrix4 decompose() method in three.js, and intentionally not using the\n * gl-matrix version. See: https://github.com/toji/gl-matrix/issues/408\n *\n * @param {mat4} srcMat Matrix element, to be decomposed to TRS properties.\n * @param {quat4} dstRotation Rotation element, to be overwritten.\n * @param {vec3} dstTranslation Translation element, to be overwritten.\n * @param {vec3} dstScale Scale element, to be overwritten\n */\nexport function decompose(srcMat, dstRotation, dstTranslation, dstScale) {\n    let sx = vec3.length([srcMat[0], srcMat[1], srcMat[2]]);\n    const sy = vec3.length([srcMat[4], srcMat[5], srcMat[6]]);\n    const sz = vec3.length([srcMat[8], srcMat[9], srcMat[10]]);\n\n    // if determine is negative, we need to invert one scale\n    const det = determinant(srcMat);\n    if (det < 0) sx = -sx;\n\n    dstTranslation[0] = srcMat[12];\n    dstTranslation[1] = srcMat[13];\n    dstTranslation[2] = srcMat[14];\n\n    // scale the rotation part\n    const _m1 = srcMat.slice();\n\n    const invSX = 1 / sx;\n    const invSY = 1 / sy;\n    const invSZ = 1 / sz;\n\n    _m1[0] *= invSX;\n    _m1[1] *= invSX;\n    _m1[2] *= invSX;\n\n    _m1[4] *= invSY;\n    _m1[5] *= invSY;\n    _m1[6] *= invSY;\n\n    _m1[8] *= invSZ;\n    _m1[9] *= invSZ;\n    _m1[10] *= invSZ;\n\n    getRotation(dstRotation, _m1);\n\n    dstScale[0] = sx;\n    dstScale[1] = sy;\n    dstScale[2] = sz;\n}\n\n/**\n * From glTF-Transform\n * https://github.com/donmccurdy/glTF-Transform/blob/main/packages/core/src/utils/math-utils.ts\n *\n * Compose TRS properties to a mat4.\n *\n * Equivalent to the Matrix4 compose() method in three.js, and intentionally not using the\n * gl-matrix version. See: https://github.com/toji/gl-matrix/issues/408\n *\n * @param {mat4} dstMat Matrix element, to be modified and returned.\n * @param {quat4} srcRotation Rotation element of matrix.\n * @param {vec3} srcTranslation Translation element of matrix.\n * @param {vec3} srcScale Scale element of matrix.\n * @returns {mat4} dstMat, overwritten to mat4 equivalent of given TRS properties.\n */\nexport function compose(dstMat, srcRotation, srcTranslation, srcScale) {\n    const te = dstMat;\n\n    const x = srcRotation[0],\n        y = srcRotation[1],\n        z = srcRotation[2],\n        w = srcRotation[3];\n    const x2 = x + x,\n        y2 = y + y,\n        z2 = z + z;\n    const xx = x * x2,\n        xy = x * y2,\n        xz = x * z2;\n    const yy = y * y2,\n        yz = y * z2,\n        zz = z * z2;\n    const wx = w * x2,\n        wy = w * y2,\n        wz = w * z2;\n\n    const sx = srcScale[0],\n        sy = srcScale[1],\n        sz = srcScale[2];\n\n    te[0] = (1 - (yy + zz)) * sx;\n    te[1] = (xy + wz) * sx;\n    te[2] = (xz - wy) * sx;\n    te[3] = 0;\n\n    te[4] = (xy - wz) * sy;\n    te[5] = (1 - (xx + zz)) * sy;\n    te[6] = (yz + wx) * sy;\n    te[7] = 0;\n\n    te[8] = (xz + wy) * sz;\n    te[9] = (yz - wx) * sz;\n    te[10] = (1 - (xx + yy)) * sz;\n    te[11] = 0;\n\n    te[12] = srcTranslation[0];\n    te[13] = srcTranslation[1];\n    te[14] = srcTranslation[2];\n    te[15] = 1;\n\n    return te;\n}\n\n/**\n * Creates a matrix from a quaternion rotation, vector translation and vector scale\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     let quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *     mat4.scale(dest, scale)\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {vec3} v Translation vector\n * @param {vec3} s Scaling vector\n * @returns {mat4} out\n */\nexport function fromRotationTranslationScale(out, q, v, s) {\n    // Quaternion math\n    let x = q[0],\n        y = q[1],\n        z = q[2],\n        w = q[3];\n    let x2 = x + x;\n    let y2 = y + y;\n    let z2 = z + z;\n\n    let xx = x * x2;\n    let xy = x * y2;\n    let xz = x * z2;\n    let yy = y * y2;\n    let yz = y * z2;\n    let zz = z * z2;\n    let wx = w * x2;\n    let wy = w * y2;\n    let wz = w * z2;\n    let sx = s[0];\n    let sy = s[1];\n    let sz = s[2];\n\n    out[0] = (1 - (yy + zz)) * sx;\n    out[1] = (xy + wz) * sx;\n    out[2] = (xz - wy) * sx;\n    out[3] = 0;\n    out[4] = (xy - wz) * sy;\n    out[5] = (1 - (xx + zz)) * sy;\n    out[6] = (yz + wx) * sy;\n    out[7] = 0;\n    out[8] = (xz + wy) * sz;\n    out[9] = (yz - wx) * sz;\n    out[10] = (1 - (xx + yy)) * sz;\n    out[11] = 0;\n    out[12] = v[0];\n    out[13] = v[1];\n    out[14] = v[2];\n    out[15] = 1;\n\n    return out;\n}\n\n/**\n * Calculates a 4x4 matrix from the given quaternion\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat} q Quaternion to create matrix from\n *\n * @returns {mat4} out\n */\nexport function fromQuat(out, q) {\n    let x = q[0],\n        y = q[1],\n        z = q[2],\n        w = q[3];\n    let x2 = x + x;\n    let y2 = y + y;\n    let z2 = z + z;\n\n    let xx = x * x2;\n    let yx = y * x2;\n    let yy = y * y2;\n    let zx = z * x2;\n    let zy = z * y2;\n    let zz = z * z2;\n    let wx = w * x2;\n    let wy = w * y2;\n    let wz = w * z2;\n\n    out[0] = 1 - yy - zz;\n    out[1] = yx + wz;\n    out[2] = zx - wy;\n    out[3] = 0;\n\n    out[4] = yx - wz;\n    out[5] = 1 - xx - zz;\n    out[6] = zy + wx;\n    out[7] = 0;\n\n    out[8] = zx + wy;\n    out[9] = zy - wx;\n    out[10] = 1 - xx - yy;\n    out[11] = 0;\n\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n    out[15] = 1;\n\n    return out;\n}\n\n/**\n * Generates a perspective projection matrix with the given bounds\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} fovy Vertical field of view in radians\n * @param {number} aspect Aspect ratio. typically viewport width/height\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\nexport function perspective(out, fovy, aspect, near, far) {\n    let f = 1.0 / Math.tan(fovy / 2);\n    let nf = 1 / (near - far);\n    out[0] = f / aspect;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[5] = f;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[10] = (far + near) * nf;\n    out[11] = -1;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 2 * far * near * nf;\n    out[15] = 0;\n    return out;\n}\n\n/**\n * Generates a orthogonal projection matrix with the given bounds\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} left Left bound of the frustum\n * @param {number} right Right bound of the frustum\n * @param {number} bottom Bottom bound of the frustum\n * @param {number} top Top bound of the frustum\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\nexport function ortho(out, left, right, bottom, top, near, far) {\n    let lr = 1 / (left - right);\n    let bt = 1 / (bottom - top);\n    let nf = 1 / (near - far);\n    out[0] = -2 * lr;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[5] = -2 * bt;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[10] = 2 * nf;\n    out[11] = 0;\n    out[12] = (left + right) * lr;\n    out[13] = (top + bottom) * bt;\n    out[14] = (far + near) * nf;\n    out[15] = 1;\n    return out;\n}\n\n/**\n * Generates a matrix that makes something look at something else.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {vec3} eye Position of the viewer\n * @param {vec3} target Point the viewer is looking at\n * @param {vec3} up vec3 pointing up\n * @returns {mat4} out\n */\nexport function targetTo(out, eye, target, up) {\n    let eyex = eye[0],\n        eyey = eye[1],\n        eyez = eye[2],\n        upx = up[0],\n        upy = up[1],\n        upz = up[2];\n\n    let z0 = eyex - target[0],\n        z1 = eyey - target[1],\n        z2 = eyez - target[2];\n\n    let len = z0 * z0 + z1 * z1 + z2 * z2;\n    if (len === 0) {\n        // eye and target are in the same position\n        z2 = 1;\n    } else {\n        len = 1 / Math.sqrt(len);\n        z0 *= len;\n        z1 *= len;\n        z2 *= len;\n    }\n\n    let x0 = upy * z2 - upz * z1,\n        x1 = upz * z0 - upx * z2,\n        x2 = upx * z1 - upy * z0;\n\n    len = x0 * x0 + x1 * x1 + x2 * x2;\n    if (len === 0) {\n        // up and z are parallel\n        if (upz) {\n            upx += 1e-6;\n        } else if (upy) {\n            upz += 1e-6;\n        } else {\n            upy += 1e-6;\n        }\n        (x0 = upy * z2 - upz * z1), (x1 = upz * z0 - upx * z2), (x2 = upx * z1 - upy * z0);\n\n        len = x0 * x0 + x1 * x1 + x2 * x2;\n    }\n\n    len = 1 / Math.sqrt(len);\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n\n    out[0] = x0;\n    out[1] = x1;\n    out[2] = x2;\n    out[3] = 0;\n    out[4] = z1 * x2 - z2 * x1;\n    out[5] = z2 * x0 - z0 * x2;\n    out[6] = z0 * x1 - z1 * x0;\n    out[7] = 0;\n    out[8] = z0;\n    out[9] = z1;\n    out[10] = z2;\n    out[11] = 0;\n    out[12] = eyex;\n    out[13] = eyey;\n    out[14] = eyez;\n    out[15] = 1;\n    return out;\n}\n\n/**\n * Adds two mat4's\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the first operand\n * @param {mat4} b the second operand\n * @returns {mat4} out\n */\nexport function add(out, a, b) {\n    out[0] = a[0] + b[0];\n    out[1] = a[1] + b[1];\n    out[2] = a[2] + b[2];\n    out[3] = a[3] + b[3];\n    out[4] = a[4] + b[4];\n    out[5] = a[5] + b[5];\n    out[6] = a[6] + b[6];\n    out[7] = a[7] + b[7];\n    out[8] = a[8] + b[8];\n    out[9] = a[9] + b[9];\n    out[10] = a[10] + b[10];\n    out[11] = a[11] + b[11];\n    out[12] = a[12] + b[12];\n    out[13] = a[13] + b[13];\n    out[14] = a[14] + b[14];\n    out[15] = a[15] + b[15];\n    return out;\n}\n\n/**\n * Subtracts matrix b from matrix a\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the first operand\n * @param {mat4} b the second operand\n * @returns {mat4} out\n */\nexport function subtract(out, a, b) {\n    out[0] = a[0] - b[0];\n    out[1] = a[1] - b[1];\n    out[2] = a[2] - b[2];\n    out[3] = a[3] - b[3];\n    out[4] = a[4] - b[4];\n    out[5] = a[5] - b[5];\n    out[6] = a[6] - b[6];\n    out[7] = a[7] - b[7];\n    out[8] = a[8] - b[8];\n    out[9] = a[9] - b[9];\n    out[10] = a[10] - b[10];\n    out[11] = a[11] - b[11];\n    out[12] = a[12] - b[12];\n    out[13] = a[13] - b[13];\n    out[14] = a[14] - b[14];\n    out[15] = a[15] - b[15];\n    return out;\n}\n\n/**\n * Multiply each element of the matrix by a scalar.\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to scale\n * @param {Number} b amount to scale the matrix's elements by\n * @returns {mat4} out\n */\nexport function multiplyScalar(out, a, b) {\n    out[0] = a[0] * b;\n    out[1] = a[1] * b;\n    out[2] = a[2] * b;\n    out[3] = a[3] * b;\n    out[4] = a[4] * b;\n    out[5] = a[5] * b;\n    out[6] = a[6] * b;\n    out[7] = a[7] * b;\n    out[8] = a[8] * b;\n    out[9] = a[9] * b;\n    out[10] = a[10] * b;\n    out[11] = a[11] * b;\n    out[12] = a[12] * b;\n    out[13] = a[13] * b;\n    out[14] = a[14] * b;\n    out[15] = a[15] * b;\n    return out;\n}\n","import * as Mat4Func from './functions/Mat4Func.js';\n\nexport class Mat4 extends Array {\n    constructor(\n        m00 = 1,\n        m01 = 0,\n        m02 = 0,\n        m03 = 0,\n        m10 = 0,\n        m11 = 1,\n        m12 = 0,\n        m13 = 0,\n        m20 = 0,\n        m21 = 0,\n        m22 = 1,\n        m23 = 0,\n        m30 = 0,\n        m31 = 0,\n        m32 = 0,\n        m33 = 1\n    ) {\n        super(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33);\n        return this;\n    }\n\n    get x() {\n        return this[12];\n    }\n\n    get y() {\n        return this[13];\n    }\n\n    get z() {\n        return this[14];\n    }\n\n    get w() {\n        return this[15];\n    }\n\n    set x(v) {\n        this[12] = v;\n    }\n\n    set y(v) {\n        this[13] = v;\n    }\n\n    set z(v) {\n        this[14] = v;\n    }\n\n    set w(v) {\n        this[15] = v;\n    }\n\n    set(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n        if (m00.length) return this.copy(m00);\n        Mat4Func.set(this, m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33);\n        return this;\n    }\n\n    translate(v, m = this) {\n        Mat4Func.translate(this, m, v);\n        return this;\n    }\n\n    rotate(v, axis, m = this) {\n        Mat4Func.rotate(this, m, v, axis);\n        return this;\n    }\n\n    scale(v, m = this) {\n        Mat4Func.scale(this, m, typeof v === 'number' ? [v, v, v] : v);\n        return this;\n    }\n\n    add(ma, mb) {\n        if (mb) Mat4Func.add(this, ma, mb);\n        else Mat4Func.add(this, this, ma);\n        return this;\n    }\n\n    sub(ma, mb) {\n        if (mb) Mat4Func.subtract(this, ma, mb);\n        else Mat4Func.subtract(this, this, ma);\n        return this;\n    }\n\n    multiply(ma, mb) {\n        if (!ma.length) {\n            Mat4Func.multiplyScalar(this, this, ma);\n        } else if (mb) {\n            Mat4Func.multiply(this, ma, mb);\n        } else {\n            Mat4Func.multiply(this, this, ma);\n        }\n        return this;\n    }\n\n    identity() {\n        Mat4Func.identity(this);\n        return this;\n    }\n\n    copy(m) {\n        Mat4Func.copy(this, m);\n        return this;\n    }\n\n    fromPerspective({ fov, aspect, near, far } = {}) {\n        Mat4Func.perspective(this, fov, aspect, near, far);\n        return this;\n    }\n\n    fromOrthogonal({ left, right, bottom, top, near, far }) {\n        Mat4Func.ortho(this, left, right, bottom, top, near, far);\n        return this;\n    }\n\n    fromQuaternion(q) {\n        Mat4Func.fromQuat(this, q);\n        return this;\n    }\n\n    setPosition(v) {\n        this.x = v[0];\n        this.y = v[1];\n        this.z = v[2];\n        return this;\n    }\n\n    inverse(m = this) {\n        Mat4Func.invert(this, m);\n        return this;\n    }\n\n    compose(q, pos, scale) {\n        Mat4Func.compose(this, q, pos, scale);\n        return this;\n    }\n\n    decompose(q, pos, scale) {\n        Mat4Func.decompose(this, q, pos, scale);\n        return this;\n    }\n\n    getRotation(q) {\n        Mat4Func.getRotation(q, this);\n        return this;\n    }\n\n    getTranslation(pos) {\n        Mat4Func.getTranslation(pos, this);\n        return this;\n    }\n\n    getScaling(scale) {\n        Mat4Func.getScaling(scale, this);\n        return this;\n    }\n\n    getMaxScaleOnAxis() {\n        return Mat4Func.getMaxScaleOnAxis(this);\n    }\n\n    lookAt(eye, target, up) {\n        Mat4Func.targetTo(this, eye, target, up);\n        return this;\n    }\n\n    determinant() {\n        return Mat4Func.determinant(this);\n    }\n\n    fromArray(a, o = 0) {\n        this[0] = a[o];\n        this[1] = a[o + 1];\n        this[2] = a[o + 2];\n        this[3] = a[o + 3];\n        this[4] = a[o + 4];\n        this[5] = a[o + 5];\n        this[6] = a[o + 6];\n        this[7] = a[o + 7];\n        this[8] = a[o + 8];\n        this[9] = a[o + 9];\n        this[10] = a[o + 10];\n        this[11] = a[o + 11];\n        this[12] = a[o + 12];\n        this[13] = a[o + 13];\n        this[14] = a[o + 14];\n        this[15] = a[o + 15];\n        return this;\n    }\n\n    toArray(a = [], o = 0) {\n        a[o] = this[0];\n        a[o + 1] = this[1];\n        a[o + 2] = this[2];\n        a[o + 3] = this[3];\n        a[o + 4] = this[4];\n        a[o + 5] = this[5];\n        a[o + 6] = this[6];\n        a[o + 7] = this[7];\n        a[o + 8] = this[8];\n        a[o + 9] = this[9];\n        a[o + 10] = this[10];\n        a[o + 11] = this[11];\n        a[o + 12] = this[12];\n        a[o + 13] = this[13];\n        a[o + 14] = this[14];\n        a[o + 15] = this[15];\n        return a;\n    }\n}\n","// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\nexport function fromRotationMatrix(out, m, order = 'YXZ') {\n    if (order === 'XYZ') {\n        out[1] = Math.asin(Math.min(Math.max(m[8], -1), 1));\n        if (Math.abs(m[8]) < 0.99999) {\n            out[0] = Math.atan2(-m[9], m[10]);\n            out[2] = Math.atan2(-m[4], m[0]);\n        } else {\n            out[0] = Math.atan2(m[6], m[5]);\n            out[2] = 0;\n        }\n    } else if (order === 'YXZ') {\n        out[0] = Math.asin(-Math.min(Math.max(m[9], -1), 1));\n        if (Math.abs(m[9]) < 0.99999) {\n            out[1] = Math.atan2(m[8], m[10]);\n            out[2] = Math.atan2(m[1], m[5]);\n        } else {\n            out[1] = Math.atan2(-m[2], m[0]);\n            out[2] = 0;\n        }\n    } else if (order === 'ZXY') {\n        out[0] = Math.asin(Math.min(Math.max(m[6], -1), 1));\n        if (Math.abs(m[6]) < 0.99999) {\n            out[1] = Math.atan2(-m[2], m[10]);\n            out[2] = Math.atan2(-m[4], m[5]);\n        } else {\n            out[1] = 0;\n            out[2] = Math.atan2(m[1], m[0]);\n        }\n    } else if (order === 'ZYX') {\n        out[1] = Math.asin(-Math.min(Math.max(m[2], -1), 1));\n        if (Math.abs(m[2]) < 0.99999) {\n            out[0] = Math.atan2(m[6], m[10]);\n            out[2] = Math.atan2(m[1], m[0]);\n        } else {\n            out[0] = 0;\n            out[2] = Math.atan2(-m[4], m[5]);\n        }\n    } else if (order === 'YZX') {\n        out[2] = Math.asin(Math.min(Math.max(m[1], -1), 1));\n        if (Math.abs(m[1]) < 0.99999) {\n            out[0] = Math.atan2(-m[9], m[5]);\n            out[1] = Math.atan2(-m[2], m[0]);\n        } else {\n            out[0] = 0;\n            out[1] = Math.atan2(m[8], m[10]);\n        }\n    } else if (order === 'XZY') {\n        out[2] = Math.asin(-Math.min(Math.max(m[4], -1), 1));\n        if (Math.abs(m[4]) < 0.99999) {\n            out[0] = Math.atan2(m[6], m[5]);\n            out[1] = Math.atan2(m[8], m[0]);\n        } else {\n            out[0] = Math.atan2(-m[9], m[10]);\n            out[1] = 0;\n        }\n    }\n\n    return out;\n}\n","import * as EulerFunc from './functions/EulerFunc.js';\nimport { Mat4 } from './Mat4.js';\n\nconst tmpMat4 = /* @__PURE__ */ new Mat4();\n\nexport class Euler extends Array {\n    constructor(x = 0, y = x, z = x, order = 'YXZ') {\n        super(x, y, z);\n        this.order = order;\n        this.onChange = () => {};\n\n        // Keep reference to proxy target to avoid triggering onChange internally\n        this._target = this;\n\n        // Return a proxy to trigger onChange when array elements are edited directly\n        const triggerProps = ['0', '1', '2'];\n        return new Proxy(this, {\n            set(target, property) {\n                const success = Reflect.set(...arguments);\n                if (success && triggerProps.includes(property)) target.onChange();\n                return success;\n            },\n        });\n    }\n\n    get x() {\n        return this[0];\n    }\n\n    get y() {\n        return this[1];\n    }\n\n    get z() {\n        return this[2];\n    }\n\n    set x(v) {\n        this._target[0] = v;\n        this.onChange();\n    }\n\n    set y(v) {\n        this._target[1] = v;\n        this.onChange();\n    }\n\n    set z(v) {\n        this._target[2] = v;\n        this.onChange();\n    }\n\n    set(x, y = x, z = x) {\n        if (x.length) return this.copy(x);\n        this._target[0] = x;\n        this._target[1] = y;\n        this._target[2] = z;\n        this.onChange();\n        return this;\n    }\n\n    copy(v) {\n        this._target[0] = v[0];\n        this._target[1] = v[1];\n        this._target[2] = v[2];\n        this.onChange();\n        return this;\n    }\n\n    reorder(order) {\n        this._target.order = order;\n        this.onChange();\n        return this;\n    }\n\n    fromRotationMatrix(m, order = this.order) {\n        EulerFunc.fromRotationMatrix(this._target, m, order);\n        this.onChange();\n        return this;\n    }\n\n    fromQuaternion(q, order = this.order, isInternal) {\n        tmpMat4.fromQuaternion(q);\n        this._target.fromRotationMatrix(tmpMat4, order);\n        // Avoid infinite recursion\n        if (!isInternal) this.onChange();\n        return this;\n    }\n\n    fromArray(a, o = 0) {\n        this._target[0] = a[o];\n        this._target[1] = a[o + 1];\n        this._target[2] = a[o + 2];\n        return this;\n    }\n\n    toArray(a = [], o = 0) {\n        a[o] = this[0];\n        a[o + 1] = this[1];\n        a[o + 2] = this[2];\n        return a;\n    }\n}\n","import { Vec3 } from '../math/Vec3.js';\nimport { Quat } from '../math/Quat.js';\nimport { Mat4 } from '../math/Mat4.js';\nimport { Euler } from '../math/Euler.js';\n\nexport class Transform {\n    constructor() {\n        this.parent = null;\n        this.children = [];\n        this.visible = true;\n\n        this.matrix = new Mat4();\n        this.worldMatrix = new Mat4();\n        this.matrixAutoUpdate = true;\n        this.worldMatrixNeedsUpdate = false;\n\n        this.position = new Vec3();\n        this.quaternion = new Quat();\n        this.scale = new Vec3(1);\n        this.rotation = new Euler();\n        this.up = new Vec3(0, 1, 0);\n\n        this.rotation._target.onChange = () => this.quaternion.fromEuler(this.rotation, true);\n        this.quaternion._target.onChange = () => this.rotation.fromQuaternion(this.quaternion, undefined, true);\n    }\n\n    setParent(parent, notifyParent = true) {\n        if (this.parent && parent !== this.parent) this.parent.removeChild(this, false);\n        this.parent = parent;\n        if (notifyParent && parent) parent.addChild(this, false);\n    }\n\n    addChild(child, notifyChild = true) {\n        if (!~this.children.indexOf(child)) this.children.push(child);\n        if (notifyChild) child.setParent(this, false);\n    }\n\n    removeChild(child, notifyChild = true) {\n        if (!!~this.children.indexOf(child)) this.children.splice(this.children.indexOf(child), 1);\n        if (notifyChild) child.setParent(null, false);\n    }\n\n    updateMatrixWorld(force) {\n        if (this.matrixAutoUpdate) this.updateMatrix();\n        if (this.worldMatrixNeedsUpdate || force) {\n            if (this.parent === null) this.worldMatrix.copy(this.matrix);\n            else this.worldMatrix.multiply(this.parent.worldMatrix, this.matrix);\n            this.worldMatrixNeedsUpdate = false;\n            force = true;\n        }\n\n        for (let i = 0, l = this.children.length; i < l; i++) {\n            this.children[i].updateMatrixWorld(force);\n        }\n    }\n\n    updateMatrix() {\n        this.matrix.compose(this.quaternion, this.position, this.scale);\n        this.worldMatrixNeedsUpdate = true;\n    }\n\n    traverse(callback) {\n        // Return true in callback to stop traversing children\n        if (callback(this)) return;\n        for (let i = 0, l = this.children.length; i < l; i++) {\n            this.children[i].traverse(callback);\n        }\n    }\n\n    decompose() {\n        this.matrix.decompose(this.quaternion._target, this.position, this.scale);\n        this.rotation.fromQuaternion(this.quaternion);\n    }\n\n    lookAt(target, invert = false) {\n        if (invert) this.matrix.lookAt(this.position, target, this.up);\n        else this.matrix.lookAt(target, this.position, this.up);\n        this.matrix.getRotation(this.quaternion._target);\n        this.rotation.fromQuaternion(this.quaternion);\n    }\n}\n","import { Transform } from './Transform.js';\nimport { Mat4 } from '../math/Mat4.js';\nimport { Vec3 } from '../math/Vec3.js';\n\nconst tempMat4 = /* @__PURE__ */ new Mat4();\nconst tempVec3a = /* @__PURE__ */ new Vec3();\nconst tempVec3b = /* @__PURE__ */ new Vec3();\n\nexport class Camera extends Transform {\n    constructor(gl, { near = 0.1, far = 100, fov = 45, aspect = 1, left, right, bottom, top, zoom = 1 } = {}) {\n        super();\n\n        Object.assign(this, { near, far, fov, aspect, left, right, bottom, top, zoom });\n\n        this.projectionMatrix = new Mat4();\n        this.viewMatrix = new Mat4();\n        this.projectionViewMatrix = new Mat4();\n        this.worldPosition = new Vec3();\n\n        // Use orthographic if left/right set, else default to perspective camera\n        this.type = left || right ? 'orthographic' : 'perspective';\n\n        if (this.type === 'orthographic') this.orthographic();\n        else this.perspective();\n    }\n\n    perspective({ near = this.near, far = this.far, fov = this.fov, aspect = this.aspect } = {}) {\n        Object.assign(this, { near, far, fov, aspect });\n        this.projectionMatrix.fromPerspective({ fov: fov * (Math.PI / 180), aspect, near, far });\n        this.type = 'perspective';\n        return this;\n    }\n\n    orthographic({\n        near = this.near,\n        far = this.far,\n        left = this.left || -1,\n        right = this.right || 1,\n        bottom = this.bottom || -1,\n        top = this.top || 1,\n        zoom = this.zoom,\n    } = {}) {\n        Object.assign(this, { near, far, left, right, bottom, top, zoom });\n        left /= zoom;\n        right /= zoom;\n        bottom /= zoom;\n        top /= zoom;\n        this.projectionMatrix.fromOrthogonal({ left, right, bottom, top, near, far });\n        this.type = 'orthographic';\n        return this;\n    }\n\n    updateMatrixWorld() {\n        super.updateMatrixWorld();\n        this.viewMatrix.inverse(this.worldMatrix);\n        this.worldMatrix.getTranslation(this.worldPosition);\n\n        // used for sorting\n        this.projectionViewMatrix.multiply(this.projectionMatrix, this.viewMatrix);\n        return this;\n    }\n\n    updateProjectionMatrix() {\n        if (this.type === 'perspective') {\n            return this.perspective()\n        } else {\n            return this.orthographic();\n        }\n    }\n\n    lookAt(target) {\n        super.lookAt(target, true);\n        return this;\n    }\n\n    // Project 3D coordinate to 2D point\n    project(v) {\n        v.applyMatrix4(this.viewMatrix);\n        v.applyMatrix4(this.projectionMatrix);\n        return this;\n    }\n\n    // Unproject 2D point to 3D coordinate\n    unproject(v) {\n        v.applyMatrix4(tempMat4.inverse(this.projectionMatrix));\n        v.applyMatrix4(this.worldMatrix);\n        return this;\n    }\n\n    updateFrustum() {\n        if (!this.frustum) {\n            this.frustum = [new Vec3(), new Vec3(), new Vec3(), new Vec3(), new Vec3(), new Vec3()];\n        }\n\n        const m = this.projectionViewMatrix;\n        this.frustum[0].set(m[3] - m[0], m[7] - m[4], m[11] - m[8]).constant = m[15] - m[12]; // -x\n        this.frustum[1].set(m[3] + m[0], m[7] + m[4], m[11] + m[8]).constant = m[15] + m[12]; // +x\n        this.frustum[2].set(m[3] + m[1], m[7] + m[5], m[11] + m[9]).constant = m[15] + m[13]; // +y\n        this.frustum[3].set(m[3] - m[1], m[7] - m[5], m[11] - m[9]).constant = m[15] - m[13]; // -y\n        this.frustum[4].set(m[3] - m[2], m[7] - m[6], m[11] - m[10]).constant = m[15] - m[14]; // +z (far)\n        this.frustum[5].set(m[3] + m[2], m[7] + m[6], m[11] + m[10]).constant = m[15] + m[14]; // -z (near)\n\n        for (let i = 0; i < 6; i++) {\n            const invLen = 1.0 / this.frustum[i].distance();\n            this.frustum[i].multiply(invLen);\n            this.frustum[i].constant *= invLen;\n        }\n    }\n\n    frustumIntersectsMesh(node, worldMatrix = node.worldMatrix) {\n        // If no position attribute, treat as frustumCulled false\n        if (!node.geometry.attributes.position) return true;\n\n        if (!node.geometry.bounds || node.geometry.bounds.radius === Infinity) node.geometry.computeBoundingSphere();\n\n        if (!node.geometry.bounds) return true;\n\n        const center = tempVec3a;\n        center.copy(node.geometry.bounds.center);\n        center.applyMatrix4(worldMatrix);\n\n        const radius = node.geometry.bounds.radius * worldMatrix.getMaxScaleOnAxis();\n\n        return this.frustumIntersectsSphere(center, radius);\n    }\n\n    frustumIntersectsSphere(center, radius) {\n        const normal = tempVec3b;\n\n        for (let i = 0; i < 6; i++) {\n            const plane = this.frustum[i];\n            const distance = normal.copy(plane).dot(center) + plane.constant;\n            if (distance < -radius) return false;\n        }\n        return true;\n    }\n}\n","const EPSILON = 0.000001;\n\n/**\n * Copies the upper-left 3x3 values into the given mat3.\n *\n * @param {mat3} out the receiving 3x3 matrix\n * @param {mat4} a   the source 4x4 matrix\n * @returns {mat3} out\n */\nexport function fromMat4(out, a) {\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[4];\n    out[4] = a[5];\n    out[5] = a[6];\n    out[6] = a[8];\n    out[7] = a[9];\n    out[8] = a[10];\n    return out;\n}\n\n/**\n * Calculates a 3x3 matrix from the given quaternion\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {quat} q Quaternion to create matrix from\n *\n * @returns {mat3} out\n */\nexport function fromQuat(out, q) {\n    let x = q[0],\n        y = q[1],\n        z = q[2],\n        w = q[3];\n    let x2 = x + x;\n    let y2 = y + y;\n    let z2 = z + z;\n\n    let xx = x * x2;\n    let yx = y * x2;\n    let yy = y * y2;\n    let zx = z * x2;\n    let zy = z * y2;\n    let zz = z * z2;\n    let wx = w * x2;\n    let wy = w * y2;\n    let wz = w * z2;\n\n    out[0] = 1 - yy - zz;\n    out[3] = yx - wz;\n    out[6] = zx + wy;\n\n    out[1] = yx + wz;\n    out[4] = 1 - xx - zz;\n    out[7] = zy - wx;\n\n    out[2] = zx - wy;\n    out[5] = zy + wx;\n    out[8] = 1 - xx - yy;\n\n    return out;\n}\n\n/**\n * Copy the values from one mat3 to another\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the source matrix\n * @returns {mat3} out\n */\nexport function copy(out, a) {\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    out[4] = a[4];\n    out[5] = a[5];\n    out[6] = a[6];\n    out[7] = a[7];\n    out[8] = a[8];\n    return out;\n}\n\n/**\n * Set the components of a mat3 to the given values\n *\n * @param {mat3} out the receiving matrix\n * @returns {mat3} out\n */\nexport function set(out, m00, m01, m02, m10, m11, m12, m20, m21, m22) {\n    out[0] = m00;\n    out[1] = m01;\n    out[2] = m02;\n    out[3] = m10;\n    out[4] = m11;\n    out[5] = m12;\n    out[6] = m20;\n    out[7] = m21;\n    out[8] = m22;\n    return out;\n}\n\n/**\n * Set a mat3 to the identity matrix\n *\n * @param {mat3} out the receiving matrix\n * @returns {mat3} out\n */\nexport function identity(out) {\n    out[0] = 1;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 1;\n    out[5] = 0;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 1;\n    return out;\n}\n\n/**\n * Transpose the values of a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the source matrix\n * @returns {mat3} out\n */\nexport function transpose(out, a) {\n    // If we are transposing ourselves we can skip a few steps but have to cache some values\n    if (out === a) {\n        let a01 = a[1],\n            a02 = a[2],\n            a12 = a[5];\n        out[1] = a[3];\n        out[2] = a[6];\n        out[3] = a01;\n        out[5] = a[7];\n        out[6] = a02;\n        out[7] = a12;\n    } else {\n        out[0] = a[0];\n        out[1] = a[3];\n        out[2] = a[6];\n        out[3] = a[1];\n        out[4] = a[4];\n        out[5] = a[7];\n        out[6] = a[2];\n        out[7] = a[5];\n        out[8] = a[8];\n    }\n\n    return out;\n}\n\n/**\n * Inverts a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the source matrix\n * @returns {mat3} out\n */\nexport function invert(out, a) {\n    let a00 = a[0],\n        a01 = a[1],\n        a02 = a[2];\n    let a10 = a[3],\n        a11 = a[4],\n        a12 = a[5];\n    let a20 = a[6],\n        a21 = a[7],\n        a22 = a[8];\n\n    let b01 = a22 * a11 - a12 * a21;\n    let b11 = -a22 * a10 + a12 * a20;\n    let b21 = a21 * a10 - a11 * a20;\n\n    // Calculate the determinant\n    let det = a00 * b01 + a01 * b11 + a02 * b21;\n\n    if (!det) {\n        return null;\n    }\n    det = 1.0 / det;\n\n    out[0] = b01 * det;\n    out[1] = (-a22 * a01 + a02 * a21) * det;\n    out[2] = (a12 * a01 - a02 * a11) * det;\n    out[3] = b11 * det;\n    out[4] = (a22 * a00 - a02 * a20) * det;\n    out[5] = (-a12 * a00 + a02 * a10) * det;\n    out[6] = b21 * det;\n    out[7] = (-a21 * a00 + a01 * a20) * det;\n    out[8] = (a11 * a00 - a01 * a10) * det;\n    return out;\n}\n\n/**\n * Calculates the determinant of a mat3\n *\n * @param {mat3} a the source matrix\n * @returns {Number} determinant of a\n */\nexport function determinant(a) {\n    let a00 = a[0],\n        a01 = a[1],\n        a02 = a[2];\n    let a10 = a[3],\n        a11 = a[4],\n        a12 = a[5];\n    let a20 = a[6],\n        a21 = a[7],\n        a22 = a[8];\n\n    return a00 * (a22 * a11 - a12 * a21) + a01 * (-a22 * a10 + a12 * a20) + a02 * (a21 * a10 - a11 * a20);\n}\n\n/**\n * Multiplies two mat3's\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the first operand\n * @param {mat3} b the second operand\n * @returns {mat3} out\n */\nexport function multiply(out, a, b) {\n    let a00 = a[0],\n        a01 = a[1],\n        a02 = a[2];\n    let a10 = a[3],\n        a11 = a[4],\n        a12 = a[5];\n    let a20 = a[6],\n        a21 = a[7],\n        a22 = a[8];\n\n    let b00 = b[0],\n        b01 = b[1],\n        b02 = b[2];\n    let b10 = b[3],\n        b11 = b[4],\n        b12 = b[5];\n    let b20 = b[6],\n        b21 = b[7],\n        b22 = b[8];\n\n    out[0] = b00 * a00 + b01 * a10 + b02 * a20;\n    out[1] = b00 * a01 + b01 * a11 + b02 * a21;\n    out[2] = b00 * a02 + b01 * a12 + b02 * a22;\n\n    out[3] = b10 * a00 + b11 * a10 + b12 * a20;\n    out[4] = b10 * a01 + b11 * a11 + b12 * a21;\n    out[5] = b10 * a02 + b11 * a12 + b12 * a22;\n\n    out[6] = b20 * a00 + b21 * a10 + b22 * a20;\n    out[7] = b20 * a01 + b21 * a11 + b22 * a21;\n    out[8] = b20 * a02 + b21 * a12 + b22 * a22;\n    return out;\n}\n\n/**\n * Translate a mat3 by the given vector\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the matrix to translate\n * @param {vec2} v vector to translate by\n * @returns {mat3} out\n */\nexport function translate(out, a, v) {\n    let a00 = a[0],\n        a01 = a[1],\n        a02 = a[2],\n        a10 = a[3],\n        a11 = a[4],\n        a12 = a[5],\n        a20 = a[6],\n        a21 = a[7],\n        a22 = a[8],\n        x = v[0],\n        y = v[1];\n\n    out[0] = a00;\n    out[1] = a01;\n    out[2] = a02;\n\n    out[3] = a10;\n    out[4] = a11;\n    out[5] = a12;\n\n    out[6] = x * a00 + y * a10 + a20;\n    out[7] = x * a01 + y * a11 + a21;\n    out[8] = x * a02 + y * a12 + a22;\n    return out;\n}\n\n/**\n * Rotates a mat3 by the given angle\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat3} out\n */\nexport function rotate(out, a, rad) {\n    let a00 = a[0],\n        a01 = a[1],\n        a02 = a[2],\n        a10 = a[3],\n        a11 = a[4],\n        a12 = a[5],\n        a20 = a[6],\n        a21 = a[7],\n        a22 = a[8],\n        s = Math.sin(rad),\n        c = Math.cos(rad);\n\n    out[0] = c * a00 + s * a10;\n    out[1] = c * a01 + s * a11;\n    out[2] = c * a02 + s * a12;\n\n    out[3] = c * a10 - s * a00;\n    out[4] = c * a11 - s * a01;\n    out[5] = c * a12 - s * a02;\n\n    out[6] = a20;\n    out[7] = a21;\n    out[8] = a22;\n    return out;\n}\n\n/**\n * Scales the mat3 by the dimensions in the given vec2\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the matrix to rotate\n * @param {vec2} v the vec2 to scale the matrix by\n * @returns {mat3} out\n **/\nexport function scale(out, a, v) {\n    let x = v[0],\n        y = v[1];\n\n    out[0] = x * a[0];\n    out[1] = x * a[1];\n    out[2] = x * a[2];\n\n    out[3] = y * a[3];\n    out[4] = y * a[4];\n    out[5] = y * a[5];\n\n    out[6] = a[6];\n    out[7] = a[7];\n    out[8] = a[8];\n    return out;\n}\n\n/**\n * Calculates a 3x3 normal matrix (transpose inverse) from the 4x4 matrix\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {mat4} a Mat4 to derive the normal matrix from\n *\n * @returns {mat3} out\n */\nexport function normalFromMat4(out, a) {\n    let a00 = a[0],\n        a01 = a[1],\n        a02 = a[2],\n        a03 = a[3];\n    let a10 = a[4],\n        a11 = a[5],\n        a12 = a[6],\n        a13 = a[7];\n    let a20 = a[8],\n        a21 = a[9],\n        a22 = a[10],\n        a23 = a[11];\n    let a30 = a[12],\n        a31 = a[13],\n        a32 = a[14],\n        a33 = a[15];\n\n    let b00 = a00 * a11 - a01 * a10;\n    let b01 = a00 * a12 - a02 * a10;\n    let b02 = a00 * a13 - a03 * a10;\n    let b03 = a01 * a12 - a02 * a11;\n    let b04 = a01 * a13 - a03 * a11;\n    let b05 = a02 * a13 - a03 * a12;\n    let b06 = a20 * a31 - a21 * a30;\n    let b07 = a20 * a32 - a22 * a30;\n    let b08 = a20 * a33 - a23 * a30;\n    let b09 = a21 * a32 - a22 * a31;\n    let b10 = a21 * a33 - a23 * a31;\n    let b11 = a22 * a33 - a23 * a32;\n\n    // Calculate the determinant\n    let det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n    if (!det) {\n        return null;\n    }\n    det = 1.0 / det;\n\n    out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n    out[1] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n    out[2] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n\n    out[3] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n    out[4] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n    out[5] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n\n    out[6] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n    out[7] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n    out[8] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n\n    return out;\n}\n\n/**\n * Generates a 2D projection matrix with the given bounds\n *\n * @param {mat3} out mat3 frustum matrix will be written into\n * @param {number} width Width of your gl context\n * @param {number} height Height of gl context\n * @returns {mat3} out\n */\nexport function projection(out, width, height) {\n    out[0] = 2 / width;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = -2 / height;\n    out[5] = 0;\n    out[6] = -1;\n    out[7] = 1;\n    out[8] = 1;\n    return out;\n}\n\n/**\n * Adds two mat3's\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the first operand\n * @param {mat3} b the second operand\n * @returns {mat3} out\n */\nexport function add(out, a, b) {\n    out[0] = a[0] + b[0];\n    out[1] = a[1] + b[1];\n    out[2] = a[2] + b[2];\n    out[3] = a[3] + b[3];\n    out[4] = a[4] + b[4];\n    out[5] = a[5] + b[5];\n    out[6] = a[6] + b[6];\n    out[7] = a[7] + b[7];\n    out[8] = a[8] + b[8];\n    return out;\n}\n\n/**\n * Subtracts matrix b from matrix a\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the first operand\n * @param {mat3} b the second operand\n * @returns {mat3} out\n */\nexport function subtract(out, a, b) {\n    out[0] = a[0] - b[0];\n    out[1] = a[1] - b[1];\n    out[2] = a[2] - b[2];\n    out[3] = a[3] - b[3];\n    out[4] = a[4] - b[4];\n    out[5] = a[5] - b[5];\n    out[6] = a[6] - b[6];\n    out[7] = a[7] - b[7];\n    out[8] = a[8] - b[8];\n    return out;\n}\n\n/**\n * Multiply each element of the matrix by a scalar.\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the matrix to scale\n * @param {Number} b amount to scale the matrix's elements by\n * @returns {mat3} out\n */\nexport function multiplyScalar(out, a, b) {\n    out[0] = a[0] * b;\n    out[1] = a[1] * b;\n    out[2] = a[2] * b;\n    out[3] = a[3] * b;\n    out[4] = a[4] * b;\n    out[5] = a[5] * b;\n    out[6] = a[6] * b;\n    out[7] = a[7] * b;\n    out[8] = a[8] * b;\n    return out;\n}\n","import * as Mat3Func from './functions/Mat3Func.js';\n\nexport class Mat3 extends Array {\n    constructor(m00 = 1, m01 = 0, m02 = 0, m10 = 0, m11 = 1, m12 = 0, m20 = 0, m21 = 0, m22 = 1) {\n        super(m00, m01, m02, m10, m11, m12, m20, m21, m22);\n        return this;\n    }\n\n    set(m00, m01, m02, m10, m11, m12, m20, m21, m22) {\n        if (m00.length) return this.copy(m00);\n        Mat3Func.set(this, m00, m01, m02, m10, m11, m12, m20, m21, m22);\n        return this;\n    }\n\n    translate(v, m = this) {\n        Mat3Func.translate(this, m, v);\n        return this;\n    }\n\n    rotate(v, m = this) {\n        Mat3Func.rotate(this, m, v);\n        return this;\n    }\n\n    scale(v, m = this) {\n        Mat3Func.scale(this, m, v);\n        return this;\n    }\n\n    multiply(ma, mb) {\n        if (mb) {\n            Mat3Func.multiply(this, ma, mb);\n        } else {\n            Mat3Func.multiply(this, this, ma);\n        }\n        return this;\n    }\n\n    identity() {\n        Mat3Func.identity(this);\n        return this;\n    }\n\n    copy(m) {\n        Mat3Func.copy(this, m);\n        return this;\n    }\n\n    fromMatrix4(m) {\n        Mat3Func.fromMat4(this, m);\n        return this;\n    }\n\n    fromQuaternion(q) {\n        Mat3Func.fromQuat(this, q);\n        return this;\n    }\n\n    fromBasis(vec3a, vec3b, vec3c) {\n        this.set(vec3a[0], vec3a[1], vec3a[2], vec3b[0], vec3b[1], vec3b[2], vec3c[0], vec3c[1], vec3c[2]);\n        return this;\n    }\n\n    inverse(m = this) {\n        Mat3Func.invert(this, m);\n        return this;\n    }\n\n    getNormalMatrix(m) {\n        Mat3Func.normalFromMat4(this, m);\n        return this;\n    }\n}\n","import { Transform } from './Transform.js';\nimport { Mat3 } from '../math/Mat3.js';\nimport { Mat4 } from '../math/Mat4.js';\n\nlet ID = 0;\n\nexport class Mesh extends Transform {\n    constructor(gl, { geometry, program, mode = gl.TRIANGLES, frustumCulled = true, renderOrder = 0 } = {}) {\n        super();\n        if (!gl.canvas) console.error('gl not passed as first argument to Mesh');\n        this.gl = gl;\n        this.id = ID++;\n        this.geometry = geometry;\n        this.program = program;\n        this.mode = mode;\n\n        // Used to skip frustum culling\n        this.frustumCulled = frustumCulled;\n\n        // Override sorting to force an order\n        this.renderOrder = renderOrder;\n        this.modelViewMatrix = new Mat4();\n        this.normalMatrix = new Mat3();\n        this.beforeRenderCallbacks = [];\n        this.afterRenderCallbacks = [];\n    }\n\n    onBeforeRender(f) {\n        this.beforeRenderCallbacks.push(f);\n        return this;\n    }\n\n    onAfterRender(f) {\n        this.afterRenderCallbacks.push(f);\n        return this;\n    }\n\n    draw({ camera } = {}) {\n        if (camera) {\n            // Add empty matrix uniforms to program if unset\n            if (!this.program.uniforms.modelMatrix) {\n                Object.assign(this.program.uniforms, {\n                    modelMatrix: { value: null },\n                    viewMatrix: { value: null },\n                    modelViewMatrix: { value: null },\n                    normalMatrix: { value: null },\n                    projectionMatrix: { value: null },\n                    cameraPosition: { value: null },\n                });\n            }\n\n            // Set the matrix uniforms\n            this.program.uniforms.projectionMatrix.value = camera.projectionMatrix;\n            this.program.uniforms.cameraPosition.value = camera.worldPosition;\n            this.program.uniforms.viewMatrix.value = camera.viewMatrix;\n            this.modelViewMatrix.multiply(camera.viewMatrix, this.worldMatrix);\n            this.normalMatrix.getNormalMatrix(this.modelViewMatrix);\n            this.program.uniforms.modelMatrix.value = this.worldMatrix;\n            this.program.uniforms.modelViewMatrix.value = this.modelViewMatrix;\n            this.program.uniforms.normalMatrix.value = this.normalMatrix;\n        }\n        this.beforeRenderCallbacks.forEach((f) => f && f({ mesh: this, camera }));\n\n        // determine if faces need to be flipped - when mesh scaled negatively\n        let flipFaces = this.program.cullFace && this.worldMatrix.determinant() < 0;\n        this.program.use({ flipFaces });\n        this.geometry.draw({ mode: this.mode, program: this.program });\n        this.afterRenderCallbacks.forEach((f) => f && f({ mesh: this, camera }));\n    }\n}\n","// TODO: delete texture\n// TODO: use texSubImage2D for updates (video or when loaded)\n// TODO: need? encoding = linearEncoding\n// TODO: support non-compressed mipmaps uploads\n\nconst emptyPixel = new Uint8Array(4);\n\nfunction isPowerOf2(value) {\n    return (value & (value - 1)) === 0;\n}\n\nlet ID = 1;\n\nexport class Texture {\n    constructor(\n        gl,\n        {\n            image,\n            target = gl.TEXTURE_2D,\n            type = gl.UNSIGNED_BYTE,\n            format = gl.RGBA,\n            internalFormat = format,\n            wrapS = gl.CLAMP_TO_EDGE,\n            wrapT = gl.CLAMP_TO_EDGE,\n            generateMipmaps = target === (gl.TEXTURE_2D || gl.TEXTURE_CUBE_MAP),\n            minFilter = generateMipmaps ? gl.NEAREST_MIPMAP_LINEAR : gl.LINEAR,\n            magFilter = gl.LINEAR,\n            premultiplyAlpha = false,\n            unpackAlignment = 4,\n            flipY = target == gl.TEXTURE_2D ? true : false,\n            anisotropy = 0,\n            level = 0,\n            width, // used for RenderTargets or Data Textures\n            height = width,\n            length = 1,\n        } = {}\n    ) {\n        this.gl = gl;\n        this.id = ID++;\n\n        this.image = image;\n        this.target = target;\n        this.type = type;\n        this.format = format;\n        this.internalFormat = internalFormat;\n        this.minFilter = minFilter;\n        this.magFilter = magFilter;\n        this.wrapS = wrapS;\n        this.wrapT = wrapT;\n        this.generateMipmaps = generateMipmaps;\n        this.premultiplyAlpha = premultiplyAlpha;\n        this.unpackAlignment = unpackAlignment;\n        this.flipY = flipY;\n        this.anisotropy = Math.min(anisotropy, this.gl.renderer.parameters.maxAnisotropy);\n        this.level = level;\n        this.width = width;\n        this.height = height;\n        this.length = length;\n        this.texture = this.gl.createTexture();\n\n        this.store = {\n            image: null,\n        };\n\n        // Alias for state store to avoid redundant calls for global state\n        this.glState = this.gl.renderer.state;\n\n        // State store to avoid redundant calls for per-texture state\n        this.state = {};\n        this.state.minFilter = this.gl.NEAREST_MIPMAP_LINEAR;\n        this.state.magFilter = this.gl.LINEAR;\n        this.state.wrapS = this.gl.REPEAT;\n        this.state.wrapT = this.gl.REPEAT;\n        this.state.anisotropy = 0;\n    }\n\n    bind() {\n        // Already bound to active texture unit\n        if (this.glState.textureUnits[this.glState.activeTextureUnit] === this.id) return;\n        this.gl.bindTexture(this.target, this.texture);\n        this.glState.textureUnits[this.glState.activeTextureUnit] = this.id;\n    }\n\n    update(textureUnit = 0) {\n        const needsUpdate = !(this.image === this.store.image && !this.needsUpdate);\n\n        // Make sure that texture is bound to its texture unit\n        if (needsUpdate || this.glState.textureUnits[textureUnit] !== this.id) {\n            // set active texture unit to perform texture functions\n            this.gl.renderer.activeTexture(textureUnit);\n            this.bind();\n        }\n\n        if (!needsUpdate) return;\n        this.needsUpdate = false;\n\n        if (this.flipY !== this.glState.flipY) {\n            this.gl.pixelStorei(this.gl.UNPACK_FLIP_Y_WEBGL, this.flipY);\n            this.glState.flipY = this.flipY;\n        }\n\n        if (this.premultiplyAlpha !== this.glState.premultiplyAlpha) {\n            this.gl.pixelStorei(this.gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, this.premultiplyAlpha);\n            this.glState.premultiplyAlpha = this.premultiplyAlpha;\n        }\n\n        if (this.unpackAlignment !== this.glState.unpackAlignment) {\n            this.gl.pixelStorei(this.gl.UNPACK_ALIGNMENT, this.unpackAlignment);\n            this.glState.unpackAlignment = this.unpackAlignment;\n        }\n\n        if (this.minFilter !== this.state.minFilter) {\n            this.gl.texParameteri(this.target, this.gl.TEXTURE_MIN_FILTER, this.minFilter);\n            this.state.minFilter = this.minFilter;\n        }\n\n        if (this.magFilter !== this.state.magFilter) {\n            this.gl.texParameteri(this.target, this.gl.TEXTURE_MAG_FILTER, this.magFilter);\n            this.state.magFilter = this.magFilter;\n        }\n\n        if (this.wrapS !== this.state.wrapS) {\n            this.gl.texParameteri(this.target, this.gl.TEXTURE_WRAP_S, this.wrapS);\n            this.state.wrapS = this.wrapS;\n        }\n\n        if (this.wrapT !== this.state.wrapT) {\n            this.gl.texParameteri(this.target, this.gl.TEXTURE_WRAP_T, this.wrapT);\n            this.state.wrapT = this.wrapT;\n        }\n\n        if (this.anisotropy && this.anisotropy !== this.state.anisotropy) {\n            this.gl.texParameterf(\n                this.target,\n                this.gl.renderer.getExtension('EXT_texture_filter_anisotropic').TEXTURE_MAX_ANISOTROPY_EXT,\n                this.anisotropy\n            );\n            this.state.anisotropy = this.anisotropy;\n        }\n\n        if (this.image) {\n            if (this.image.width) {\n                this.width = this.image.width;\n                this.height = this.image.height;\n            }\n\n            if (this.target === this.gl.TEXTURE_CUBE_MAP) {\n                // For cube maps\n                for (let i = 0; i < 6; i++) {\n                    this.gl.texImage2D(\n                        this.gl.TEXTURE_CUBE_MAP_POSITIVE_X + i,\n                        this.level,\n                        this.internalFormat,\n                        this.format,\n                        this.type,\n                        this.image[i]\n                    );\n                }\n            } else if (ArrayBuffer.isView(this.image)) {\n                // Data texture\n                if(this.target === this.gl.TEXTURE_2D) {\n                    this.gl.texImage2D(this.target, this.level, this.internalFormat, this.width, this.height, 0, this.format, this.type, this.image);   \n                }\n                else if(this.target === this.gl.TEXTURE_2D_ARRAY) {\n                    this.gl.texImage3D(this.target, this.level, this.internalFormat, this.width, this.height, this.length, 0, this.format, this.type, this.image);\n                }\n            } else if (this.image.isCompressedTexture) {\n                // Compressed texture\n                for (let level = 0; level < this.image.length; level++) {\n                    this.gl.compressedTexImage2D(\n                        this.target,\n                        level,\n                        this.internalFormat,\n                        this.image[level].width,\n                        this.image[level].height,\n                        0,\n                        this.image[level].data\n                    );\n                }\n            } else {\n                // Regular texture\n                if(this.target === this.gl.TEXTURE_2D) {\n                    this.gl.texImage2D(this.target, this.level, this.internalFormat, this.format, this.type, this.image);\n                }\n                else{\n                    this.gl.texImage3D(this.target, this.level, this.internalFormat, this.width, this.height, this.length, 0, this.format, this.type, this.image);\n                }\n            }\n\n            if (this.generateMipmaps) {\n                // For WebGL1, if not a power of 2, turn off mips, set wrapping to clamp to edge and minFilter to linear\n                if (!this.gl.renderer.isWebgl2 && (!isPowerOf2(this.image.width) || !isPowerOf2(this.image.height))) {\n                    this.generateMipmaps = false;\n                    this.wrapS = this.wrapT = this.gl.CLAMP_TO_EDGE;\n                    this.minFilter = this.gl.LINEAR;\n                } else {\n                    this.gl.generateMipmap(this.target);\n                }\n            }\n\n            // Callback for when data is pushed to GPU\n            this.onUpdate && this.onUpdate();\n        } else {\n            if (this.target === this.gl.TEXTURE_CUBE_MAP) {\n                // Upload empty pixel for each side while no image to avoid errors while image or video loading\n                for (let i = 0; i < 6; i++) {\n                    this.gl.texImage2D(\n                        this.gl.TEXTURE_CUBE_MAP_POSITIVE_X + i,\n                        0,\n                        this.gl.RGBA,\n                        1,\n                        1,\n                        0,\n                        this.gl.RGBA,\n                        this.gl.UNSIGNED_BYTE,\n                        emptyPixel\n                    );\n                }\n            } else if (this.width) {\n                // image intentionally left null for RenderTarget\n                if(this.target === this.gl.TEXTURE_2D) {\n                    this.gl.texImage2D(this.target, this.level, this.internalFormat, this.width, this.height, 0, this.format, this.type, null);\n                }\n                else if(this.target === this.gl.TEXTURE_2D_ARRAY) {\n                    this.gl.texImage3D(this.target, this.level, this.internalFormat, this.width, this.height, this.length, 0, this.format, this.type, null);\n                }\n            } else {\n                // Upload empty pixel if no image to avoid errors while image or video loading\n                this.gl.texImage2D(this.target, 0, this.gl.RGBA, 1, 1, 0, this.gl.RGBA, this.gl.UNSIGNED_BYTE, emptyPixel);\n            }\n        }\n        this.store.image = this.image;\n    }\n}\n","// TODO: test stencil and depth\nimport { Texture } from './Texture.js';\n\nexport class RenderTarget {\n    constructor(\n        gl,\n        {\n            width = gl.canvas.width,\n            height = gl.canvas.height,\n            target = gl.FRAMEBUFFER,\n            color = 1, // number of color attachments\n            depth = true,\n            stencil = false,\n            depthTexture = false, // note - stencil breaks\n            wrapS = gl.CLAMP_TO_EDGE,\n            wrapT = gl.CLAMP_TO_EDGE,\n            minFilter = gl.LINEAR,\n            magFilter = minFilter,\n            type = gl.UNSIGNED_BYTE,\n            format = gl.RGBA,\n            internalFormat = format,\n            unpackAlignment,\n            premultiplyAlpha,\n        } = {}\n    ) {\n        this.gl = gl;\n        this.width = width;\n        this.height = height;\n        this.depth = depth;\n        this.buffer = this.gl.createFramebuffer();\n        this.target = target;\n        this.gl.renderer.bindFramebuffer(this);\n\n        this.textures = [];\n        const drawBuffers = [];\n\n        // create and attach required num of color textures\n        for (let i = 0; i < color; i++) {\n            this.textures.push(\n                new Texture(gl, {\n                    width,\n                    height,\n                    wrapS,\n                    wrapT,\n                    minFilter,\n                    magFilter,\n                    type,\n                    format,\n                    internalFormat,\n                    unpackAlignment,\n                    premultiplyAlpha,\n                    flipY: false,\n                    generateMipmaps: false,\n                })\n            );\n            this.textures[i].update();\n            this.gl.framebufferTexture2D(this.target, this.gl.COLOR_ATTACHMENT0 + i, this.gl.TEXTURE_2D, this.textures[i].texture, 0 /* level */);\n            drawBuffers.push(this.gl.COLOR_ATTACHMENT0 + i);\n        }\n\n        // For multi-render targets shader access\n        if (drawBuffers.length > 1) this.gl.renderer.drawBuffers(drawBuffers);\n\n        // alias for majority of use cases\n        this.texture = this.textures[0];\n\n        // note depth textures break stencil - so can't use together\n        if (depthTexture && (this.gl.renderer.isWebgl2 || this.gl.renderer.getExtension('WEBGL_depth_texture'))) {\n            this.depthTexture = new Texture(gl, {\n                width,\n                height,\n                minFilter: this.gl.NEAREST,\n                magFilter: this.gl.NEAREST,\n                format: this.gl.DEPTH_COMPONENT,\n                internalFormat: gl.renderer.isWebgl2 ? this.gl.DEPTH_COMPONENT16 : this.gl.DEPTH_COMPONENT,\n                type: this.gl.UNSIGNED_INT,\n            });\n            this.depthTexture.update();\n            this.gl.framebufferTexture2D(this.target, this.gl.DEPTH_ATTACHMENT, this.gl.TEXTURE_2D, this.depthTexture.texture, 0 /* level */);\n        } else {\n            // Render buffers\n            if (depth && !stencil) {\n                this.depthBuffer = this.gl.createRenderbuffer();\n                this.gl.bindRenderbuffer(this.gl.RENDERBUFFER, this.depthBuffer);\n                this.gl.renderbufferStorage(this.gl.RENDERBUFFER, this.gl.DEPTH_COMPONENT16, width, height);\n                this.gl.framebufferRenderbuffer(this.target, this.gl.DEPTH_ATTACHMENT, this.gl.RENDERBUFFER, this.depthBuffer);\n            }\n\n            if (stencil && !depth) {\n                this.stencilBuffer = this.gl.createRenderbuffer();\n                this.gl.bindRenderbuffer(this.gl.RENDERBUFFER, this.stencilBuffer);\n                this.gl.renderbufferStorage(this.gl.RENDERBUFFER, this.gl.STENCIL_INDEX8, width, height);\n                this.gl.framebufferRenderbuffer(this.target, this.gl.STENCIL_ATTACHMENT, this.gl.RENDERBUFFER, this.stencilBuffer);\n            }\n\n            if (depth && stencil) {\n                this.depthStencilBuffer = this.gl.createRenderbuffer();\n                this.gl.bindRenderbuffer(this.gl.RENDERBUFFER, this.depthStencilBuffer);\n                this.gl.renderbufferStorage(this.gl.RENDERBUFFER, this.gl.DEPTH_STENCIL, width, height);\n                this.gl.framebufferRenderbuffer(this.target, this.gl.DEPTH_STENCIL_ATTACHMENT, this.gl.RENDERBUFFER, this.depthStencilBuffer);\n            }\n        }\n\n        this.gl.renderer.bindFramebuffer({ target: this.target });\n    }\n\n    setSize(width, height) {\n        if (this.width === width && this.height === height) return;\n\n        this.width = width;\n        this.height = height;\n        this.gl.renderer.bindFramebuffer(this);\n\n        for (let i = 0; i < this.textures.length; i++) {\n            this.textures[i].width = width;\n            this.textures[i].height = height;\n            this.textures[i].needsUpdate = true;\n            this.textures[i].update();\n            this.gl.framebufferTexture2D(this.target, this.gl.COLOR_ATTACHMENT0 + i, this.gl.TEXTURE_2D, this.textures[i].texture, 0 /* level */);\n        }\n\n        if (this.depthTexture) {\n            this.depthTexture.width = width;\n            this.depthTexture.height = height;\n            this.depthTexture.needsUpdate = true;\n            this.depthTexture.update();\n            this.gl.framebufferTexture2D(this.target, this.gl.DEPTH_ATTACHMENT, this.gl.TEXTURE_2D, this.depthTexture.texture, 0 /* level */);\n        } else {\n            if (this.depthBuffer) {\n                this.gl.bindRenderbuffer(this.gl.RENDERBUFFER, this.depthBuffer);\n                this.gl.renderbufferStorage(this.gl.RENDERBUFFER, this.gl.DEPTH_COMPONENT16, width, height);\n            }\n\n            if (this.stencilBuffer) {\n                this.gl.bindRenderbuffer(this.gl.RENDERBUFFER, this.stencilBuffer);\n                this.gl.renderbufferStorage(this.gl.RENDERBUFFER, this.gl.STENCIL_INDEX8, width, height);\n            }\n\n            if (this.depthStencilBuffer) {\n                this.gl.bindRenderbuffer(this.gl.RENDERBUFFER, this.depthStencilBuffer);\n                this.gl.renderbufferStorage(this.gl.RENDERBUFFER, this.gl.DEPTH_STENCIL, width, height);\n            }\n        }\n\n        this.gl.renderer.bindFramebuffer({ target: this.target });\n    }\n}\n","const EPSILON = 0.000001;\n\n/**\n * Copy the values from one vec2 to another\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the source vector\n * @returns {vec2} out\n */\nexport function copy(out, a) {\n    out[0] = a[0];\n    out[1] = a[1];\n    return out;\n}\n\n/**\n * Set the components of a vec2 to the given values\n *\n * @param {vec2} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @returns {vec2} out\n */\nexport function set(out, x, y) {\n    out[0] = x;\n    out[1] = y;\n    return out;\n}\n\n/**\n * Adds two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec2} out\n */\nexport function add(out, a, b) {\n    out[0] = a[0] + b[0];\n    out[1] = a[1] + b[1];\n    return out;\n}\n\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec2} out\n */\nexport function subtract(out, a, b) {\n    out[0] = a[0] - b[0];\n    out[1] = a[1] - b[1];\n    return out;\n}\n\n/**\n * Multiplies two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec2} out\n */\nexport function multiply(out, a, b) {\n    out[0] = a[0] * b[0];\n    out[1] = a[1] * b[1];\n    return out;\n}\n\n/**\n * Divides two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec2} out\n */\nexport function divide(out, a, b) {\n    out[0] = a[0] / b[0];\n    out[1] = a[1] / b[1];\n    return out;\n}\n\n/**\n * Scales a vec2 by a scalar number\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec2} out\n */\nexport function scale(out, a, b) {\n    out[0] = a[0] * b;\n    out[1] = a[1] * b;\n    return out;\n}\n\n/**\n * Calculates the euclidian distance between two vec2's\n *\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {Number} distance between a and b\n */\nexport function distance(a, b) {\n    var x = b[0] - a[0],\n        y = b[1] - a[1];\n    return Math.sqrt(x * x + y * y);\n}\n\n/**\n * Calculates the squared euclidian distance between two vec2's\n *\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {Number} squared distance between a and b\n */\nexport function squaredDistance(a, b) {\n    var x = b[0] - a[0],\n        y = b[1] - a[1];\n    return x * x + y * y;\n}\n\n/**\n * Calculates the length of a vec2\n *\n * @param {vec2} a vector to calculate length of\n * @returns {Number} length of a\n */\nexport function length(a) {\n    var x = a[0],\n        y = a[1];\n    return Math.sqrt(x * x + y * y);\n}\n\n/**\n * Calculates the squared length of a vec2\n *\n * @param {vec2} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\nexport function squaredLength(a) {\n    var x = a[0],\n        y = a[1];\n    return x * x + y * y;\n}\n\n/**\n * Negates the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a vector to negate\n * @returns {vec2} out\n */\nexport function negate(out, a) {\n    out[0] = -a[0];\n    out[1] = -a[1];\n    return out;\n}\n\n/**\n * Returns the inverse of the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a vector to invert\n * @returns {vec2} out\n */\nexport function inverse(out, a) {\n    out[0] = 1.0 / a[0];\n    out[1] = 1.0 / a[1];\n    return out;\n}\n\n/**\n * Normalize a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a vector to normalize\n * @returns {vec2} out\n */\nexport function normalize(out, a) {\n    var x = a[0],\n        y = a[1];\n    var len = x * x + y * y;\n    if (len > 0) {\n        //TODO: evaluate use of glm_invsqrt here?\n        len = 1 / Math.sqrt(len);\n    }\n    out[0] = a[0] * len;\n    out[1] = a[1] * len;\n    return out;\n}\n\n/**\n * Calculates the dot product of two vec2's\n *\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {Number} dot product of a and b\n */\nexport function dot(a, b) {\n    return a[0] * b[0] + a[1] * b[1];\n}\n\n/**\n * Computes the cross product of two vec2's\n * Note that the cross product returns a scalar\n *\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {Number} cross product of a and b\n */\nexport function cross(a, b) {\n    return a[0] * b[1] - a[1] * b[0];\n}\n\n/**\n * Performs a linear interpolation between two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @param {Number} t interpolation amount between the two inputs\n * @returns {vec2} out\n */\nexport function lerp(out, a, b, t) {\n    var ax = a[0],\n        ay = a[1];\n    out[0] = ax + t * (b[0] - ax);\n    out[1] = ay + t * (b[1] - ay);\n    return out;\n}\n\n/**\n * Transforms the vec2 with a mat2\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the vector to transform\n * @param {mat2} m matrix to transform with\n * @returns {vec2} out\n */\nexport function transformMat2(out, a, m) {\n    var x = a[0],\n        y = a[1];\n    out[0] = m[0] * x + m[2] * y;\n    out[1] = m[1] * x + m[3] * y;\n    return out;\n}\n\n/**\n * Transforms the vec2 with a mat2d\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the vector to transform\n * @param {mat2d} m matrix to transform with\n * @returns {vec2} out\n */\nexport function transformMat2d(out, a, m) {\n    var x = a[0],\n        y = a[1];\n    out[0] = m[0] * x + m[2] * y + m[4];\n    out[1] = m[1] * x + m[3] * y + m[5];\n    return out;\n}\n\n/**\n * Transforms the vec2 with a mat3\n * 3rd vector component is implicitly '1'\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the vector to transform\n * @param {mat3} m matrix to transform with\n * @returns {vec2} out\n */\nexport function transformMat3(out, a, m) {\n    var x = a[0],\n        y = a[1];\n    out[0] = m[0] * x + m[3] * y + m[6];\n    out[1] = m[1] * x + m[4] * y + m[7];\n    return out;\n}\n\n/**\n * Transforms the vec2 with a mat4\n * 3rd vector component is implicitly '0'\n * 4th vector component is implicitly '1'\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the vector to transform\n * @param {mat4} m matrix to transform with\n * @returns {vec2} out\n */\nexport function transformMat4(out, a, m) {\n    let x = a[0];\n    let y = a[1];\n    out[0] = m[0] * x + m[4] * y + m[12];\n    out[1] = m[1] * x + m[5] * y + m[13];\n    return out;\n}\n\n/**\n * Returns whether or not the vectors exactly have the same elements in the same position (when compared with ===)\n *\n * @param {vec2} a The first vector.\n * @param {vec2} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nexport function exactEquals(a, b) {\n    return a[0] === b[0] && a[1] === b[1];\n}\n","import * as Vec2Func from './functions/Vec2Func.js';\n\nexport class Vec2 extends Array {\n    constructor(x = 0, y = x) {\n        super(x, y);\n        return this;\n    }\n\n    get x() {\n        return this[0];\n    }\n\n    get y() {\n        return this[1];\n    }\n\n    set x(v) {\n        this[0] = v;\n    }\n\n    set y(v) {\n        this[1] = v;\n    }\n\n    set(x, y = x) {\n        if (x.length) return this.copy(x);\n        Vec2Func.set(this, x, y);\n        return this;\n    }\n\n    copy(v) {\n        Vec2Func.copy(this, v);\n        return this;\n    }\n\n    add(va, vb) {\n        if (vb) Vec2Func.add(this, va, vb);\n        else Vec2Func.add(this, this, va);\n        return this;\n    }\n\n    sub(va, vb) {\n        if (vb) Vec2Func.subtract(this, va, vb);\n        else Vec2Func.subtract(this, this, va);\n        return this;\n    }\n\n    multiply(v) {\n        if (v.length) Vec2Func.multiply(this, this, v);\n        else Vec2Func.scale(this, this, v);\n        return this;\n    }\n\n    divide(v) {\n        if (v.length) Vec2Func.divide(this, this, v);\n        else Vec2Func.scale(this, this, 1 / v);\n        return this;\n    }\n\n    inverse(v = this) {\n        Vec2Func.inverse(this, v);\n        return this;\n    }\n\n    // Can't use 'length' as Array.prototype uses it\n    len() {\n        return Vec2Func.length(this);\n    }\n\n    distance(v) {\n        if (v) return Vec2Func.distance(this, v);\n        else return Vec2Func.length(this);\n    }\n\n    squaredLen() {\n        return this.squaredDistance();\n    }\n\n    squaredDistance(v) {\n        if (v) return Vec2Func.squaredDistance(this, v);\n        else return Vec2Func.squaredLength(this);\n    }\n\n    negate(v = this) {\n        Vec2Func.negate(this, v);\n        return this;\n    }\n\n    cross(va, vb) {\n        if (vb) return Vec2Func.cross(va, vb);\n        return Vec2Func.cross(this, va);\n    }\n\n    scale(v) {\n        Vec2Func.scale(this, this, v);\n        return this;\n    }\n\n    normalize() {\n        Vec2Func.normalize(this, this);\n        return this;\n    }\n\n    dot(v) {\n        return Vec2Func.dot(this, v);\n    }\n\n    equals(v) {\n        return Vec2Func.exactEquals(this, v);\n    }\n\n    applyMatrix3(mat3) {\n        Vec2Func.transformMat3(this, this, mat3);\n        return this;\n    }\n\n    applyMatrix4(mat4) {\n        Vec2Func.transformMat4(this, this, mat4);\n        return this;\n    }\n\n    lerp(v, a) {\n        Vec2Func.lerp(this, this, v, a);\n        return this;\n    }\n\n    clone() {\n        return new Vec2(this[0], this[1]);\n    }\n\n    fromArray(a, o = 0) {\n        this[0] = a[o];\n        this[1] = a[o + 1];\n        return this;\n    }\n\n    toArray(a = [], o = 0) {\n        a[o] = this[0];\n        a[o + 1] = this[1];\n        return a;\n    }\n}\n","import * as Vec4Func from './functions/Vec4Func.js';\n\nexport class Vec4 extends Array {\n    constructor(x = 0, y = x, z = x, w = x) {\n        super(x, y, z, w);\n        return this;\n    }\n\n    get x() {\n        return this[0];\n    }\n\n    get y() {\n        return this[1];\n    }\n\n    get z() {\n        return this[2];\n    }\n\n    get w() {\n        return this[3];\n    }\n\n    set x(v) {\n        this[0] = v;\n    }\n\n    set y(v) {\n        this[1] = v;\n    }\n\n    set z(v) {\n        this[2] = v;\n    }\n\n    set w(v) {\n        this[3] = v;\n    }\n\n    set(x, y = x, z = x, w = x) {\n        if (x.length) return this.copy(x);\n        Vec4Func.set(this, x, y, z, w);\n        return this;\n    }\n\n    copy(v) {\n        Vec4Func.copy(this, v);\n        return this;\n    }\n\n    normalize() {\n        Vec4Func.normalize(this, this);\n        return this;\n    }\n\n    multiply(v) {\n        Vec4Func.scale(this, this, v);\n        return this;\n    }\n\n    dot(v) {\n        return Vec4Func.dot(this, v);\n    }\n\n    fromArray(a, o = 0) {\n        this[0] = a[o];\n        this[1] = a[o + 1];\n        this[2] = a[o + 2];\n        this[3] = a[o + 3];\n        return this;\n    }\n\n    toArray(a = [], o = 0) {\n        a[o] = this[0];\n        a[o + 1] = this[1];\n        a[o + 2] = this[2];\n        a[o + 3] = this[3];\n        return a;\n    }\n}\n","import { Geometry } from '../core/Geometry.js';\n\nexport class Triangle extends Geometry {\n    constructor(gl, { attributes = {} } = {}) {\n        Object.assign(attributes, {\n            position: { size: 2, data: new Float32Array([-1, -1, 3, -1, -1, 3]) },\n            uv: { size: 2, data: new Float32Array([0, 0, 2, 0, 0, 2]) },\n        });\n\n        super(gl, attributes);\n    }\n}\n","import { Program } from '../core/Program.js';\nimport { Mesh } from '../core/Mesh.js';\nimport { RenderTarget } from '../core/RenderTarget.js';\nimport { Triangle } from './Triangle.js';\n\nexport class Post {\n    constructor(\n        gl,\n        {\n            width,\n            height,\n            dpr,\n            wrapS = gl.CLAMP_TO_EDGE,\n            wrapT = gl.CLAMP_TO_EDGE,\n            minFilter = gl.LINEAR,\n            magFilter = gl.LINEAR,\n            geometry = new Triangle(gl),\n            targetOnly = null,\n            depth = true,\n        } = {}\n    ) {\n        this.gl = gl;\n\n        this.passes = [];\n\n        this.geometry = geometry;\n\n        this.uniform = { value: null };\n        this.targetOnly = targetOnly;\n\n        if (dpr) this.dpr = dpr;\n        if (width) this.width = width;\n        if (height) this.height = height;\n\n        dpr = this.dpr || this.gl.renderer.dpr;\n        this.resolutionWidth = Math.floor(this.width || this.gl.renderer.width * dpr);\n        this.resolutionHeight = Math.floor(this.height || this.gl.renderer.height * dpr);\n\n        let options = {\n            dpr: this.dpr,\n            width: this.resolutionWidth,\n            height: this.resolutionHeight,\n            wrapS,\n            wrapT,\n            minFilter,\n            magFilter,\n            depth,\n        };\n\n        const fbo = (this.fbo = {\n            read: new RenderTarget(this.gl, options),\n            write: new RenderTarget(this.gl, options),\n            swap: () => {\n                let temp = fbo.read;\n                fbo.read = fbo.write;\n                fbo.write = temp;\n            },\n        });\n    }\n\n    addPass({ vertex = defaultVertex, fragment = defaultFragment, uniforms = {}, textureUniform = 'tMap', enabled = true } = {}) {\n        uniforms[textureUniform] = { value: this.fbo.read.texture };\n\n        const program = new Program(this.gl, { vertex, fragment, uniforms });\n        const mesh = new Mesh(this.gl, { geometry: this.geometry, program });\n\n        const pass = {\n            mesh,\n            program,\n            uniforms,\n            enabled,\n            textureUniform,\n        };\n\n        this.passes.push(pass);\n        return pass;\n    }\n\n    resize({ width, height, dpr } = {}) {\n        if (dpr) this.dpr = dpr;\n        if (width) this.width = width;\n        if (height) this.height = height;\n\n        dpr = this.dpr || this.gl.renderer.dpr;\n        this.resolutionWidth = Math.floor(this.width || this.gl.renderer.width * dpr);\n        this.resolutionHeight = Math.floor(this.height || this.gl.renderer.height * dpr);\n\n        this.fbo.read.setSize(this.resolutionWidth, this.resolutionHeight);\n        this.fbo.write.setSize(this.resolutionWidth, this.resolutionHeight);\n    }\n\n    // Uses same arguments as renderer.render, with addition of optional texture passed in to avoid scene render\n    render({ scene, camera, texture, target = null, update = true, sort = true, frustumCull = true, beforePostCallbacks }) {\n        const enabledPasses = this.passes.filter((pass) => pass.enabled);\n\n        if (!texture) {\n            this.gl.renderer.render({\n                scene,\n                camera,\n                target: enabledPasses.length || (!target && this.targetOnly) ? this.fbo.write : target,\n                update,\n                sort,\n                frustumCull,\n            });\n            this.fbo.swap();\n\n            // Callback after rendering scene, but before post effects\n            if (beforePostCallbacks) beforePostCallbacks.forEach((f) => f && f());\n        }\n\n        enabledPasses.forEach((pass, i) => {\n            pass.mesh.program.uniforms[pass.textureUniform].value = !i && texture ? texture : this.fbo.read.texture;\n            this.gl.renderer.render({\n                scene: pass.mesh,\n                target: i === enabledPasses.length - 1 && (target || !this.targetOnly) ? target : this.fbo.write,\n                clear: true,\n            });\n            this.fbo.swap();\n        });\n\n        this.uniform.value = this.fbo.read.texture;\n    }\n}\n\nconst defaultVertex = /* glsl */ `\n    attribute vec2 uv;\n    attribute vec2 position;\n\n    varying vec2 vUv;\n\n    void main() {\n        vUv = uv;\n        gl_Position = vec4(position, 0, 1);\n    }\n`;\n\nconst defaultFragment = /* glsl */ `\n    precision highp float;\n\n    uniform sampler2D tMap;\n    varying vec2 vUv;\n\n    void main() {\n        gl_FragColor = texture2D(tMap, vUv);\n    }\n`;\n","import { Program } from '../core/Program.js';\n\nconst vertex = /* glsl */ `\n    precision highp float;\n    precision highp int;\n\n    attribute vec3 position;\n    attribute vec3 normal;\n\n    uniform mat3 normalMatrix;\n    uniform mat4 modelViewMatrix;\n    uniform mat4 projectionMatrix;\n\n    varying vec3 vNormal;\n\n    void main() {\n        vNormal = normalize(normalMatrix * normal);\n        gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n    }\n`;\n\nconst fragment = /* glsl */ `\n    precision highp float;\n    precision highp int;\n\n    varying vec3 vNormal;\n\n    void main() {\n        gl_FragColor.rgb = normalize(vNormal);\n        gl_FragColor.a = 1.0;\n    }\n`;\n\nexport function NormalProgram(gl) {\n    return new Program(gl, {\n        vertex: vertex,\n        fragment: fragment,\n        cullFace: false,\n    });\n}\n","import { Vec3 } from '../math/Vec3.js';\nimport { Quat } from '../math/Quat.js';\n\nconst tmpVec3A = /* @__PURE__ */ new Vec3();\nconst tmpVec3B = /* @__PURE__ */ new Vec3();\nconst tmpVec3C = /* @__PURE__ */ new Vec3();\nconst tmpVec3D = /* @__PURE__ */ new Vec3();\n\nconst tmpQuatA = /* @__PURE__ */ new Quat();\nconst tmpQuatB = /* @__PURE__ */ new Quat();\nconst tmpQuatC = /* @__PURE__ */ new Quat();\nconst tmpQuatD = /* @__PURE__ */ new Quat();\n\nexport class GLTFAnimation {\n    constructor(data, weight = 1) {\n        this.data = data;\n        this.elapsed = 0;\n        this.weight = weight;\n\n        // Set to false to not apply modulo to elapsed against duration\n        this.loop = true;\n\n        // Find starting time as exports from blender (perhaps others too) don't always start from 0\n        this.startTime = data.reduce((a, { times }) => Math.min(a, times[0]), Infinity);\n        // Get largest final time in all channels to calculate duration\n        this.endTime = data.reduce((a, { times }) => Math.max(a, times[times.length - 1]), 0);\n        this.duration = this.endTime - this.startTime;\n    }\n\n    update(totalWeight = 1, isSet) {\n        const weight = isSet ? 1 : this.weight / totalWeight;\n        const elapsed = !this.duration\n            ? 0\n            : (this.loop ? this.elapsed % this.duration : Math.min(this.elapsed, this.duration - 0.001)) + this.startTime;\n\n        this.data.forEach(({ node, transform, interpolation, times, values }) => {\n            if (!this.duration) {\n                let val = tmpVec3A;\n                let size = 3;\n                if (transform === 'quaternion') {\n                    val = tmpQuatA;\n                    size = 4;\n                }\n                val.fromArray(values, 0);\n                if (size === 4) node[transform].slerp(val, weight);\n                else node[transform].lerp(val, weight);\n                return;\n            }\n\n            // Get index of two time values elapsed is between\n            const prevIndex =\n                Math.max(\n                    1,\n                    times.findIndex((t) => t > elapsed)\n                ) - 1;\n            const nextIndex = prevIndex + 1;\n\n            // Get linear blend/alpha between the two\n            let alpha = (elapsed - times[prevIndex]) / (times[nextIndex] - times[prevIndex]);\n            if (interpolation === 'STEP') alpha = 0;\n\n            let prevVal = tmpVec3A;\n            let prevTan = tmpVec3B;\n            let nextTan = tmpVec3C;\n            let nextVal = tmpVec3D;\n            let size = 3;\n\n            if (transform === 'quaternion') {\n                prevVal = tmpQuatA;\n                prevTan = tmpQuatB;\n                nextTan = tmpQuatC;\n                nextVal = tmpQuatD;\n                size = 4;\n            }\n\n            if (interpolation === 'CUBICSPLINE') {\n                // Get the prev and next values from the indices\n                prevVal.fromArray(values, prevIndex * size * 3 + size * 1);\n                prevTan.fromArray(values, prevIndex * size * 3 + size * 2);\n                nextTan.fromArray(values, nextIndex * size * 3 + size * 0);\n                nextVal.fromArray(values, nextIndex * size * 3 + size * 1);\n\n                // interpolate for final value\n                prevVal = this.cubicSplineInterpolate(alpha, prevVal, prevTan, nextTan, nextVal);\n                if (size === 4) prevVal.normalize();\n            } else {\n                // Get the prev and next values from the indices\n                prevVal.fromArray(values, prevIndex * size);\n                nextVal.fromArray(values, nextIndex * size);\n\n                // interpolate for final value\n                if (size === 4) prevVal.slerp(nextVal, alpha);\n                else prevVal.lerp(nextVal, alpha);\n            }\n\n            // interpolate between multiple possible animations\n            if (size === 4) node[transform].slerp(prevVal, weight);\n            else node[transform].lerp(prevVal, weight);\n        });\n    }\n\n    cubicSplineInterpolate(t, prevVal, prevTan, nextTan, nextVal) {\n        const t2 = t * t;\n        const t3 = t2 * t;\n\n        const s2 = 3 * t2 - 2 * t3;\n        const s3 = t3 - t2;\n        const s0 = 1 - s2;\n        const s1 = s3 - t2 + t;\n\n        for (let i = 0; i < prevVal.length; i++) {\n            prevVal[i] = s0 * prevVal[i] + s1 * (1 - t) * prevTan[i] + s2 * nextVal[i] + s3 * t * nextTan[i];\n        }\n\n        return prevVal;\n    }\n}\n","import { Mesh } from '../core/Mesh.js';\nimport { Mat4 } from '../math/Mat4.js';\nimport { Texture } from '../core/Texture.js';\n\nconst tempMat4 = /* @__PURE__ */ new Mat4();\nconst identity = /* @__PURE__ */ new Mat4();\n\nexport class GLTFSkin extends Mesh {\n    constructor(gl, { skeleton, geometry, program, mode = gl.TRIANGLES } = {}) {\n        super(gl, { geometry, program, mode });\n        this.skeleton = skeleton;\n        this.program = program;\n        this.createBoneTexture();\n    }\n\n    createBoneTexture() {\n        if (!this.skeleton.joints.length) return;\n        const size = Math.max(4, Math.pow(2, Math.ceil(Math.log(Math.sqrt(this.skeleton.joints.length * 4)) / Math.LN2)));\n        this.boneMatrices = new Float32Array(size * size * 4);\n        this.boneTextureSize = size;\n        this.boneTexture = new Texture(this.gl, {\n            image: this.boneMatrices,\n            generateMipmaps: false,\n            type: this.gl.FLOAT,\n            internalFormat: this.gl.renderer.isWebgl2 ? this.gl.RGBA32F : this.gl.RGBA,\n            minFilter: this.gl.NEAREST,\n            magFilter: this.gl.NEAREST,\n            flipY: false,\n            width: size,\n        });\n    }\n\n    updateUniforms() {\n        // Update bone texture\n        this.skeleton.joints.forEach((bone, i) => {\n            // Find difference between current and bind pose\n            tempMat4.multiply(bone.worldMatrix, bone.bindInverse);\n            this.boneMatrices.set(tempMat4, i * 16);\n        });\n        this.boneTexture.needsUpdate = true;\n        // Reset for programs shared between multiple skins\n        this.program.uniforms.boneTexture.value = this.boneTexture;\n        this.program.uniforms.boneTextureSize.value = this.boneTextureSize;\n    }\n\n    draw({ camera } = {}) {\n        if (!this.program.uniforms.boneTexture) {\n            Object.assign(this.program.uniforms, {\n                boneTexture: { value: this.boneTexture },\n                boneTextureSize: { value: this.boneTextureSize },\n            });\n        }\n\n        this.updateUniforms();\n\n        // Switch the world matrix with identity to ignore any transforms\n        // on the mesh itself - only use skeleton's transforms\n        const _worldMatrix = this.worldMatrix;\n        this.worldMatrix = identity;\n\n        super.draw({ camera });\n\n        // Switch back to leave identity untouched\n        this.worldMatrix = _worldMatrix;\n    }\n}\n","import { Transform } from '../core/Transform.js';\nimport { Mesh } from '../core/Mesh.js';\nimport { Vec4 } from '../math/Vec4.js';\n\nexport class InstancedMesh extends Mesh {\n    constructor(...args) {\n        super(...args);\n\n        // Skip renderer frustum culling\n        this.frustumCulled = false;\n        this.isInstancedMesh = true;\n    }\n\n    addFrustumCull() {\n        this.instanceTransforms = null;\n        this.instanceLightmapScaleOffset = null;\n        this.totalInstanceCount = 0;\n        this.frustumCullFunction = null;\n        this.instanceRenderList = null;\n\n        // Get instanced mesh\n        if (!this.geometry.attributes.instanceMatrix)\n            console.error(`mesh ${this.name ? `\"${this.name}\" ` : ``}missing instanceMatrix attribute; unable to frustum cull`);\n\n        // Make list of transforms from instanceMatrix\n        const matrixData = this.geometry.attributes.instanceMatrix.data;\n        this.instanceTransforms = [];\n        for (let i = 0, j = 0; i < matrixData.length; i += 16, j++) {\n            const transform = new Transform();\n            transform.index = j;\n            transform.matrix.fromArray(matrixData, i);\n            transform.decompose();\n            this.instanceTransforms.push(transform);\n            // Add transforms to parent to update world matrices\n            transform.setParent(this.parent);\n        }\n        this.totalInstanceCount = this.instanceTransforms.length;\n\n        // Check for lightmap attributes - attach to transform\n        if (!!this.geometry.attributes.lightmapScaleOffset) {\n            const lightmapData = this.geometry.attributes.lightmapScaleOffset.data;\n            for (let i = 0, j = 0; i < lightmapData.length; i += 4, j++) {\n                this.instanceTransforms[j].lightmapData = new Vec4().fromArray(lightmapData, i);\n            }\n        }\n\n        this.frustumCullFunction = ({ camera }) => {\n            // frustum cull transforms each frame - pass world matrix\n            this.instanceRenderList = [];\n            this.instanceTransforms.forEach((transform) => {\n                if (!camera.frustumIntersectsMesh(this, transform.worldMatrix)) return;\n                this.instanceRenderList.push(transform);\n            });\n\n            // update instanceMatrix and instancedCount with visible\n            this.instanceRenderList.forEach((transform, i) => {\n                transform.matrix.toArray(this.geometry.attributes.instanceMatrix.data, i * 16);\n\n                // Update lightmap attr\n                if (transform.lightmapData) {\n                    transform.lightmapData.toArray(this.geometry.attributes.lightmapScaleOffset.data, i * 4);\n                    this.geometry.attributes.lightmapScaleOffset.needsUpdate = true;\n                }\n            });\n            this.geometry.instancedCount = this.instanceRenderList.length;\n            this.geometry.attributes.instanceMatrix.needsUpdate = true;\n        };\n\n        this.onBeforeRender(this.frustumCullFunction);\n    }\n\n    removeFrustumCull() {\n        this.offBeforeRender(this.frustumCullFunction);\n        this.geometry.instancedCount = this.totalInstanceCount;\n        this.instanceTransforms.forEach((transform, i) => {\n            transform.matrix.toArray(this.geometry.attributes.instanceMatrix.data, i * 16);\n\n            // Update lightmap attr\n            if (transform.lightmapData) {\n                transform.lightmapData.toArray(this.geometry.attributes.lightmapScaleOffset.data, i * 4);\n                this.geometry.attributes.lightmapScaleOffset.needsUpdate = true;\n            }\n        });\n        this.geometry.attributes.instanceMatrix.needsUpdate = true;\n    }\n}\n","import { Geometry } from '../core/Geometry.js';\nimport { Transform } from '../core/Transform.js';\nimport { Texture } from '../core/Texture.js';\nimport { Mesh } from '../core/Mesh.js';\nimport { Camera } from '../core/Camera.js';\nimport { GLTFAnimation } from './GLTFAnimation.js';\nimport { GLTFSkin } from './GLTFSkin.js';\nimport { Mat4 } from '../math/Mat4.js';\nimport { Vec3 } from '../math/Vec3.js';\nimport { NormalProgram } from './NormalProgram.js';\nimport { InstancedMesh } from './InstancedMesh.js';\n\n// TODO\n// [ ] Morph Targets\n// [ ] Materials\n// [ ] Sparse accessor packing? For morph targets basically\n// [ ] option to turn off GPU instancing ?\n// [ ] Spot lights\n\nconst TYPE_ARRAY = {\n    5121: Uint8Array,\n    5122: Int16Array,\n    5123: Uint16Array,\n    5125: Uint32Array,\n    5126: Float32Array,\n    'image/jpeg': Uint8Array,\n    'image/png': Uint8Array,\n};\n\nconst TYPE_SIZE = {\n    SCALAR: 1,\n    VEC2: 2,\n    VEC3: 3,\n    VEC4: 4,\n    MAT2: 4,\n    MAT3: 9,\n    MAT4: 16,\n};\n\nconst ATTRIBUTES = {\n    POSITION: 'position',\n    NORMAL: 'normal',\n    TANGENT: 'tangent',\n    TEXCOORD_0: 'uv',\n    TEXCOORD_1: 'uv2',\n    COLOR_0: 'color',\n    WEIGHTS_0: 'skinWeight',\n    JOINTS_0: 'skinIndex',\n};\n\nconst TRANSFORMS = {\n    translation: 'position',\n    rotation: 'quaternion',\n    scale: 'scale',\n};\n\nexport class GLTFLoader {\n    static setBasisManager(manager) {\n        this.basisManager = manager;\n    }\n\n    static async load(gl, src) {\n        const dir = src.split('/').slice(0, -1).join('/') + '/';\n\n        // load main description json\n        const desc = await this.parseDesc(src);\n\n        return this.parse(gl, desc, dir);\n    }\n\n    static async parse(gl, desc, dir) {\n        if (desc.asset === undefined || desc.asset.version[0] < 2) console.warn('Only GLTF >=2.0 supported. Attempting to parse.');\n\n        if (desc.extensionsRequired?.includes('KHR_texture_basisu') && !this.basisManager)\n            console.warn('KHR_texture_basisu extension required but no manager supplied. Use .setBasisManager()');\n\n        // Load buffers async\n        const buffers = await this.loadBuffers(desc, dir);\n\n        // Unbind current VAO so that new buffers don't get added to active mesh\n        gl.renderer.bindVertexArray(null);\n\n        // Create gl buffers from bufferViews\n        const bufferViews = this.parseBufferViews(gl, desc, buffers);\n\n        // Create images from either bufferViews or separate image files\n        const images = await this.parseImages(gl, desc, dir, bufferViews);\n\n        const textures = this.parseTextures(gl, desc, images);\n\n        // Just pass through material data for now\n        const materials = this.parseMaterials(gl, desc, textures);\n\n        // Fetch the inverse bind matrices for skeleton joints\n        const skins = this.parseSkins(gl, desc, bufferViews);\n\n        // Create geometries for each mesh primitive\n        const meshes = this.parseMeshes(gl, desc, bufferViews, materials, skins);\n\n        // Create transforms, meshes and hierarchy\n        const [nodes, cameras] = this.parseNodes(gl, desc, meshes, skins, images);\n\n        // Place nodes in skeletons\n        this.populateSkins(skins, nodes);\n\n        // Create animation handlers\n        const animations = this.parseAnimations(gl, desc, nodes, bufferViews);\n\n        // Get top level nodes for each scene\n        const scenes = this.parseScenes(desc, nodes);\n        const scene = scenes[desc.scene];\n\n        // Create uniforms for scene lights (TODO: light linking?)\n        const lights = this.parseLights(gl, desc, nodes, scenes);\n\n        // Remove null nodes (instanced transforms)\n        for (let i = nodes.length; i >= 0; i--) if (!nodes[i]) nodes.splice(i, 1);\n\n        return {\n            json: desc,\n            buffers,\n            bufferViews,\n            cameras,\n            images,\n            textures,\n            materials,\n            meshes,\n            nodes,\n            lights,\n            animations,\n            scenes,\n            scene,\n        };\n    }\n\n    static parseDesc(src) {\n        if (!src.match(/\\.glb/)) {\n            return fetch(src).then((res) => res.json());\n        } else {\n            return fetch(src)\n                .then((res) => res.arrayBuffer())\n                .then((glb) => this.unpackGLB(glb));\n        }\n    }\n\n    // From https://github.com/donmccurdy/glTF-Transform/blob/e4108cc/packages/core/src/io/io.ts#L32\n    static unpackGLB(glb) {\n        // Decode and verify GLB header.\n        const header = new Uint32Array(glb, 0, 3);\n        if (header[0] !== 0x46546c67) {\n            throw new Error('Invalid glTF asset.');\n        } else if (header[1] !== 2) {\n            throw new Error(`Unsupported glTF binary version, \"${header[1]}\".`);\n        }\n        // Decode and verify chunk headers.\n        const jsonChunkHeader = new Uint32Array(glb, 12, 2);\n        const jsonByteOffset = 20;\n        const jsonByteLength = jsonChunkHeader[0];\n        if (jsonChunkHeader[1] !== 0x4e4f534a) {\n            throw new Error('Unexpected GLB layout.');\n        }\n\n        // Decode JSON.\n        const jsonText = new TextDecoder().decode(glb.slice(jsonByteOffset, jsonByteOffset + jsonByteLength));\n        const json = JSON.parse(jsonText);\n        // JSON only\n        if (jsonByteOffset + jsonByteLength === glb.byteLength) return json;\n\n        const binaryChunkHeader = new Uint32Array(glb, jsonByteOffset + jsonByteLength, 2);\n        if (binaryChunkHeader[1] !== 0x004e4942) {\n            throw new Error('Unexpected GLB layout.');\n        }\n        // Decode content.\n        const binaryByteOffset = jsonByteOffset + jsonByteLength + 8;\n        const binaryByteLength = binaryChunkHeader[0];\n        const binary = glb.slice(binaryByteOffset, binaryByteOffset + binaryByteLength);\n        // Attach binary to buffer\n        json.buffers[0].binary = binary;\n        return json;\n    }\n\n    // Threejs GLTF Loader https://github.com/mrdoob/three.js/blob/master/examples/js/loaders/GLTFLoader.js#L1085\n    static resolveURI(uri, dir) {\n        // Invalid URI\n        if (typeof uri !== 'string' || uri === '') return '';\n\n        // Host Relative URI\n        if (/^https?:\\/\\//i.test(dir) && /^\\//.test(uri)) {\n            dir = dir.replace(/(^https?:\\/\\/[^\\/]+).*/i, '$1');\n        }\n\n        // Absolute URI http://, https://, //\n        if (/^(https?:)?\\/\\//i.test(uri)) return uri;\n\n        // Data URI\n        if (/^data:.*,.*$/i.test(uri)) return uri;\n\n        // Blob URI\n        if (/^blob:.*$/i.test(uri)) return uri;\n\n        // Relative URI\n        return dir + uri;\n    }\n\n    static loadBuffers(desc, dir) {\n        if (!desc.buffers) return null;\n        return Promise.all(\n            desc.buffers.map((buffer) => {\n                // For GLB, binary buffer ready to go\n                if (buffer.binary) return buffer.binary;\n                const uri = this.resolveURI(buffer.uri, dir);\n                return fetch(uri).then((res) => res.arrayBuffer());\n            })\n        );\n    }\n\n    static parseBufferViews(gl, desc, buffers) {\n        if (!desc.bufferViews) return null;\n        // Clone to leave description pure\n        const bufferViews = desc.bufferViews.map((o) => Object.assign({}, o));\n\n        desc.meshes &&\n            desc.meshes.forEach(({ primitives }) => {\n                primitives.forEach(({ attributes, indices }) => {\n                    // Flag bufferView as an attribute, so it knows to create a gl buffer\n                    for (let attr in attributes) bufferViews[desc.accessors[attributes[attr]].bufferView].isAttribute = true;\n\n                    if (indices === undefined) return;\n                    bufferViews[desc.accessors[indices].bufferView].isAttribute = true;\n\n                    // Make sure indices bufferView have a target property for gl buffer binding\n                    bufferViews[desc.accessors[indices].bufferView].target = gl.ELEMENT_ARRAY_BUFFER;\n                });\n            });\n\n        // Get componentType of each bufferView from the accessors\n        desc.accessors.forEach(({ bufferView: i, componentType }) => {\n            bufferViews[i].componentType = componentType;\n        });\n\n        // Get mimetype of bufferView from images\n        desc.images &&\n            desc.images.forEach(({ uri, bufferView: i, mimeType }) => {\n                if (i === undefined) return;\n                bufferViews[i].mimeType = mimeType;\n            });\n\n        // Push each bufferView to the GPU as a separate buffer\n        bufferViews.forEach(\n            (\n                {\n                    buffer: bufferIndex, // required\n                    byteOffset = 0, // optional\n                    byteLength, // required\n                    byteStride, // optional\n                    target = gl.ARRAY_BUFFER, // optional, added above for elements\n                    name, // optional\n                    extensions, // optional\n                    extras, // optional\n\n                    componentType, // optional, added from accessor above\n                    mimeType, // optional, added from images above\n                    isAttribute,\n                },\n                i\n            ) => {\n                bufferViews[i].data = buffers[bufferIndex].slice(byteOffset, byteOffset + byteLength);\n\n                if (!isAttribute) return;\n                // Create gl buffers for the bufferView, pushing it to the GPU\n                const buffer = gl.createBuffer();\n                gl.bindBuffer(target, buffer);\n                gl.renderer.state.boundBuffer = buffer;\n                gl.bufferData(target, bufferViews[i].data, gl.STATIC_DRAW);\n                bufferViews[i].buffer = buffer;\n            }\n        );\n\n        return bufferViews;\n    }\n\n    static parseImages(gl, desc, dir, bufferViews) {\n        if (!desc.images) return null;\n        return Promise.all(\n            desc.images.map(async ({ uri, bufferView: bufferViewIndex, mimeType, name }) => {\n                if (mimeType === 'image/ktx2') {\n                    const { data } = bufferViews[bufferViewIndex];\n                    const image = await this.basisManager.parseTexture(data);\n                    return image;\n                }\n\n                // jpg / png\n                const image = new Image();\n                image.name = name;\n                if (uri) {\n                    image.src = this.resolveURI(uri, dir);\n                } else if (bufferViewIndex !== undefined) {\n                    const { data } = bufferViews[bufferViewIndex];\n                    const blob = new Blob([data], { type: mimeType });\n                    image.src = URL.createObjectURL(blob);\n                }\n                image.ready = new Promise((res) => {\n                    image.onload = () => res();\n                });\n                return image;\n            })\n        );\n    }\n\n    static parseTextures(gl, desc, images) {\n        if (!desc.textures) return null;\n        return desc.textures.map((textureInfo) => this.createTexture(gl, desc, images, textureInfo));\n    }\n\n    static createTexture(gl, desc, images, { sampler: samplerIndex, source: sourceIndex, name, extensions, extras }) {\n        if (sourceIndex === undefined && !!extensions) {\n            // Basis extension source index\n            if (extensions.KHR_texture_basisu) sourceIndex = extensions.KHR_texture_basisu.source;\n        }\n\n        const image = images[sourceIndex];\n        if (image.texture) return image.texture;\n\n        const options = {\n            flipY: false,\n            wrapS: gl.REPEAT, // Repeat by default, opposed to OGL's clamp by default\n            wrapT: gl.REPEAT,\n        };\n        const sampler = samplerIndex !== undefined ? desc.samplers[samplerIndex] : null;\n        if (sampler) {\n            ['magFilter', 'minFilter', 'wrapS', 'wrapT'].forEach((prop) => {\n                if (sampler[prop]) options[prop] = sampler[prop];\n            });\n        }\n\n        // For compressed textures\n        if (image.isBasis) {\n            options.image = image;\n            options.internalFormat = image.internalFormat;\n            if (image.isCompressedTexture) {\n                options.generateMipmaps = false;\n                if (image.length > 1) this.minFilter = gl.NEAREST_MIPMAP_LINEAR;\n            }\n            const texture = new Texture(gl, options);\n            texture.name = name;\n            image.texture = texture;\n            return texture;\n        }\n\n        const texture = new Texture(gl, options);\n        texture.name = name;\n        image.texture = texture;\n        image.ready.then(() => {\n            texture.image = image;\n        });\n\n        return texture;\n    }\n\n    static parseMaterials(gl, desc, textures) {\n        if (!desc.materials) return null;\n        return desc.materials.map(\n            ({\n                name,\n                extensions,\n                extras,\n                pbrMetallicRoughness = {},\n                normalTexture,\n                occlusionTexture,\n                emissiveTexture,\n                emissiveFactor = [0, 0, 0],\n                alphaMode = 'OPAQUE',\n                alphaCutoff = 0.5,\n                doubleSided = false,\n            }) => {\n                const {\n                    baseColorFactor = [1, 1, 1, 1],\n                    baseColorTexture,\n                    metallicFactor = 1,\n                    roughnessFactor = 1,\n                    metallicRoughnessTexture,\n                    //   extensions,\n                    //   extras,\n                } = pbrMetallicRoughness;\n\n                if (baseColorTexture) {\n                    baseColorTexture.texture = textures[baseColorTexture.index];\n                    // texCoord\n                }\n                if (normalTexture) {\n                    normalTexture.texture = textures[normalTexture.index];\n                    // scale: 1\n                    // texCoord\n                }\n                if (metallicRoughnessTexture) {\n                    metallicRoughnessTexture.texture = textures[metallicRoughnessTexture.index];\n                    // texCoord\n                }\n                if (occlusionTexture) {\n                    occlusionTexture.texture = textures[occlusionTexture.index];\n                    // strength 1\n                    // texCoord\n                }\n                if (emissiveTexture) {\n                    emissiveTexture.texture = textures[emissiveTexture.index];\n                    // texCoord\n                }\n\n                return {\n                    name,\n                    extensions,\n                    extras,\n                    baseColorFactor,\n                    baseColorTexture,\n                    metallicFactor,\n                    roughnessFactor,\n                    metallicRoughnessTexture,\n                    normalTexture,\n                    occlusionTexture,\n                    emissiveTexture,\n                    emissiveFactor,\n                    alphaMode,\n                    alphaCutoff,\n                    doubleSided,\n                };\n            }\n        );\n    }\n\n    static parseSkins(gl, desc, bufferViews) {\n        if (!desc.skins) return null;\n        return desc.skins.map(\n            ({\n                inverseBindMatrices, // optional\n                skeleton, // optional\n                joints, // required\n                // name,\n                // extensions,\n                // extras,\n            }) => {\n                return {\n                    inverseBindMatrices: this.parseAccessor(inverseBindMatrices, desc, bufferViews),\n                    skeleton,\n                    joints,\n                };\n            }\n        );\n    }\n\n    static parseMeshes(gl, desc, bufferViews, materials, skins) {\n        if (!desc.meshes) return null;\n        return desc.meshes.map(\n            (\n                {\n                    primitives, // required\n                    weights, // optional\n                    name, // optional\n                    extensions, // optional\n                    extras = {}, // optional - will get merged with node extras\n                },\n                meshIndex\n            ) => {\n                // TODO: weights stuff ?\n                // Parse through nodes to see how many instances there are\n                // and if there is a skin attached\n                // If multiple instances of a skin, need to create each\n                let numInstances = 0;\n                let skinIndices = [];\n                let isLightmap = false;\n                desc.nodes &&\n                    desc.nodes.forEach(({ mesh, skin, extras }) => {\n                        if (mesh === meshIndex) {\n                            numInstances++;\n                            if (skin !== undefined) skinIndices.push(skin);\n                            if (extras && extras.lightmap_scale_offset) isLightmap = true;\n                        }\n                    });\n                let isSkin = !!skinIndices.length;\n\n                // For skins, return array of skin meshes to account for multiple instances\n                if (isSkin) {\n                    primitives = skinIndices.map((skinIndex) => {\n                        return this.parsePrimitives(gl, primitives, desc, bufferViews, materials, 1, isLightmap).map(\n                            ({ geometry, program, mode }) => {\n                                const mesh = new GLTFSkin(gl, { skeleton: skins[skinIndex], geometry, program, mode });\n                                mesh.name = name;\n                                mesh.extras = extras;\n                                if (extensions) mesh.extensions = extensions;\n                                // TODO: support skin frustum culling\n                                mesh.frustumCulled = false;\n                                return mesh;\n                            }\n                        );\n                    });\n                    // For retrieval to add to node\n                    primitives.instanceCount = 0;\n                    primitives.numInstances = numInstances;\n                } else {\n                    primitives = this.parsePrimitives(gl, primitives, desc, bufferViews, materials, numInstances, isLightmap).map(\n                        ({ geometry, program, mode }) => {\n                            // InstancedMesh class has custom frustum culling for instances\n                            const meshConstructor = geometry.attributes.instanceMatrix ? InstancedMesh : Mesh;\n                            const mesh = new meshConstructor(gl, { geometry, program, mode });\n                            mesh.name = name;\n                            mesh.extras = extras;\n                            if (extensions) mesh.extensions = extensions;\n                            // Tag mesh so that nodes can add their transforms to the instance attribute\n                            mesh.numInstances = numInstances;\n                            return mesh;\n                        }\n                    );\n                }\n\n                return {\n                    primitives,\n                    weights,\n                    name,\n                };\n            }\n        );\n    }\n\n    static parsePrimitives(gl, primitives, desc, bufferViews, materials, numInstances, isLightmap) {\n        return primitives.map(\n            ({\n                attributes, // required\n                indices, // optional\n                material: materialIndex, // optional\n                mode = 4, // optional\n                targets, // optional\n                extensions, // optional\n                extras, // optional\n            }) => {\n                // TODO: materials\n                const program = new NormalProgram(gl);\n                if (materialIndex !== undefined) {\n                    program.gltfMaterial = materials[materialIndex];\n                }\n\n                const geometry = new Geometry(gl);\n                if (extras) geometry.extras = extras;\n                if (extensions) geometry.extensions = extensions;\n\n                // Add each attribute found in primitive\n                for (let attr in attributes) {\n                    geometry.addAttribute(ATTRIBUTES[attr], this.parseAccessor(attributes[attr], desc, bufferViews));\n                }\n\n                // Add index attribute if found\n                if (indices !== undefined) {\n                    geometry.addAttribute('index', this.parseAccessor(indices, desc, bufferViews));\n                }\n\n                // Add instanced transform attribute if multiple instances\n                // Ignore if skin as we don't support instanced skins out of the box\n                if (numInstances > 1) {\n                    geometry.addAttribute('instanceMatrix', {\n                        instanced: 1,\n                        size: 16,\n                        data: new Float32Array(numInstances * 16),\n                    });\n                }\n\n                // Always supply lightmapScaleOffset as an instanced attribute\n                // Instanced skin lightmaps not supported\n                if (isLightmap) {\n                    geometry.addAttribute('lightmapScaleOffset', {\n                        instanced: 1,\n                        size: 4,\n                        data: new Float32Array(numInstances * 4),\n                    });\n                }\n\n                return {\n                    geometry,\n                    program,\n                    mode,\n                };\n            }\n        );\n    }\n\n    static parseAccessor(index, desc, bufferViews) {\n        // TODO: init missing bufferView with 0s\n        // TODO: support sparse\n\n        const {\n            bufferView: bufferViewIndex, // optional\n            byteOffset = 0, // optional\n            componentType, // required\n            normalized = false, // optional\n            count, // required\n            type, // required\n            min, // optional\n            max, // optional\n            sparse, // optional\n            // name, // optional\n            // extensions, // optional\n            // extras, // optional\n        } = desc.accessors[index];\n\n        const {\n            data, // attached in parseBufferViews\n            buffer, // replaced to be the actual GL buffer\n            byteOffset: bufferByteOffset = 0,\n            // byteLength, // applied in parseBufferViews\n            byteStride = 0,\n            target,\n            // name,\n            // extensions,\n            // extras,\n        } = bufferViews[bufferViewIndex];\n\n        const size = TYPE_SIZE[type];\n\n        // Parse data from joined buffers\n        const TypeArray = TYPE_ARRAY[componentType];\n        const elementBytes = TypeArray.BYTES_PER_ELEMENT;\n        const componentStride = byteStride / elementBytes;\n        const isInterleaved = !!byteStride && componentStride !== size;\n\n        let filteredData;\n\n        // Convert data to typed array for various uses (bounding boxes, raycasting, animation, merging etc)\n        if (isInterleaved) {\n            // First convert entire buffer to type\n            const typedData = new TypeArray(data, byteOffset);\n            // TODO: add length to not copy entire buffer if can help it\n            // const typedData = new TypeArray(data, byteOffset, (count - 1) * componentStride)\n\n            // Create output with length\n            filteredData = new TypeArray(count * size);\n\n            // Add element by element\n            for (let i = 0; i < count; i++) {\n                const start = componentStride * i;\n                const end = start + size;\n                filteredData.set(typedData.slice(start, end), i * size);\n            }\n        } else {\n            // Simply a slice\n            filteredData = new TypeArray(data, byteOffset, count * size);\n        }\n\n        // Return attribute data\n        return {\n            data: filteredData,\n            size,\n            type: componentType,\n            normalized,\n            buffer,\n            stride: byteStride,\n            offset: byteOffset,\n            count,\n            min,\n            max,\n        };\n    }\n\n    static parseNodes(gl, desc, meshes, skins, images) {\n        if (!desc.nodes) return null;\n        const cameras = [];\n        const nodes = desc.nodes.map(\n            ({\n                camera, // optional\n                children, // optional\n                skin: skinIndex, // optional\n                matrix, // optional\n                mesh: meshIndex, // optional\n                rotation, // optional\n                scale, // optional\n                translation, // optional\n                weights, // optional\n                name, // optional\n                extensions, // optional\n                extras, // optional\n            }) => {\n                const isCamera = camera !== undefined;\n\n                const node = isCamera ? new Camera(gl) : new Transform();\n\n                if (isCamera) {\n                    // ?NOTE: chose to use node's name and extras/extensions over camera.\n                    const cameraOpts = desc.cameras[camera];\n                    if (cameraOpts.type === 'perspective') {\n                        const { yfov: fov, znear: near, zfar: far } = cameraOpts.perspective;\n                        node.perspective({ fov: fov * (180 / Math.PI), near, far });\n                    } else {\n                        const { xmag, ymag, znear: near, zfar: far } = cameraOpts.orthographic;\n                        node.orthographic({ near, far, left: -xmag, right: xmag, top: -ymag, bottom: ymag });\n                    }\n                    cameras.push(node);\n                }\n\n                if (name) node.name = name;\n                if (extras) node.extras = extras;\n                if (extensions) node.extensions = extensions;\n\n                // Need to attach to node as may have same material but different lightmap\n                if (extras && extras.lightmapTexture !== undefined) {\n                    extras.lightmapTexture.texture = this.createTexture(gl, desc, images, { source: extras.lightmapTexture.index });\n                }\n\n                // Apply transformations\n                if (matrix) {\n                    node.matrix.copy(matrix);\n                    node.decompose();\n                } else {\n                    if (rotation) node.quaternion.copy(rotation);\n                    if (scale) node.scale.copy(scale);\n                    if (translation) node.position.copy(translation);\n                    node.updateMatrix();\n                }\n\n                // Flags for avoiding duplicate transforms and removing unused instance nodes\n                let isInstanced = false;\n                let isFirstInstance = true;\n                let isInstancedMatrix = false;\n                let isSkin = skinIndex !== undefined;\n\n                // add mesh if included\n                if (meshIndex !== undefined) {\n                    if (isSkin) {\n                        meshes[meshIndex].primitives[meshes[meshIndex].primitives.instanceCount].forEach((mesh) => {\n                            if (extras) Object.assign(mesh.extras, extras);\n                            mesh.setParent(node);\n                        });\n                        meshes[meshIndex].primitives.instanceCount++;\n                        // Remove properties once all instances added\n                        if (meshes[meshIndex].primitives.instanceCount === meshes[meshIndex].primitives.numInstances) {\n                            delete meshes[meshIndex].primitives.numInstances;\n                            delete meshes[meshIndex].primitives.instanceCount;\n                        }\n                    } else {\n                        meshes[meshIndex].primitives.forEach((mesh) => {\n                            if (extras) Object.assign(mesh.extras, extras);\n\n                            // instanced mesh might only have 1\n                            if (mesh.geometry.isInstanced) {\n                                isInstanced = true;\n                                if (!mesh.instanceCount) {\n                                    mesh.instanceCount = 0;\n                                } else {\n                                    isFirstInstance = false;\n                                }\n                                if (mesh.geometry.attributes.instanceMatrix) {\n                                    isInstancedMatrix = true;\n                                    node.matrix.toArray(mesh.geometry.attributes.instanceMatrix.data, mesh.instanceCount * 16);\n                                }\n\n                                if (mesh.geometry.attributes.lightmapScaleOffset) {\n                                    mesh.geometry.attributes.lightmapScaleOffset.data.set(extras.lightmap_scale_offset, mesh.instanceCount * 4);\n                                }\n\n                                mesh.instanceCount++;\n\n                                if (mesh.instanceCount === mesh.numInstances) {\n                                    // Remove properties once all instances added\n                                    delete mesh.numInstances;\n                                    delete mesh.instanceCount;\n                                    // Flag attribute as dirty\n                                    if (mesh.geometry.attributes.instanceMatrix) {\n                                        mesh.geometry.attributes.instanceMatrix.needsUpdate = true;\n                                    }\n                                    if (mesh.geometry.attributes.lightmapScaleOffset) {\n                                        mesh.geometry.attributes.lightmapScaleOffset.needsUpdate = true;\n                                    }\n                                }\n                            }\n\n                            // For instances, only the first node will actually have the mesh\n                            if (isInstanced) {\n                                if (isFirstInstance) mesh.setParent(node);\n                            } else {\n                                mesh.setParent(node);\n                            }\n                        });\n                    }\n                }\n\n                // Reset node if instanced to not duplicate transforms\n                if (isInstancedMatrix) {\n                    // Remove unused nodes just providing an instance transform\n                    if (!isFirstInstance) return null;\n                    // Avoid duplicate transform for node containing the instanced mesh\n                    node.matrix.identity();\n                    node.decompose();\n                }\n\n                return node;\n            }\n        );\n\n        desc.nodes.forEach(({ children = [] }, i) => {\n            // Set hierarchy now all nodes created\n            children.forEach((childIndex) => {\n                if (!nodes[childIndex]) return;\n                nodes[childIndex].setParent(nodes[i]);\n            });\n        });\n\n        // Add frustum culling for instances now that instanceMatrix attribute is populated\n        meshes.forEach(({ primitives }, i) => {\n            primitives.forEach((primitive, i) => {\n                if (primitive.isInstancedMesh) primitive.addFrustumCull();\n            });\n        });\n\n        return [nodes, cameras];\n    }\n\n    static populateSkins(skins, nodes) {\n        if (!skins) return;\n        skins.forEach((skin) => {\n            skin.joints = skin.joints.map((i, index) => {\n                const joint = nodes[i];\n                joint.skin = skin;\n                joint.bindInverse = new Mat4(...skin.inverseBindMatrices.data.slice(index * 16, (index + 1) * 16));\n                return joint;\n            });\n            if (skin.skeleton) skin.skeleton = nodes[skin.skeleton];\n        });\n    }\n\n    static parseAnimations(gl, desc, nodes, bufferViews) {\n        if (!desc.animations) return null;\n        return desc.animations.map(\n            (\n                {\n                    channels, // required\n                    samplers, // required\n                    name, // optional\n                    // extensions, // optional\n                    // extras,  // optional\n                },\n                animationIndex\n            ) => {\n                const data = channels.map(\n                    ({\n                        sampler: samplerIndex, // required\n                        target, // required\n                        // extensions, // optional\n                        // extras, // optional\n                    }) => {\n                        const {\n                            input: inputIndex, // required\n                            interpolation = 'LINEAR',\n                            output: outputIndex, // required\n                            // extensions, // optional\n                            // extras, // optional\n                        } = samplers[samplerIndex];\n\n                        const {\n                            node: nodeIndex, // optional - TODO: when is it not included?\n                            path, // required\n                            // extensions, // optional\n                            // extras, // optional\n                        } = target;\n\n                        const node = nodes[nodeIndex];\n                        const transform = TRANSFORMS[path];\n                        const times = this.parseAccessor(inputIndex, desc, bufferViews).data;\n                        const values = this.parseAccessor(outputIndex, desc, bufferViews).data;\n\n                        // Store reference on node for cyclical retrieval\n                        if (!node.animations) node.animations = [];\n                        if (!node.animations.includes(animationIndex)) node.animations.push(animationIndex);\n\n                        return {\n                            node,\n                            transform,\n                            interpolation,\n                            times,\n                            values,\n                        };\n                    }\n                );\n\n                return {\n                    name,\n                    animation: new GLTFAnimation(data),\n                };\n            }\n        );\n    }\n\n    static parseScenes(desc, nodes) {\n        if (!desc.scenes) return null;\n        return desc.scenes.map(\n            ({\n                nodes: nodesIndices = [],\n                name, // optional\n                extensions,\n                extras,\n            }) => {\n                const scene = nodesIndices.reduce((map, i) => {\n                    // Don't add null nodes (instanced transforms)\n                    if (nodes[i]) map.push(nodes[i]);\n                    return map;\n                }, []);\n                scene.extras = extras;\n                return scene;\n            }\n        );\n    }\n\n    static parseLights(gl, desc, nodes, scenes) {\n        const lights = {\n            directional: [],\n            point: [],\n            spot: [],\n        };\n\n        // Update matrices on root nodes\n        scenes.forEach((scene) => scene.forEach((node) => node.updateMatrixWorld()));\n\n        // uses KHR_lights_punctual extension\n        const lightsDescArray = desc.extensions?.KHR_lights_punctual?.lights || [];\n\n        // Need nodes for transforms\n        nodes.forEach((node) => {\n            if (!node?.extensions?.KHR_lights_punctual) return;\n            const lightIndex = node.extensions.KHR_lights_punctual.light;\n            const lightDesc = lightsDescArray[lightIndex];\n            const light = {\n                name: lightDesc.name || '',\n                color: { value: new Vec3().set(lightDesc.color || 1) },\n            };\n            // Apply intensity directly to color\n            if (lightDesc.intensity !== undefined) light.color.value.multiply(lightDesc.intensity);\n\n            switch (lightDesc.type) {\n                case 'directional':\n                    light.direction = { value: new Vec3(0, 0, 1).transformDirection(node.worldMatrix) };\n                    break;\n                case 'point':\n                    light.position = { value: new Vec3().applyMatrix4(node.worldMatrix) };\n                    light.distance = { value: lightDesc.range };\n                    light.decay = { value: 2 };\n                    break;\n                case 'spot':\n                    // TODO: support spot uniforms\n                    Object.assign(light, lightDesc);\n                    break;\n            }\n\n            lights[lightDesc.type].push(light);\n        });\n\n        return lights;\n    }\n}\n","import { Renderer } from \"ogl\";\n\nexport function autoResize(element: HTMLElement, renderer: Renderer, callback?: (width: number, height: number) => void) {\n    const canvas = renderer.gl.canvas;\n\n    // Setup an observer to fit the canvas to the entire window\n    // From https://webglfundamentals.org/webgl/lessons/webgl-resizing-the-canvas.html\n    const resizeObserver = new ResizeObserver((entries) => {\n        let width, height;\n\n        for (const entry of entries) {\n            // See https://developer.mozilla.org/en-US/docs/Web/API/ResizeObserver\n            if (entry.contentBoxSize) {\n                // Firefox implements `contentBoxSize` as a single content rect, rather than an array\n                const contentBoxSize = Array.isArray(entry.contentBoxSize)\n                    ? entry.contentBoxSize[0]\n                    : entry.contentBoxSize;\n\n                width = contentBoxSize.inlineSize;\n                height = contentBoxSize.blockSize;\n            } else {\n                width = entry.contentRect.width\n                height = entry.contentRect.height;\n            }\n        }\n        renderer.setSize(width, height);\n        // renderer.setViewport(width, height);\n        // renderer.width = width / 10;\n        // renderer.height = height / 10;\n        // canvas.width = width;\n        // canvas.height = height;\n        if (callback) callback(canvas.width, canvas.height);\n    });\n\n    resizeObserver.observe(element, { box: \"content-box\" });\n}","#version 300 es\nprecision highp float;\n\nin vec3 v_position;\n// in vec3 v_normal;\n// in vec2 v_uv;\n\nuniform vec4 uColor;\n\nout vec4 outColor;\n\nvoid main() { outColor = uColor; }\n","#version 300 es\n\nin vec3 position;\n// in vec3 normal;\n// in vec2 uv;\n\nuniform mat4 modelViewMatrix;\nuniform mat4 projectionMatrix;\n\n// out vec3 v_normal;\nout vec3 v_position;\n// out vec2 v_uv;\n\nvoid main() {\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n  // v_normal = normalize(normal);\n  v_position = position;\n  // v_uv = uv;\n}\n","#version 300 es\n// #extension GL_ARB_shading_language_include : require\n// #include \"./glitch.frag\"\n\nprecision highp float;\n\nin vec3 v_position;\nin vec3 v_normal;\nin vec2 v_uv;\nin vec3 v_vertPos;\nflat in vec3 v_vertStart;\n\nuniform float uTime;\nuniform vec2 uResolution;\nuniform vec3 uColor;\n\nout vec4 outColor;\n\nstruct Options {\n  bool transparent;\n  bool insideColor;\n  // In screen space pixels (roughly), with x = horizontal edges and y =\n  // vertical letter face edges\n  vec2 thickness;\n};\n\nconst Options options = Options(false, true, vec2(3.0, 5.0));\n\nconst float dashSize = 5.0;\nconst float gapSize = 5.0;\n\n// vec3 stroke = uColor;\nconst vec3 fill = vec3(0.5, 0.5, 0.5);\n\nfloat aastep(float threshold, float dist) {\n  float afwidth = fwidth(dist);\n  return smoothstep(threshold - afwidth, threshold + afwidth, dist);\n}\n\nvec4 getStyledWireframe(vec2 uv) {\n\n  vec2 distVec = 1.0 - 2.0 * abs(uv - 0.5);\n\n  // we can modify the distance field to create interesting effects & masking\n  // float noiseOff = 0.0;\n  // if (noiseA)\n  //   noiseOff += noise(vec4(vPosition.xyz * 1.0, time * 0.35)) * 0.15;\n  // if (noiseB)\n  //   noiseOff += noise(vec4(vPosition.xyz * 80.0, time * 0.5)) * 0.12;\n  // d += noiseOff;\n\n  // for dashed rendering, we can use this to get the 0 .. 1 value of the line\n  // length\n  // float positionAlong = max(barycentric.x, barycentric.y);\n  // if (barycentric.y < barycentric.x && barycentric.y < barycentric.z) {\n  //   positionAlong = 1.0 - positionAlong;\n  // }\n\n  // the thickness of the stroke\n  vec2 computedThickness = options.thickness.yx;\n\n  // if we want to shrink the thickness toward the center of the line segment\n  // if (squeeze) {\n  //   computedThickness *=\n  //       mix(squeezeMin, squeezeMax, (1.0 - sin(positionAlong * PI)));\n  // }\n\n  // here we offset the stroke position depending on whether it\n  // should overlap or not\n  // float offset = 1.0 / dashRepeats * dashLength / 2.0;\n  // if (!dashOverlap) {\n  //   offset += 1.0 / dashRepeats / 2.0;\n  // }\n\n  // offset += uTime * 0.22;\n\n  // create the repeating dash pattern\n  // float pattern = fract((positionAlong + offset) * dashRepeats);\n  // computedThickness *= 1.0 - aastep(dashLength, pattern);\n  // compute the anti-aliased stroke edge\n  // float edge = 1.0 - aastep(computedThickness, d);\n\n  // return vec4(edges, 0.0, 1.0);\n\n  // vec2 gr = vec2(dFdx(v_uv), dFdy(v_uv));\n  // vec2 gr = abs(dFdy(v_uv));\n  vec3 len = abs(v_vertStart - v_position);\n  float dist = max(max(len.g, len.b), len.r);\n\n  // return vec4(v_normal, 1.0);\n  // return vec4(vec3(step(0.5, fract(dist * 10.0))), 1.0);\n\n  // This is cool\n  // vec2 test = step(vec2(fract(uTime)), fract((v_uv / 3.0) * vec2(2.0)));\n\n  // vec2 test = step(vec2(fract(uTime)), fract((v_uv / 3.0) * vec2(2.0)));\n  // vec2 test = step(vec2(0.5), fract(( + uTime / 3.0) * vec2(2.0)));\n\n  // float checker = mod(dot(vec2(1.0), test), 2.0);\n\n  // return vec4(vec3(checker), 1.0);\n\n  const float dashRepeats = 1.0;\n  const float dashLength = 0.25;\n  // here we offset the stroke position depending on whether it\n  // should overlap or not\n  float offset = 1.0 / dashRepeats * dashLength / 2.0;\n  // if (!dashOverlap) {\n  //   offset += 1.0 / dashRepeats / 2.0;\n  // }\n\n  offset += uTime * 0.12;\n\n  // create the repeating dash pattern\n  vec2 pattern = fract((v_position.yz + offset) * dashRepeats *\n                       vec2(1.0, v_position.x - 3.0));\n  // float pattern = fract((dot(v_normal, v_position) + offset) * dashRepeats);\n  // return vec4(vec3(v_normal.x), 1.0);\n  computedThickness *= step(0.5, pattern);\n\n  vec2 deriv = fwidth(distVec);\n  vec2 aaStep = smoothstep(vec2(0.0), computedThickness * deriv, distVec);\n  float edge = 1.0 - min(aaStep.x, aaStep.y);\n  vec2 edges = 1.0 - aaStep;\n\n  // return vec4(vec3(aaStep.y), 1.0);\n\n  // now compute the final color of the mesh\n  vec4 outColor = vec4(0.0);\n  if (options.transparent) {\n    // outColor = vec4(uColor, edge);\n\n    outColor = mix(vec4(0.1, 0.1, 0.1, 0.0), vec4(uColor, 1.0), edge);\n\n    if (options.insideColor && !gl_FrontFacing) {\n      outColor.rgb = fill;\n    }\n  } else {\n    outColor = vec4(mix(vec3(0.0), uColor, edge), 1.0);\n  }\n\n  return outColor;\n}\n\nvoid main() {\n  // vec4 test = getStyledWireframe(v_uv);\n  // vec4 g = glitchEffect(uTime, gl_FragCoord.xy, uResolution);\n\n  // outColor = mix(test, g, g.a);\n\n  outColor = getStyledWireframe(v_uv);\n}\n","#version 300 es\n\nin vec3 position;\nin vec3 normal;\nin vec2 uv;\n\nuniform mat4 modelViewMatrix;\nuniform mat4 projectionMatrix;\n\nout vec3 v_normal;\nout vec3 v_position;\nout vec3 v_vertPos;\nflat out vec3 v_vertStart;\nout vec2 v_uv;\n\nvoid main() {\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n  v_normal = normalize(normal);\n  v_position = position;\n  v_uv = uv;\n\n  v_vertPos = gl_Position.xyz / gl_Position.w;\n  v_vertStart = position;\n}\n","#version 300 es\nprecision highp float;\n\nuniform sampler2D tMap;\nuniform vec2 uResolution;\nuniform float uTime;\n\nout vec4 outColor;\n\n// Based on https://www.shadertoy.com/view/XtyXzW\n\nfloat time;\n\nfloat _round(float n) { return floor(n + .5); }\n\nvec2 _round(vec2 n) { return floor(n + .5); }\n\n// --------------------------------------------------------\n// Glitch core\n// --------------------------------------------------------\n\nfloat rand(vec2 co) {\n  return fract(sin(dot(co.xy, vec2(12.9898, 78.233))) * 43758.5453);\n}\n\nconst float glitchScale = .5;\n\nvec2 glitchCoord(vec2 p, vec2 gridSize) {\n  vec2 coord = floor(p / gridSize) * gridSize;\n  coord += (gridSize / 2.);\n  return coord;\n}\n\nstruct GlitchSeed {\n  vec2 seed;\n  float prob;\n};\n\nfloat fBox2d(vec2 p, vec2 b) {\n  vec2 d = abs(p) - b;\n  return min(max(d.x, d.y), 0.0) + length(max(d, 0.0));\n}\n\nGlitchSeed glitchSeed(vec2 p, float speed) {\n  float seedTime = floor(time * speed);\n  vec2 seed =\n      vec2(1. + mod(seedTime / 100., 100.), 1. + mod(seedTime, 100.)) / 100.;\n  seed += p;\n\n  float prob = texture(tMap, p).b;\n\n  return GlitchSeed(seed, prob);\n}\n\nfloat shouldApply(GlitchSeed seed) {\n  return round(\n      mix(mix(rand(seed.seed), 1., seed.prob - .5), 0., (1. - seed.prob) * .5));\n}\n\n// --------------------------------------------------------\n// Glitch effects\n// --------------------------------------------------------\n\n// Swap\n\nvec4 swapCoords(vec2 seed, vec2 groupSize, vec2 subGrid, vec2 blockSize) {\n  vec2 rand2 = vec2(rand(seed), rand(seed + .1));\n  vec2 range = subGrid - (blockSize - 1.);\n  vec2 coord = floor(rand2 * range) / subGrid;\n  vec2 bottomLeft = coord * groupSize;\n  vec2 realBlockSize = (groupSize / subGrid) * blockSize;\n  vec2 topRight = bottomLeft + realBlockSize;\n  topRight -= groupSize / 2.;\n  bottomLeft -= groupSize / 2.;\n  return vec4(bottomLeft, topRight);\n}\n\nfloat isInBlock(vec2 pos, vec4 block) {\n  vec2 a = sign(pos - block.xy);\n  vec2 b = sign(block.zw - pos);\n  return min(sign(a.x + a.y + b.x + b.y - 3.), 0.);\n}\n\nvec2 moveDiff(vec2 pos, vec4 swapA, vec4 swapB) {\n  vec2 diff = swapB.xy - swapA.xy;\n  return diff * isInBlock(pos, swapA);\n}\n\nvoid swapBlocks(inout vec2 xy, vec2 groupSize, vec2 subGrid, vec2 blockSize,\n                vec2 seed, float apply) {\n\n  vec2 groupOffset = glitchCoord(xy, groupSize);\n  vec2 pos = xy - groupOffset;\n\n  vec2 seedA = seed * groupOffset;\n  vec2 seedB = seed * (groupOffset + .1);\n\n  vec4 swapA = swapCoords(seedA, groupSize, subGrid, blockSize);\n  vec4 swapB = swapCoords(seedB, groupSize, subGrid, blockSize);\n\n  vec2 newPos = pos;\n  newPos += moveDiff(pos, swapA, swapB) * apply;\n  newPos += moveDiff(pos, swapB, swapA) * apply;\n  pos = newPos;\n\n  xy = pos + groupOffset;\n}\n\n// Static\n\nvoid staticNoise(inout vec2 p, vec2 groupSize, float grainSize,\n                 float contrast) {\n  GlitchSeed seedA = glitchSeed(glitchCoord(p, groupSize), 5.);\n  seedA.prob *= .5;\n  if (shouldApply(seedA) == 1.) {\n    GlitchSeed seedB = glitchSeed(glitchCoord(p, vec2(grainSize)), 5.);\n    vec2 offset = vec2(rand(seedB.seed), rand(seedB.seed + .1));\n    offset = round(offset * 2. - 1.);\n    offset *= contrast;\n    p += offset;\n  }\n}\n\n// --------------------------------------------------------\n// Glitch compositions\n// --------------------------------------------------------\n\nvoid glitchSwap(inout vec2 p) {\n\n  vec2 pp = p;\n\n  float scale = glitchScale;\n  float speed = 5.;\n\n  vec2 groupSize;\n  vec2 subGrid;\n  vec2 blockSize;\n  GlitchSeed seed;\n  float apply;\n\n  groupSize = vec2(.8) * scale;\n  subGrid = vec2(2);\n  blockSize = vec2(1);\n\n  seed = glitchSeed(glitchCoord(p, groupSize), speed);\n  apply = shouldApply(seed);\n  swapBlocks(p, groupSize, subGrid, blockSize, seed.seed, apply);\n\n  groupSize = vec2(.8) * scale;\n  subGrid = vec2(3);\n  blockSize = vec2(1);\n\n  seed = glitchSeed(glitchCoord(p, groupSize), speed);\n  apply = shouldApply(seed);\n  swapBlocks(p, groupSize, subGrid, blockSize, seed.seed, apply);\n\n  groupSize = vec2(.2) * scale;\n  subGrid = vec2(6);\n  blockSize = vec2(1);\n\n  seed = glitchSeed(glitchCoord(p, groupSize), speed);\n  float apply2 = shouldApply(seed);\n  swapBlocks(p, groupSize, subGrid, blockSize, (seed.seed + 1.),\n             apply * apply2);\n  swapBlocks(p, groupSize, subGrid, blockSize, (seed.seed + 2.),\n             apply * apply2);\n  swapBlocks(p, groupSize, subGrid, blockSize, (seed.seed + 3.),\n             apply * apply2);\n  swapBlocks(p, groupSize, subGrid, blockSize, (seed.seed + 4.),\n             apply * apply2);\n  swapBlocks(p, groupSize, subGrid, blockSize, (seed.seed + 5.),\n             apply * apply2);\n\n  groupSize = vec2(1.2, .2) * scale;\n  subGrid = vec2(9, 2);\n  blockSize = vec2(3, 1);\n\n  seed = glitchSeed(glitchCoord(p, groupSize), speed);\n  apply = shouldApply(seed);\n  swapBlocks(p, groupSize, subGrid, blockSize, seed.seed, apply);\n}\n\nvoid glitchStatic(inout vec2 p) {\n\n  // Static\n  //staticNoise(p, vec2(.25, .25 / 2.) * glitchScale, .005, 5.);\n\n  // 8-bit\n  staticNoise(p, vec2(.5, .25 / 2.) * glitchScale, .2 * glitchScale, 2.);\n}\n\nfloat glitchTime(vec2 p, float inTime) {\n  const float speed = 5.0;\n  vec2 groupSize = vec2(0.5 * glitchScale);\n\n  GlitchSeed seed = glitchSeed(glitchCoord(p, groupSize), speed);\n  // seed.prob *= .5;\n  if (shouldApply(seed) == 1.) {\n    float frozenTime = floor(inTime * speed) / speed;\n    inTime = frozenTime;\n  }\n  return inTime;\n}\n\nfloat glitchColor(vec2 p) {\n  vec2 groupSize = vec2(.75, .125) * glitchScale;\n  vec2 subGrid = vec2(0, 6);\n  float speed = 5.;\n  GlitchSeed seed = glitchSeed(glitchCoord(p, groupSize), speed);\n  seed.prob *= .3;\n  if (shouldApply(seed) == 1.) {\n    vec2 co = mod(p, groupSize) / groupSize;\n    co *= subGrid;\n    float a = max(co.x, co.y);\n    // color.rgb *= vec3(\n    //   min(floor(mod(a - 0., 3.)), 1.),\n    //     min(floor(mod(a - 1., 3.)), 1.),\n    //     min(floor(mod(a - 2., 3.)), 1.)\n    //);\n\n    return min(floor(mod(a, 2.)), 1.) * 10.;\n\n    // return vec4(vec3(min(floor(mod(a, 2.)), 1.) * 10.), 1.0);\n  }\n  return 1.0;\n}\n\nvec4 glitchEffect(float intime, vec2 p) {\n  time = fract(intime);\n\n  // vec2 p = fragCoord.xy / resolution.xy;\n\n  // const float range = 0.05;\n  // float height = fragCoord.y / resolution.y;\n  // float band = step(height - range, time) * step(time, height + range);\n\n  // float prob = glitchSeed(p, 10.).prob;\n  // return = vec4(vec3(band), 1.0);\n\n  float mul = 1.0;\n  vec4 color;\n\n  // if (band == 1.0) {\n  if (fract(time) < 0.4) {\n    glitchSwap(p);\n    time = glitchTime(p, time);\n    glitchStatic(p);\n    mul = glitchColor(p);\n  }\n\n  color = texture(tMap, p);\n  color.rgb *= mul;\n\n  // color = mix(a, vec3(1.0, 0.0, 0.0), pos.y * time);\n\n  return color;\n}\n\nvoid main() {\n  vec2 uv = gl_FragCoord.xy / uResolution.xy;\n  outColor = glitchEffect(uTime, uv);\n}\n","#version 300 es\nprecision highp float;\n\nuniform sampler2D tMap;\nuniform vec2 uResolution;\nuniform float uTime;\n\nout vec4 outColor;\n\nconst float width = 0.001;\nconst float strength = 0.5;\n\nvoid main() {\n  vec2 uv = gl_FragCoord.xy / uResolution.xy;\n\n  float amount = 0.0;\n\n  amount = (1.0 + sin(uTime * 6.0)) * 0.5;\n  amount *= 1.0 + sin(uTime * 16.0) * 0.5;\n  amount *= 1.0 + sin(uTime * 19.0) * 0.5;\n  amount *= 1.0 + sin(uTime * 27.0) * 0.5;\n  // amount = pow(amount, 3.0);\n\n  amount *= width;\n  \n  vec4 orig = texture(tMap, uv);\n\n  vec4 col;\n  col.r = texture(tMap, vec2(uv.x + amount, uv.y)).r;\n  col.g = orig.g;\n  col.b = texture(tMap, vec2(uv.x - amount, uv.y)).b;\n  col.a = orig.a;\n\n  outColor = mix(col, orig, 1.0 - strength);\n}","#version 300 es\nin vec2 uv;\nin vec2 position;\n\nout vec2 vUv;\n\nvoid main() {\n  vUv = uv;\n  gl_Position = vec4(position, 0, 1);\n}\n","const clamp = (num: number, min: number, max: number) => Math.min(Math.max(num, min), max);\n\nexport class MouseTracker {\n\n    // Initialize variable to store scaled mouse coordinates.\n    mouse = {\n        x: 0,\n        y: 0\n    }\n\n    // Element that references the entire page\n    page: HTMLElement;\n\n    constructor() {\n\n        // Get a reference to the HTML element we want to track mouse movement on.\n        this.page = document.documentElement;\n\n        // Add a mousemove event listener to the element.\n        // Arrow function used to lexically bind 'this', see https://stackoverflow.com/a/32894019\n        this.page.addEventListener(\"mousemove\", (e) => {\n            this.setMouse(e.clientX, e.clientY)\n        }, false);\n\n        this.page.addEventListener(\"touchmove\", (e) => {\n            const lastTouch = e.touches[e.touches.length - 1];\n            this.setMouse(lastTouch.clientX, lastTouch.clientY)\n        }, false);\n    }\n\n    private setMouse(x: number, y: number) {\n        // Calculate the scaled coordinates between -1 and 1.\n        this.mouse.x = clamp((x / this.page.clientWidth) * 2 - 1, -1, 1);\n        this.mouse.y = clamp((y / this.page.clientHeight) * -2 + 1, -1, 1); // Invert the Y-axis for -1 at the bottom.\n    }\n\n    getRotation(): { x: number, y: number } {\n        // Yes, this is correct, because x and y here refer to the angle axes\n        const x = Math.asin(-1 * this.mouse.y);\n        const y = Math.asin(this.mouse.x);\n        return { x, y };\n    }\n}","import {\n    Post,\n    Renderer,\n    Camera,\n    Transform,\n    Program,\n    GLTFLoader,\n    Vec2,\n    Vec4,\n    RendererSortable,\n    Vec3,\n} from \"ogl\";\n\nimport { autoResize } from \"./canvas\"\n\nimport solid_frag from \"../../shaders/solid.frag\";\nimport vertex from \"../../shaders/vertex.glsl\";\nimport outline_frag from \"../../shaders/outline.frag\";\nimport outlineVert from \"../../shaders/outline.vert\";\nimport glitchEffect from \"../../shaders/glitch.frag\";\nimport aberrationEffect from \"../../shaders/aberration.frag\";\nimport postVert from \"../../shaders/post.vert\";\nimport { MouseTracker } from \"./mouse\";\n\n\nconst renderer = new Renderer({\n    antialias: true,\n    alpha: true,\n    dpr: window.devicePixelRatio,\n    autoClear: true,\n});\n\nconst gl = renderer.gl;\nconst el = document.getElementById(\"3D\");\nel?.appendChild(gl.canvas);\ngl.clearColor(1.0, 1.0, 1.0, 0.0);\n// gl.enable(gl.SAMPLE_ALPHA_TO_COVERAGE);\n\nconst post = new Post(gl);\n\nconst uniforms = {\n    uTime: { value: 0 },\n    uResolution: { value: new Vec2(gl.canvas.width, gl.canvas.height) },\n};\n\nconst camera = new Camera(gl);\ncamera.position.set(0, 0, 2.5);\n\nconst tracker = new MouseTracker();\n\nautoResize(el!, renderer, (width: number, height: number) => {\n    const aspect = width / height;\n    const zoom = (window.innerWidth <= 640) ? 1.8 : 2.2;\n\n    camera.orthographic({\n        zoom,\n        left: -1 * aspect,\n        right: 1 * aspect,\n        bottom: -1,\n        top: 1,\n        near: 0.01,\n        far: 1000,\n    });\n\n    post.resize();\n    uniforms.uResolution.value.set(gl.canvas.width, gl.canvas.height);\n});\n\n\nconst scene = new Transform();\n\nconst solid = (color: Vec4) =>\n    new Program(gl, {\n        vertex: vertex,\n        fragment: solid_frag,\n        uniforms: {\n            uColor: { value: color },\n        },\n        transparent: true,\n        cullFace: false,\n    });\n\nconst outlineProgram = (color: Vec3) =>\n    new Program(gl, {\n        vertex: outlineVert,\n        fragment: outline_frag,\n        uniforms: {\n            uTime: uniforms.uTime,\n            uResolution: uniforms.uResolution,\n            uColor: { value: color },\n        },\n        transparent: true,\n        cullFace: false,\n    });\n\nconst faceTransparency = 0.7;\nconst purpleColor = new Vec4(87.0 / 255.0, 6.0 / 255.0, 140.0 / 255.0, faceTransparency);\nconst tealColor = new Vec4(0.0 / 255.0, 155.0 / 255.0, 138.0 / 255.0, faceTransparency);\n\nlet sides: any;\nlet faces: any;\n\nasync function loadInitial() {\n    const modelPath = \"/themes/CSAW-CTFd-Themes/static/img/osiris-logo.glb\";\n    const gltf = await GLTFLoader.load(gl, modelPath);\n    // console.log(gltf);\n\n    sides = gltf.scene.find((s: any) => s.name === \"Sides\");\n    faces = gltf.scene.find((s: any) => s.name === \"Faces\");\n\n    // TODO: abstract these two functions into one common function\n    const setFacesProgram = (searchString: string, color: Vec4) => {\n        const meshes: Transform[] = faces.children.find((s: { name: string; }) => s.name === searchString).children.reduce((acc: any[], cur) => acc.concat(cur.children), []);\n\n        meshes.forEach(\n            m => (m.children[0] as RendererSortable).program = solid(color)\n        );\n    }\n\n    setFacesProgram(\"Top\", purpleColor);\n    setFacesProgram(\"Bottom\", tealColor);\n\n    const setSidesProgram = (searchString: string, color: Vec4) => {\n        const meshes: Transform[] = sides.children.find((s: { name: string; }) => s.name === searchString).children;\n\n        meshes.forEach(\n            m => (m.children[0] as RendererSortable).program = outlineProgram(new Vec3(color.x, color.y, color.z))\n        );\n    }\n\n    setSidesProgram(\"SidesTop\", purpleColor);\n    setSidesProgram(\"SidesBottom\", tealColor);\n\n    sides.setParent(scene);\n    faces.setParent(scene);\n\n    requestAnimationFrame(update);\n}\n\nloadInitial();\n\nconst aberrationPass = post.addPass({\n    vertex: postVert,\n    fragment: aberrationEffect,\n    uniforms: uniforms,\n    enabled: true,\n});\n\nconst glitchPass = post.addPass({\n    vertex: postVert,\n    fragment: glitchEffect,\n    uniforms: uniforms,\n    enabled: true,\n});\n\nfunction update(time: number) {\n    requestAnimationFrame(update);\n    uniforms.uTime.value = time * 0.001;\n\n    // For some reason this doesn't work when setting the Euler object directly\n    const rot = tracker.getRotation();\n    scene.rotation.x = rot.x;\n    scene.rotation.y = rot.y;\n\n    post.render({ scene, camera, sort: false });\n}"],"names":["length","a","x","y","z","copy","out","set","add","b","subtract","multiply","divide","scale","distance","squaredDistance","squaredLength","negate","inverse","normalize","len","dot","cross","ax","ay","az","bx","by","bz","lerp","t","transformMat4","m","w","scaleRotateMat4","transformMat3","transformQuat","q","qx","qy","qz","qw","uvx","uvy","uvz","uuvx","uuvy","uuvz","w2","angle","tempA","tempB","cosine","exactEquals","Vec3","v","Vec3Func.set","Vec3Func.copy","va","vb","Vec3Func.add","Vec3Func.subtract","Vec3Func.multiply","Vec3Func.scale","Vec3Func.divide","Vec3Func.inverse","Vec3Func.length","Vec3Func.distance","Vec3Func.squaredLength","Vec3Func.squaredDistance","Vec3Func.negate","Vec3Func.cross","Vec3Func.normalize","Vec3Func.dot","Vec3Func.exactEquals","mat3","Vec3Func.transformMat3","mat4","Vec3Func.transformMat4","Vec3Func.scaleRotateMat4","Vec3Func.transformQuat","Vec3Func.angle","Vec3Func.lerp","o","tempVec3","ID","ATTR_ID","isBoundsWarned","Geometry","gl","attributes","key","attr","isNewBuffer","value","start","count","program","location","name","type","numLoc","size","stride","offset","i","mode","_a","indexBytesPerElement","array","min","max","center","l","maxRadiusSq","arrayCacheF32","Program","vertex","fragment","uniforms","transparent","cullFace","frontFace","depthTest","depthWrite","depthFunc","addLineNumbers","numUniforms","uIndex","uniform","split","locations","numAttribs","aIndex","attribute","src","dst","srcAlpha","dstAlpha","modeRGB","modeAlpha","flipFaces","textureUnit","activeUniform","component","warn","setUniform","textureUnits","flatten","setValue","arraysEqual","setArray","string","lines","arrayLen","valueLen","warnCount","message","Renderer","canvas","width","height","dpr","alpha","depth","stencil","antialias","premultipliedAlpha","preserveDrawingBuffer","powerPreference","autoClear","webgl","id","target","buffer","extension","webgl2Func","extFunc","scene","camera","frustumCull","sort","renderList","node","opaque","ui","update","clear","identity","setAxisAngle","axis","rad","aw","bw","rotateX","rotateY","rotateZ","slerp","omega","cosom","sinom","scale0","scale1","invert","a0","a1","a2","a3","invDot","conjugate","fromMat3","fTrace","fRoot","j","k","fromEuler","euler","order","sx","cx","sy","cy","sz","cz","vec4.copy","vec4.set","vec4.dot","vec4.normalize","Quat","triggerProps","property","success","QuatFunc.identity","QuatFunc.set","QuatFunc.rotateX","QuatFunc.rotateY","QuatFunc.rotateZ","QuatFunc.invert","QuatFunc.conjugate","QuatFunc.copy","QuatFunc.normalize","qA","qB","QuatFunc.multiply","QuatFunc.dot","matrix3","QuatFunc.fromMat3","isInternal","QuatFunc.fromEuler","QuatFunc.setAxisAngle","QuatFunc.slerp","EPSILON","m00","m01","m02","m03","m10","m11","m12","m13","m20","m21","m22","m23","m30","m31","m32","m33","a00","a01","a02","a03","a10","a11","a12","a13","a20","a21","a22","a23","a30","a31","a32","a33","b00","b01","b02","b03","b04","b05","b06","b07","b08","b09","b10","b11","det","determinant","b0","b1","b2","b3","translate","rotate","s","c","b12","b20","b21","b22","getTranslation","mat","getScaling","getMaxScaleOnAxis","getRotation","temp","scaling","is1","is2","is3","sm11","sm12","sm13","sm21","sm22","sm23","sm31","sm32","sm33","trace","S","decompose","srcMat","dstRotation","dstTranslation","dstScale","vec3.length","_m1","invSX","invSY","invSZ","compose","dstMat","srcRotation","srcTranslation","srcScale","te","x2","y2","z2","xx","xy","xz","yy","yz","zz","wx","wy","wz","fromQuat","yx","zx","zy","perspective","fovy","aspect","near","far","f","nf","ortho","left","right","bottom","top","lr","bt","targetTo","eye","up","eyex","eyey","eyez","upx","upy","upz","z0","z1","x0","x1","multiplyScalar","Mat4","Mat4Func.set","Mat4Func.translate","Mat4Func.rotate","Mat4Func.scale","ma","mb","Mat4Func.add","Mat4Func.subtract","Mat4Func.multiply","Mat4Func.multiplyScalar","Mat4Func.identity","Mat4Func.copy","fov","Mat4Func.perspective","Mat4Func.ortho","Mat4Func.fromQuat","Mat4Func.invert","pos","Mat4Func.compose","Mat4Func.decompose","Mat4Func.getRotation","Mat4Func.getTranslation","Mat4Func.getScaling","Mat4Func.getMaxScaleOnAxis","Mat4Func.targetTo","Mat4Func.determinant","fromRotationMatrix","tmpMat4","Euler","EulerFunc.fromRotationMatrix","Transform","parent","notifyParent","child","notifyChild","force","callback","tempMat4","tempVec3a","tempVec3b","Camera","zoom","invLen","worldMatrix","radius","normal","plane","fromMat4","normalFromMat4","Mat3","Mat3Func.set","Mat3Func.translate","Mat3Func.rotate","Mat3Func.scale","Mat3Func.multiply","Mat3Func.identity","Mat3Func.copy","Mat3Func.fromMat4","Mat3Func.fromQuat","vec3a","vec3b","vec3c","Mat3Func.invert","Mat3Func.normalFromMat4","Mesh","geometry","frustumCulled","renderOrder","emptyPixel","isPowerOf2","Texture","image","format","internalFormat","wrapS","wrapT","generateMipmaps","minFilter","magFilter","premultiplyAlpha","unpackAlignment","flipY","anisotropy","level","needsUpdate","RenderTarget","color","depthTexture","drawBuffers","Vec2","Vec2Func.set","Vec2Func.copy","Vec2Func.add","Vec2Func.subtract","Vec2Func.multiply","Vec2Func.scale","Vec2Func.divide","Vec2Func.inverse","Vec2Func.length","Vec2Func.distance","Vec2Func.squaredDistance","Vec2Func.squaredLength","Vec2Func.negate","Vec2Func.cross","Vec2Func.normalize","Vec2Func.dot","Vec2Func.exactEquals","Vec2Func.transformMat3","Vec2Func.transformMat4","Vec2Func.lerp","Vec4","Vec4Func.set","Vec4Func.copy","Vec4Func.normalize","Vec4Func.scale","Vec4Func.dot","Triangle","Post","targetOnly","options","fbo","defaultVertex","defaultFragment","textureUniform","enabled","pass","texture","beforePostCallbacks","enabledPasses","NormalProgram","tmpVec3A","tmpVec3B","tmpVec3C","tmpVec3D","tmpQuatA","tmpQuatB","tmpQuatC","tmpQuatD","GLTFAnimation","data","weight","times","totalWeight","isSet","elapsed","transform","interpolation","values","val","prevIndex","nextIndex","prevVal","prevTan","nextTan","nextVal","t2","t3","s2","s3","s0","s1","GLTFSkin","skeleton","bone","_worldMatrix","InstancedMesh","args","matrixData","lightmapData","TYPE_ARRAY","TYPE_SIZE","ATTRIBUTES","TRANSFORMS","GLTFLoader","manager","dir","desc","buffers","bufferViews","images","textures","materials","skins","meshes","nodes","cameras","animations","scenes","lights","res","glb","header","jsonChunkHeader","jsonByteOffset","jsonByteLength","jsonText","json","binaryChunkHeader","binaryByteOffset","binaryByteLength","binary","uri","primitives","indices","componentType","mimeType","bufferIndex","byteOffset","byteLength","byteStride","extensions","extras","isAttribute","bufferViewIndex","blob","textureInfo","samplerIndex","sourceIndex","sampler","prop","pbrMetallicRoughness","normalTexture","occlusionTexture","emissiveTexture","emissiveFactor","alphaMode","alphaCutoff","doubleSided","baseColorFactor","baseColorTexture","metallicFactor","roughnessFactor","metallicRoughnessTexture","inverseBindMatrices","joints","weights","meshIndex","numInstances","skinIndices","isLightmap","mesh","skin","skinIndex","meshConstructor","materialIndex","targets","index","normalized","sparse","bufferByteOffset","TypeArray","elementBytes","componentStride","isInterleaved","filteredData","typedData","end","children","matrix","rotation","translation","isCamera","cameraOpts","xmag","ymag","isInstanced","isFirstInstance","isInstancedMatrix","childIndex","primitive","joint","channels","samplers","animationIndex","inputIndex","outputIndex","nodeIndex","path","nodesIndices","map","_b","lightsDescArray","lightIndex","lightDesc","light","autoResize","element","renderer","entries","entry","contentBoxSize","solid_default","vertex_default","outline_default","glitch_default","aberration_default","post_default","clamp","num","MouseTracker","e","lastTouch","el","post","tracker","solid","solid_frag","outlineProgram","outlineVert","outline_frag","faceTransparency","purpleColor","tealColor","sides","faces","loadInitial","gltf","setFacesProgram","searchString","acc","cur","setSidesProgram","postVert","aberrationEffect","glitchEffect","time","rot"],"mappings":"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","x_google_ignoreList":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28]}